
/*
 * Integration API
 *
 * This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type DefaultApiService service

/* 
DefaultApiService Assign OBLPN to Load

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param loadNbr 
 * @param oblpnNbr 
 * @param optional nil or *DefaultApiAssignOBLPNtoLoadOpts - Optional Parameters:
     * @param "CarrierCode" (optional.String) -  
     * @param "CompanyCode" (optional.String) -  
     * @param "Delimiter" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "ReassignLoadFlg" (optional.Bool) -  
     * @param "RequireSpecificOblpnStatus" (optional.Int32) -  
     * @param "TrailerNbr" (optional.String) -  

@return interface{}
*/

type DefaultApiAssignOBLPNtoLoadOpts struct { 
	CarrierCode optional.String
	CompanyCode optional.String
	Delimiter optional.String
	FacilityCode optional.String
	ReassignLoadFlg optional.Bool
	RequireSpecificOblpnStatus optional.Int32
	TrailerNbr optional.String
}

func (a *DefaultApiService) AssignOBLPNtoLoad(ctx context.Context, loadNbr string, oblpnNbr string, localVarOptionals *DefaultApiAssignOBLPNtoLoadOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/assign_oblpn_to_load/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CarrierCode.IsSet() {
		localVarFormParams.Add("carrier_code", parameterToString(localVarOptionals.CarrierCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Delimiter.IsSet() {
		localVarFormParams.Add("delimiter", parameterToString(localVarOptionals.Delimiter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	localVarFormParams.Add("load_nbr", parameterToString(loadNbr, ""))
	localVarFormParams.Add("oblpn_nbr", parameterToString(oblpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.ReassignLoadFlg.IsSet() {
		localVarFormParams.Add("reassign_load_flg", parameterToString(localVarOptionals.ReassignLoadFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequireSpecificOblpnStatus.IsSet() {
		localVarFormParams.Add("require_specific_oblpn_status", parameterToString(localVarOptionals.RequireSpecificOblpnStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TrailerNbr.IsSet() {
		localVarFormParams.Add("trailer_nbr", parameterToString(localVarOptionals.TrailerNbr.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Assign and Load LPN

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param loadNbr 
 * @param oblpnNbr 
 * @param optional nil or *DefaultApiAssignandLoadLPNOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "DockDoorNbr" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "OblpnWeight" (optional.Float32) -  
     * @param "PalletNbr" (optional.String) -  
     * @param "TrailerNbr" (optional.String) -  

@return interface{}
*/

type DefaultApiAssignandLoadLPNOpts struct { 
	CompanyCode optional.String
	DockDoorNbr optional.String
	FacilityCode optional.String
	OblpnWeight optional.Float32
	PalletNbr optional.String
	TrailerNbr optional.String
}

func (a *DefaultApiService) AssignandLoadLPN(ctx context.Context, loadNbr string, oblpnNbr string, localVarOptionals *DefaultApiAssignandLoadLPNOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/assign_and_load_oblpn/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DockDoorNbr.IsSet() {
		localVarFormParams.Add("dock_door_nbr", parameterToString(localVarOptionals.DockDoorNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	localVarFormParams.Add("load_nbr", parameterToString(loadNbr, ""))
	localVarFormParams.Add("oblpn_nbr", parameterToString(oblpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.OblpnWeight.IsSet() {
		localVarFormParams.Add("oblpn_weight", parameterToString(localVarOptionals.OblpnWeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PalletNbr.IsSet() {
		localVarFormParams.Add("pallet_nbr", parameterToString(localVarOptionals.PalletNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TrailerNbr.IsSet() {
		localVarFormParams.Add("trailer_nbr", parameterToString(localVarOptionals.TrailerNbr.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Create LPN

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lpnNbr 
 * @param qty 
 * @param optional nil or *DefaultApiCreateLPNOpts - Optional Parameters:
     * @param "BatchNumber" (optional.String) -  
     * @param "CompanyCode" (optional.String) -  
     * @param "DestFacilityCode" (optional.String) -  
     * @param "DropLocnBarcode" (optional.String) -  
     * @param "ExpiryDate" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "ItemAlternateCode" (optional.String) -  
     * @param "ItemBarcode" (optional.String) -  
     * @param "LockCode" (optional.String) -  
     * @param "LpnWeight" (optional.Float32) -  
     * @param "OrderType" (optional.String) -  
     * @param "XdockLpnFlg" (optional.Bool) -  

@return interface{}
*/

type DefaultApiCreateLPNOpts struct { 
	BatchNumber optional.String
	CompanyCode optional.String
	DestFacilityCode optional.String
	DropLocnBarcode optional.String
	ExpiryDate optional.String
	FacilityCode optional.String
	ItemAlternateCode optional.String
	ItemBarcode optional.String
	LockCode optional.String
	LpnWeight optional.Float32
	OrderType optional.String
	XdockLpnFlg optional.Bool
}

func (a *DefaultApiService) CreateLPN(ctx context.Context, lpnNbr string, qty int32, localVarOptionals *DefaultApiCreateLPNOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/create_lpn/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.BatchNumber.IsSet() {
		localVarFormParams.Add("batch_number", parameterToString(localVarOptionals.BatchNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DestFacilityCode.IsSet() {
		localVarFormParams.Add("dest_facility_code", parameterToString(localVarOptionals.DestFacilityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DropLocnBarcode.IsSet() {
		localVarFormParams.Add("drop_locn_barcode", parameterToString(localVarOptionals.DropLocnBarcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExpiryDate.IsSet() {
		localVarFormParams.Add("expiry_date", parameterToString(localVarOptionals.ExpiryDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemAlternateCode.IsSet() {
		localVarFormParams.Add("item_alternate_code", parameterToString(localVarOptionals.ItemAlternateCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemBarcode.IsSet() {
		localVarFormParams.Add("item_barcode", parameterToString(localVarOptionals.ItemBarcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LockCode.IsSet() {
		localVarFormParams.Add("lock_code", parameterToString(localVarOptionals.LockCode.Value(), ""))
	}
	localVarFormParams.Add("lpn_nbr", parameterToString(lpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.LpnWeight.IsSet() {
		localVarFormParams.Add("lpn_weight", parameterToString(localVarOptionals.LpnWeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderType.IsSet() {
		localVarFormParams.Add("order_type", parameterToString(localVarOptionals.OrderType.Value(), ""))
	}
	localVarFormParams.Add("qty", parameterToString(qty, ""))
	if localVarOptionals != nil && localVarOptionals.XdockLpnFlg.IsSet() {
		localVarFormParams.Add("xdock_lpn_flg", parameterToString(localVarOptionals.XdockLpnFlg.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Divert Confirm

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiDivertConfirmOpts - Optional Parameters:
     * @param "FlatData" (optional.String) -  
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiDivertConfirmOpts struct { 
	FlatData optional.String
	XmlData optional.String
}

func (a *DefaultApiService) DivertConfirm(ctx context.Context, localVarOptionals *DefaultApiDivertConfirmOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/divert_confirm/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.FlatData.IsSet() {
		localVarFormParams.Add("flat_data", parameterToString(localVarOptionals.FlatData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Entity Update

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param entityName 
 * @param key 
 * @param sequenceNumber 

@return interface{}
*/
func (a *DefaultApiService) EntityUpdate(ctx context.Context, entityName string, key string, sequenceNumber string) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Patch")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/entity/{entity_name}/{key}/{sequence_number}/"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_name"+"}", fmt.Sprintf("%v", entityName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", fmt.Sprintf("%v", key), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sequence_number"+"}", fmt.Sprintf("%v", sequenceNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Extended Property

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param entityName 
 * @param extendedProperty 
 * @param key 
 * @param optional nil or *DefaultApiExtendedPropertyOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  

@return interface{}
*/

type DefaultApiExtendedPropertyOpts struct { 
	CompanyCode optional.String
	FacilityCode optional.String
}

func (a *DefaultApiService) ExtendedProperty(ctx context.Context, entityName string, extendedProperty string, key string, localVarOptionals *DefaultApiExtendedPropertyOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/extended_property/{entity_name}/{key}/{extended_property}/"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_name"+"}", fmt.Sprintf("%v", entityName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extended_property"+"}", fmt.Sprintf("%v", extendedProperty), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", fmt.Sprintf("%v", key), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarQueryParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarQueryParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService From MHE Distribution Pack

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiFromMHEDistributionPackOpts - Optional Parameters:
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiFromMHEDistributionPackOpts struct { 
	XmlData optional.String
}

func (a *DefaultApiService) FromMHEDistributionPack(ctx context.Context, localVarOptionals *DefaultApiFromMHEDistributionPackOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/from_mhe_distribution_pack/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService From MHE Distribution Short

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiFromMHEDistributionShortOpts - Optional Parameters:
     * @param "FlatData" (optional.String) -  
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiFromMHEDistributionShortOpts struct { 
	FlatData optional.String
	XmlData optional.String
}

func (a *DefaultApiService) FromMHEDistributionShort(ctx context.Context, localVarOptionals *DefaultApiFromMHEDistributionShortOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/from_mhe_distribution_short/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.FlatData.IsSet() {
		localVarFormParams.Add("flat_data", parameterToString(localVarOptionals.FlatData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Get Next Numbers

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param counterCode 
 * @param optional nil or *DefaultApiGetNextNumbersOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "Count" (optional.Int32) -  
     * @param "FacilityCode" (optional.String) -  

@return interface{}
*/

type DefaultApiGetNextNumbersOpts struct { 
	CompanyCode optional.String
	Count optional.Int32
	FacilityCode optional.String
}

func (a *DefaultApiService) GetNextNumbers(ctx context.Context, counterCode string, localVarOptionals *DefaultApiGetNextNumbersOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/get_next_numbers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	localVarFormParams.Add("counter_code", parameterToString(counterCode, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarFormParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Get Status

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param entity 
 * @param key 
 * @param optional nil or *DefaultApiGetStatusOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  

@return interface{}
*/

type DefaultApiGetStatusOpts struct { 
	CompanyCode optional.String
	FacilityCode optional.String
}

func (a *DefaultApiService) GetStatus(ctx context.Context, entity string, key string, localVarOptionals *DefaultApiGetStatusOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/get_status/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	localVarFormParams.Add("entity", parameterToString(entity, ""))
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	localVarFormParams.Add("key", parameterToString(key, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Induct LPN

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiInductLPNOpts - Optional Parameters:
     * @param "FlatData" (optional.String) -  
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiInductLPNOpts struct { 
	FlatData optional.String
	XmlData optional.String
}

func (a *DefaultApiService) InductLPN(ctx context.Context, localVarOptionals *DefaultApiInductLPNOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/induct_lpn/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.FlatData.IsSet() {
		localVarFormParams.Add("flat_data", parameterToString(localVarOptionals.FlatData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Init Stage Interface

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiInitStageInterfaceOpts - Optional Parameters:
     * @param "Async" (optional.Bool) -  
     * @param "Entity" (optional.String) -  
     * @param "FlatData" (optional.String) -  
     * @param "ValidateXml" (optional.Bool) -  
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiInitStageInterfaceOpts struct { 
	Async optional.Bool
	Entity optional.String
	FlatData optional.String
	ValidateXml optional.Bool
	XmlData optional.String
}

func (a *DefaultApiService) InitStageInterface(ctx context.Context, localVarOptionals *DefaultApiInitStageInterfaceOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/init_stage_interface/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Async.IsSet() {
		localVarFormParams.Add("async", parameterToString(localVarOptionals.Async.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Entity.IsSet() {
		localVarFormParams.Add("entity", parameterToString(localVarOptionals.Entity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FlatData.IsSet() {
		localVarFormParams.Add("flat_data", parameterToString(localVarOptionals.FlatData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ValidateXml.IsSet() {
		localVarFormParams.Add("validate_xml", parameterToString(localVarOptionals.ValidateXml.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
/		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Lock/Unlock LPN

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiLockUnlockLPNOpts - Optional Parameters:
     * @param "Action" (optional.String) -  
     * @param "CompanyCode" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "LockCode" (optional.String) -  
     * @param "LpnNbr" (optional.String) -  
     * @param "RemoveLockFromShipmentDtlFlg" (optional.Bool) -  

@return interface{}
*/

type DefaultApiLockUnlockLPNOpts struct { 
	Action optional.String
	CompanyCode optional.String
	FacilityCode optional.String
	LockCode optional.String
	LpnNbr optional.String
	RemoveLockFromShipmentDtlFlg optional.Bool
}

func (a *DefaultApiService) LockUnlockLPN(ctx context.Context, localVarOptionals *DefaultApiLockUnlockLPNOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/lock_unlock_lpn/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Action.IsSet() {
		localVarFormParams.Add("action", parameterToString(localVarOptionals.Action.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LockCode.IsSet() {
		localVarFormParams.Add("lock_code", parameterToString(localVarOptionals.LockCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LpnNbr.IsSet() {
		localVarFormParams.Add("lpn_nbr", parameterToString(localVarOptionals.LpnNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RemoveLockFromShipmentDtlFlg.IsSet() {
		localVarFormParams.Add("remove_lock_from_shipment_dtl_flg", parameterToString(localVarOptionals.RemoveLockFromShipmentDtlFlg.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Object Inquiry

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param entity 
 * @param key 
 * @param companyCode 
 * @param facilityCode 
 * @param optional nil or *DefaultApiObjectInquiryOpts - Optional Parameters:
     * @param "Minimize" (optional.String) -  

@return interface{}
*/

type DefaultApiObjectInquiryOpts struct { 
	Minimize optional.String
}

func (a *DefaultApiService) ObjectInquiry(ctx context.Context, entity string, key string, companyCode string, facilityCode string, localVarOptionals *DefaultApiObjectInquiryOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/entity/{entity}/{key}/"
	localVarPath = strings.Replace(localVarPath, "{"+"entity"+"}", fmt.Sprintf("%v", entity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", fmt.Sprintf("%v", key), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("company_code", parameterToString(companyCode, ""))
	localVarQueryParams.Add("facility_code", parameterToString(facilityCode, ""))
	if localVarOptionals != nil && localVarOptionals.Minimize.IsSet() {
		localVarQueryParams.Add("minimize", parameterToString(localVarOptionals.Minimize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Pick Confirm

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiPickConfirmOpts - Optional Parameters:
     * @param "FlatData" (optional.String) -  
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiPickConfirmOpts struct { 
	FlatData optional.String
	XmlData optional.String
}

func (a *DefaultApiService) PickConfirm(ctx context.Context, localVarOptionals *DefaultApiPickConfirmOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pick_confirm/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.FlatData.IsSet() {
		localVarFormParams.Add("flat_data", parameterToString(localVarOptionals.FlatData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Receive LPN

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lpnNbr 
 * @param optional nil or *DefaultApiReceiveLPNOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "RcvdTrailerNbr" (optional.String) -  
     * @param "ReceivedTs" (optional.String) -  
     * @param "ReceivingLocation" (optional.String) -  
     * @param "XdockLpnFlg" (optional.Bool) -  
     * @param "XmlData" (optional.String) -  

@return interface{}
*/

type DefaultApiReceiveLPNOpts struct { 
	CompanyCode optional.String
	FacilityCode optional.String
	RcvdTrailerNbr optional.String
	ReceivedTs optional.String
	ReceivingLocation optional.String
	XdockLpnFlg optional.Bool
	XmlData optional.String
}

func (a *DefaultApiService) ReceiveLPN(ctx context.Context, lpnNbr string, localVarOptionals *DefaultApiReceiveLPNOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/receive_lpn/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	localVarFormParams.Add("lpn_nbr", parameterToString(lpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.RcvdTrailerNbr.IsSet() {
		localVarFormParams.Add("rcvd_trailer_nbr", parameterToString(localVarOptionals.RcvdTrailerNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReceivedTs.IsSet() {
		localVarFormParams.Add("received_ts", parameterToString(localVarOptionals.ReceivedTs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReceivingLocation.IsSet() {
		localVarFormParams.Add("receiving_location", parameterToString(localVarOptionals.ReceivingLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XdockLpnFlg.IsSet() {
		localVarFormParams.Add("xdock_lpn_flg", parameterToString(localVarOptionals.XdockLpnFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XmlData.IsSet() {
		localVarFormParams.Add("xml_data", parameterToString(localVarOptionals.XmlData.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Run MHE Stage Interface

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyCode 
 * @param entity 
 * @param facilityCode 
 * @param mheVendorCode 
 * @param optional nil or *DefaultApiRunMHEStageInterfaceOpts - Optional Parameters:
     * @param "PythonFunction" (optional.String) -  

@return interface{}
*/

type DefaultApiRunMHEStageInterfaceOpts struct { 
	PythonFunction optional.String
}

func (a *DefaultApiService) RunMHEStageInterface(ctx context.Context, companyCode string, entity string, facilityCode string, mheVendorCode string, localVarOptionals *DefaultApiRunMHEStageInterfaceOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/run_mhe_stage_interface/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("company_code", parameterToString(companyCode, ""))
	localVarFormParams.Add("entity", parameterToString(entity, ""))
	localVarFormParams.Add("facility_code", parameterToString(facilityCode, ""))
	localVarFormParams.Add("mhe_vendor_code", parameterToString(mheVendorCode, ""))
	if localVarOptionals != nil && localVarOptionals.PythonFunction.IsSet() {
		localVarFormParams.Add("python_function", parameterToString(localVarOptionals.PythonFunction.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Run Stage Interface

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyCode 
 * @param entity 
 * @param facilityCode 
 * @param fileGroupNbr 
 * @param optional nil or *DefaultApiRunStageInterfaceOpts - Optional Parameters:
     * @param "Async" (optional.Bool) -  

@return interface{}
*/

type DefaultApiRunStageInterfaceOpts struct { 
	Async optional.Bool
}

func (a *DefaultApiService) RunStageInterface(ctx context.Context, companyCode string, entity string, facilityCode string, fileGroupNbr string, localVarOptionals *DefaultApiRunStageInterfaceOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/run_stage_interface/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Async.IsSet() {
		localVarFormParams.Add("async", parameterToString(localVarOptionals.Async.Value(), ""))
	}
	localVarFormParams.Add("company_code", parameterToString(companyCode, ""))
	localVarFormParams.Add("entity", parameterToString(entity, ""))
	localVarFormParams.Add("facility_code", parameterToString(facilityCode, ""))
	localVarFormParams.Add("file_group_nbr", parameterToString(fileGroupNbr, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Ship OBLPN

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyCode 
 * @param facilityCode 
 * @param locnBarcode 
 * @param oblpnNbr 
 * @param optional nil or *DefaultApiShipOBLPNOpts - Optional Parameters:
     * @param "OutputFileToGenerate" (optional.String) -  

@return interface{}
*/

type DefaultApiShipOBLPNOpts struct { 
	OutputFileToGenerate optional.String
}

func (a *DefaultApiService) ShipOBLPN(ctx context.Context, companyCode string, facilityCode string, locnBarcode string, oblpnNbr string, localVarOptionals *DefaultApiShipOBLPNOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/ship_oblpn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("company_code", parameterToString(companyCode, ""))
	localVarFormParams.Add("facility_code", parameterToString(facilityCode, ""))
	localVarFormParams.Add("locn_barcode", parameterToString(locnBarcode, ""))
	localVarFormParams.Add("oblpn_nbr", parameterToString(oblpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.OutputFileToGenerate.IsSet() {
		localVarFormParams.Add("output_file_to_generate", parameterToString(localVarOptionals.OutputFileToGenerate.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Update Active Inventory

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param locationBarcode 
 * @param reasonCode 
 * @param optional nil or *DefaultApiUpdateActiveInventoryOpts - Optional Parameters:
     * @param "ActualQty" (optional.Float32) -  
     * @param "AdjustmentQty" (optional.Float32) -  
     * @param "BatchNumber" (optional.String) -  
     * @param "CompanyCode" (optional.String) -  
     * @param "ExpiryData" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "InvnAttrA" (optional.String) -  
     * @param "InvnAttrB" (optional.String) -  
     * @param "InvnAttrC" (optional.String) -  
     * @param "InvnAttrD" (optional.String) -  
     * @param "InvnAttrE" (optional.String) -  
     * @param "InvnAttrF" (optional.String) -  
     * @param "InvnAttrG" (optional.String) -  
     * @param "ItemAlternateCode" (optional.String) -  
     * @param "ItemBarcode" (optional.String) -  
     * @param "ItemCode" (optional.String) -  
     * @param "LocnCapacityCheckFlg" (optional.Bool) -  

@return interface{}
*/

type DefaultApiUpdateActiveInventoryOpts struct { 
	ActualQty optional.Float32
	AdjustmentQty optional.Float32
	BatchNumber optional.String
	CompanyCode optional.String
	ExpiryData optional.String
	FacilityCode optional.String
	InvnAttrA optional.String
	InvnAttrB optional.String
	InvnAttrC optional.String
	InvnAttrD optional.String
	InvnAttrE optional.String
	InvnAttrF optional.String
	InvnAttrG optional.String
	ItemAlternateCode optional.String
	ItemBarcode optional.String
	ItemCode optional.String
	LocnCapacityCheckFlg optional.Bool
}

func (a *DefaultApiService) UpdateActiveInventory(ctx context.Context, locationBarcode string, reasonCode string, localVarOptionals *DefaultApiUpdateActiveInventoryOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Patch")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/entity/active_inventory/{location_barcode}/"
	localVarPath = strings.Replace(localVarPath, "{"+"location_barcode"+"}", fmt.Sprintf("%v", locationBarcode), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ActualQty.IsSet() {
		localVarFormParams.Add("actual_qty", parameterToString(localVarOptionals.ActualQty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AdjustmentQty.IsSet() {
		localVarFormParams.Add("adjustment_qty", parameterToString(localVarOptionals.AdjustmentQty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BatchNumber.IsSet() {
		localVarFormParams.Add("batch_number", parameterToString(localVarOptionals.BatchNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExpiryData.IsSet() {
		localVarFormParams.Add("expiry_data", parameterToString(localVarOptionals.ExpiryData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrA.IsSet() {
		localVarFormParams.Add("invn_attr_a", parameterToString(localVarOptionals.InvnAttrA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrB.IsSet() {
		localVarFormParams.Add("invn_attr_b", parameterToString(localVarOptionals.InvnAttrB.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrC.IsSet() {
		localVarFormParams.Add("invn_attr_c", parameterToString(localVarOptionals.InvnAttrC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrD.IsSet() {
		localVarFormParams.Add("invn_attr_d", parameterToString(localVarOptionals.InvnAttrD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrE.IsSet() {
		localVarFormParams.Add("invn_attr_e", parameterToString(localVarOptionals.InvnAttrE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrF.IsSet() {
		localVarFormParams.Add("invn_attr_f", parameterToString(localVarOptionals.InvnAttrF.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InvnAttrG.IsSet() {
		localVarFormParams.Add("invn_attr_g", parameterToString(localVarOptionals.InvnAttrG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemAlternateCode.IsSet() {
		localVarFormParams.Add("item_alternate_code", parameterToString(localVarOptionals.ItemAlternateCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemBarcode.IsSet() {
		localVarFormParams.Add("item_barcode", parameterToString(localVarOptionals.ItemBarcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemCode.IsSet() {
		localVarFormParams.Add("item_code", parameterToString(localVarOptionals.ItemCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocnCapacityCheckFlg.IsSet() {
		localVarFormParams.Add("locn_capacity_check_flg", parameterToString(localVarOptionals.LocnCapacityCheckFlg.Value(), ""))
	}
	localVarFormParams.Add("reason_code", parameterToString(reasonCode, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Update Carrier LPN Label

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param label 
 * @param oblpnNbr 
 * @param optional nil or *DefaultApiUpdateCarrierLPNLabelOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  

@return interface{}
*/

type DefaultApiUpdateCarrierLPNLabelOpts struct { 
	CompanyCode optional.String
	FacilityCode optional.String
}

func (a *DefaultApiService) UpdateCarrierLPNLabel(ctx context.Context, label string, oblpnNbr string, localVarOptionals *DefaultApiUpdateCarrierLPNLabelOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/update_carrier_lpn_label/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	localVarFormParams.Add("label", parameterToString(label, ""))
	localVarFormParams.Add("oblpn_nbr", parameterToString(oblpnNbr, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Update OBLPN Dimensions

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param calcVolFlg 
 * @param companyCode 
 * @param facilityCode 
 * @param height 
 * @param length 
 * @param oblpnNbr 
 * @param width 
 * @param optional nil or *DefaultApiUpdateOBLPNDimensionsOpts - Optional Parameters:
     * @param "ShipOblpn" (optional.Bool) -  
     * @param "ShippingLocation" (optional.String) -  
     * @param "Volume" (optional.Float32) -  
     * @param "Weight" (optional.Float32) -  

@return interface{}
*/

type DefaultApiUpdateOBLPNDimensionsOpts struct { 
	ShipOblpn optional.Bool
	ShippingLocation optional.String
	Volume optional.Float32
	Weight optional.Float32
}

func (a *DefaultApiService) UpdateOBLPNDimensions(ctx context.Context, calcVolFlg bool, companyCode string, facilityCode string, height float32, length float32, oblpnNbr string, width float32, localVarOptionals *DefaultApiUpdateOBLPNDimensionsOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/update_oblpn_dims/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("calc_vol_flg", parameterToString(calcVolFlg, ""))
	localVarFormParams.Add("company_code", parameterToString(companyCode, ""))
	localVarFormParams.Add("facility_code", parameterToString(facilityCode, ""))
	localVarFormParams.Add("height", parameterToString(height, ""))
	localVarFormParams.Add("length", parameterToString(length, ""))
	localVarFormParams.Add("oblpn_nbr", parameterToString(oblpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.ShipOblpn.IsSet() {
		localVarFormParams.Add("ship_oblpn", parameterToString(localVarOptionals.ShipOblpn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShippingLocation.IsSet() {
		localVarFormParams.Add("shipping_location", parameterToString(localVarOptionals.ShippingLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Volume.IsSet() {
		localVarFormParams.Add("volume", parameterToString(localVarOptionals.Volume.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Weight.IsSet() {
		localVarFormParams.Add("weight", parameterToString(localVarOptionals.Weight.Value(), ""))
	}
	localVarFormParams.Add("width", parameterToString(width, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Update OBLPN Tracking Number

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyCode 
 * @param facilityCode 
 * @param oblpnNbr 
 * @param trackingNbr 
 * @param optional nil or *DefaultApiUpdateOBLPNTrackingNumberOpts - Optional Parameters:
     * @param "DryIceWeight" (optional.Float32) -  
     * @param "EstimatedDeliveryTime" (optional.String) -  
     * @param "MasterTrackingNbr" (optional.String) -  
     * @param "Rate" (optional.String) -  
     * @param "ShipViaCode" (optional.String) -  
     * @param "Weight" (optional.Float32) -  

@return interface{}
*/

type DefaultApiUpdateOBLPNTrackingNumberOpts struct { 
	DryIceWeight optional.Float32
	EstimatedDeliveryTime optional.String
	MasterTrackingNbr optional.String
	Rate optional.String
	ShipViaCode optional.String
	Weight optional.Float32
}

func (a *DefaultApiService) UpdateOBLPNTrackingNumber(ctx context.Context, companyCode string, facilityCode string, oblpnNbr string, trackingNbr string, localVarOptionals *DefaultApiUpdateOBLPNTrackingNumberOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/update_oblpn_tracing_nbr/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("company_code", parameterToString(companyCode, ""))
	if localVarOptionals != nil && localVarOptionals.DryIceWeight.IsSet() {
		localVarFormParams.Add("dry_ice_weight", parameterToString(localVarOptionals.DryIceWeight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EstimatedDeliveryTime.IsSet() {
		localVarFormParams.Add("estimated_delivery_time", parameterToString(localVarOptionals.EstimatedDeliveryTime.Value(), ""))
	}
	localVarFormParams.Add("facility_code", parameterToString(facilityCode, ""))
	if localVarOptionals != nil && localVarOptionals.MasterTrackingNbr.IsSet() {
		localVarFormParams.Add("master_tracking_nbr", parameterToString(localVarOptionals.MasterTrackingNbr.Value(), ""))
	}
	localVarFormParams.Add("oblpn_nbr", parameterToString(oblpnNbr, ""))
	if localVarOptionals != nil && localVarOptionals.Rate.IsSet() {
		localVarFormParams.Add("rate", parameterToString(localVarOptionals.Rate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipViaCode.IsSet() {
		localVarFormParams.Add("ship_via_code", parameterToString(localVarOptionals.ShipViaCode.Value(), ""))
	}
	localVarFormParams.Add("tracking_nbr", parameterToString(trackingNbr, ""))
	if localVarOptionals != nil && localVarOptionals.Weight.IsSet() {
		localVarFormParams.Add("weight", parameterToString(localVarOptionals.Weight.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
DefaultApiService Update Output Interface

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *DefaultApiUpdateOutputInterfaceOpts - Optional Parameters:
     * @param "CompanyCode" (optional.String) -  
     * @param "CustIntlCode" (optional.String) -  
     * @param "FacilityCode" (optional.String) -  
     * @param "Filename" (optional.String) -  
     * @param "InterfaceTypeCode" (optional.String) -  
     * @param "Message" (optional.String) -  
     * @param "RunOutputInterfaceFlg" (optional.Bool) -  
     * @param "StatusId" (optional.Int32) -  

@return interface{}
*/

type DefaultApiUpdateOutputInterfaceOpts struct { 
	CompanyCode optional.String
	CustIntlCode optional.String
	FacilityCode optional.String
	Filename optional.String
	InterfaceTypeCode optional.String
	Message optional.String
	RunOutputInterfaceFlg optional.Bool
	StatusId optional.Int32
}

func (a *DefaultApiService) UpdateOutputInterface(ctx context.Context, localVarOptionals *DefaultApiUpdateOutputInterfaceOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/update_output_interface/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.CompanyCode.IsSet() {
		localVarFormParams.Add("company_code", parameterToString(localVarOptionals.CompanyCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustIntlCode.IsSet() {
		localVarFormParams.Add("cust_intl_code", parameterToString(localVarOptionals.CustIntlCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityCode.IsSet() {
		localVarFormParams.Add("facility_code", parameterToString(localVarOptionals.FacilityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filename.IsSet() {
		localVarFormParams.Add("filename", parameterToString(localVarOptionals.Filename.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InterfaceTypeCode.IsSet() {
		localVarFormParams.Add("interface_type_code", parameterToString(localVarOptionals.InterfaceTypeCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Message.IsSet() {
		localVarFormParams.Add("message", parameterToString(localVarOptionals.Message.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RunOutputInterfaceFlg.IsSet() {
		localVarFormParams.Add("run_output_interface_flg", parameterToString(localVarOptionals.RunOutputInterfaceFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StatusId.IsSet() {
		localVarFormParams.Add("status_id", parameterToString(localVarOptionals.StatusId.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
        return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
