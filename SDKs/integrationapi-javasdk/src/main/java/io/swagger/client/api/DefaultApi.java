/*
 * Integration API
 * This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assignOBLPNtoLoad
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param carrierCode  (optional)
     * @param companyCode  (optional)
     * @param delimiter  (optional)
     * @param facilityCode  (optional)
     * @param reassignLoadFlg  (optional)
     * @param requireSpecificOblpnStatus  (optional)
     * @param trailerNbr  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignOBLPNtoLoadCall(String loadNbr, String oblpnNbr, String carrierCode, String companyCode, String delimiter, String facilityCode, Boolean reassignLoadFlg, Integer requireSpecificOblpnStatus, String trailerNbr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assign_oblpn_to_load/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (carrierCode != null)
        localVarFormParams.put("carrier_code", carrierCode);
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (delimiter != null)
        localVarFormParams.put("delimiter", delimiter);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (loadNbr != null)
        localVarFormParams.put("load_nbr", loadNbr);
        if (oblpnNbr != null)
        localVarFormParams.put("oblpn_nbr", oblpnNbr);
        if (reassignLoadFlg != null)
        localVarFormParams.put("reassign_load_flg", reassignLoadFlg);
        if (requireSpecificOblpnStatus != null)
        localVarFormParams.put("require_specific_oblpn_status", requireSpecificOblpnStatus);
        if (trailerNbr != null)
        localVarFormParams.put("trailer_nbr", trailerNbr);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignOBLPNtoLoadValidateBeforeCall(String loadNbr, String oblpnNbr, String carrierCode, String companyCode, String delimiter, String facilityCode, Boolean reassignLoadFlg, Integer requireSpecificOblpnStatus, String trailerNbr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loadNbr' is set
        if (loadNbr == null) {
            throw new ApiException("Missing the required parameter 'loadNbr' when calling assignOBLPNtoLoad(Async)");
        }
        
        // verify the required parameter 'oblpnNbr' is set
        if (oblpnNbr == null) {
            throw new ApiException("Missing the required parameter 'oblpnNbr' when calling assignOBLPNtoLoad(Async)");
        }
        

        com.squareup.okhttp.Call call = assignOBLPNtoLoadCall(loadNbr, oblpnNbr, carrierCode, companyCode, delimiter, facilityCode, reassignLoadFlg, requireSpecificOblpnStatus, trailerNbr, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign OBLPN to Load
     * 
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param carrierCode  (optional)
     * @param companyCode  (optional)
     * @param delimiter  (optional)
     * @param facilityCode  (optional)
     * @param reassignLoadFlg  (optional)
     * @param requireSpecificOblpnStatus  (optional)
     * @param trailerNbr  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object assignOBLPNtoLoad(String loadNbr, String oblpnNbr, String carrierCode, String companyCode, String delimiter, String facilityCode, Boolean reassignLoadFlg, Integer requireSpecificOblpnStatus, String trailerNbr) throws ApiException {
        ApiResponse<Object> resp = assignOBLPNtoLoadWithHttpInfo(loadNbr, oblpnNbr, carrierCode, companyCode, delimiter, facilityCode, reassignLoadFlg, requireSpecificOblpnStatus, trailerNbr);
        return resp.getData();
    }

    /**
     * Assign OBLPN to Load
     * 
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param carrierCode  (optional)
     * @param companyCode  (optional)
     * @param delimiter  (optional)
     * @param facilityCode  (optional)
     * @param reassignLoadFlg  (optional)
     * @param requireSpecificOblpnStatus  (optional)
     * @param trailerNbr  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> assignOBLPNtoLoadWithHttpInfo(String loadNbr, String oblpnNbr, String carrierCode, String companyCode, String delimiter, String facilityCode, Boolean reassignLoadFlg, Integer requireSpecificOblpnStatus, String trailerNbr) throws ApiException {
        com.squareup.okhttp.Call call = assignOBLPNtoLoadValidateBeforeCall(loadNbr, oblpnNbr, carrierCode, companyCode, delimiter, facilityCode, reassignLoadFlg, requireSpecificOblpnStatus, trailerNbr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign OBLPN to Load (asynchronously)
     * 
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param carrierCode  (optional)
     * @param companyCode  (optional)
     * @param delimiter  (optional)
     * @param facilityCode  (optional)
     * @param reassignLoadFlg  (optional)
     * @param requireSpecificOblpnStatus  (optional)
     * @param trailerNbr  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignOBLPNtoLoadAsync(String loadNbr, String oblpnNbr, String carrierCode, String companyCode, String delimiter, String facilityCode, Boolean reassignLoadFlg, Integer requireSpecificOblpnStatus, String trailerNbr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignOBLPNtoLoadValidateBeforeCall(loadNbr, oblpnNbr, carrierCode, companyCode, delimiter, facilityCode, reassignLoadFlg, requireSpecificOblpnStatus, trailerNbr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignandLoadLPN
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param dockDoorNbr  (optional)
     * @param facilityCode  (optional)
     * @param oblpnWeight  (optional)
     * @param palletNbr  (optional)
     * @param trailerNbr  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignandLoadLPNCall(String loadNbr, String oblpnNbr, String companyCode, String dockDoorNbr, String facilityCode, BigDecimal oblpnWeight, String palletNbr, String trailerNbr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assign_and_load_oblpn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (dockDoorNbr != null)
        localVarFormParams.put("dock_door_nbr", dockDoorNbr);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (loadNbr != null)
        localVarFormParams.put("load_nbr", loadNbr);
        if (oblpnNbr != null)
        localVarFormParams.put("oblpn_nbr", oblpnNbr);
        if (oblpnWeight != null)
        localVarFormParams.put("oblpn_weight", oblpnWeight);
        if (palletNbr != null)
        localVarFormParams.put("pallet_nbr", palletNbr);
        if (trailerNbr != null)
        localVarFormParams.put("trailer_nbr", trailerNbr);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignandLoadLPNValidateBeforeCall(String loadNbr, String oblpnNbr, String companyCode, String dockDoorNbr, String facilityCode, BigDecimal oblpnWeight, String palletNbr, String trailerNbr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loadNbr' is set
        if (loadNbr == null) {
            throw new ApiException("Missing the required parameter 'loadNbr' when calling assignandLoadLPN(Async)");
        }
        
        // verify the required parameter 'oblpnNbr' is set
        if (oblpnNbr == null) {
            throw new ApiException("Missing the required parameter 'oblpnNbr' when calling assignandLoadLPN(Async)");
        }
        

        com.squareup.okhttp.Call call = assignandLoadLPNCall(loadNbr, oblpnNbr, companyCode, dockDoorNbr, facilityCode, oblpnWeight, palletNbr, trailerNbr, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign and Load LPN
     * 
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param dockDoorNbr  (optional)
     * @param facilityCode  (optional)
     * @param oblpnWeight  (optional)
     * @param palletNbr  (optional)
     * @param trailerNbr  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object assignandLoadLPN(String loadNbr, String oblpnNbr, String companyCode, String dockDoorNbr, String facilityCode, BigDecimal oblpnWeight, String palletNbr, String trailerNbr) throws ApiException {
        ApiResponse<Object> resp = assignandLoadLPNWithHttpInfo(loadNbr, oblpnNbr, companyCode, dockDoorNbr, facilityCode, oblpnWeight, palletNbr, trailerNbr);
        return resp.getData();
    }

    /**
     * Assign and Load LPN
     * 
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param dockDoorNbr  (optional)
     * @param facilityCode  (optional)
     * @param oblpnWeight  (optional)
     * @param palletNbr  (optional)
     * @param trailerNbr  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> assignandLoadLPNWithHttpInfo(String loadNbr, String oblpnNbr, String companyCode, String dockDoorNbr, String facilityCode, BigDecimal oblpnWeight, String palletNbr, String trailerNbr) throws ApiException {
        com.squareup.okhttp.Call call = assignandLoadLPNValidateBeforeCall(loadNbr, oblpnNbr, companyCode, dockDoorNbr, facilityCode, oblpnWeight, palletNbr, trailerNbr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign and Load LPN (asynchronously)
     * 
     * @param loadNbr  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param dockDoorNbr  (optional)
     * @param facilityCode  (optional)
     * @param oblpnWeight  (optional)
     * @param palletNbr  (optional)
     * @param trailerNbr  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignandLoadLPNAsync(String loadNbr, String oblpnNbr, String companyCode, String dockDoorNbr, String facilityCode, BigDecimal oblpnWeight, String palletNbr, String trailerNbr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignandLoadLPNValidateBeforeCall(loadNbr, oblpnNbr, companyCode, dockDoorNbr, facilityCode, oblpnWeight, palletNbr, trailerNbr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLPN
     * @param lpnNbr  (required)
     * @param qty  (required)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param destFacilityCode  (optional)
     * @param dropLocnBarcode  (optional)
     * @param expiryDate  (optional)
     * @param facilityCode  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param lockCode  (optional)
     * @param lpnWeight  (optional)
     * @param orderType  (optional)
     * @param xdockLpnFlg  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLPNCall(String lpnNbr, Integer qty, String batchNumber, String companyCode, String destFacilityCode, String dropLocnBarcode, String expiryDate, String facilityCode, String itemAlternateCode, String itemBarcode, String lockCode, BigDecimal lpnWeight, String orderType, Boolean xdockLpnFlg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/create_lpn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (batchNumber != null)
        localVarFormParams.put("batch_number", batchNumber);
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (destFacilityCode != null)
        localVarFormParams.put("dest_facility_code", destFacilityCode);
        if (dropLocnBarcode != null)
        localVarFormParams.put("drop_locn_barcode", dropLocnBarcode);
        if (expiryDate != null)
        localVarFormParams.put("expiry_date", expiryDate);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (itemAlternateCode != null)
        localVarFormParams.put("item_alternate_code", itemAlternateCode);
        if (itemBarcode != null)
        localVarFormParams.put("item_barcode", itemBarcode);
        if (lockCode != null)
        localVarFormParams.put("lock_code", lockCode);
        if (lpnNbr != null)
        localVarFormParams.put("lpn_nbr", lpnNbr);
        if (lpnWeight != null)
        localVarFormParams.put("lpn_weight", lpnWeight);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (xdockLpnFlg != null)
        localVarFormParams.put("xdock_lpn_flg", xdockLpnFlg);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLPNValidateBeforeCall(String lpnNbr, Integer qty, String batchNumber, String companyCode, String destFacilityCode, String dropLocnBarcode, String expiryDate, String facilityCode, String itemAlternateCode, String itemBarcode, String lockCode, BigDecimal lpnWeight, String orderType, Boolean xdockLpnFlg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lpnNbr' is set
        if (lpnNbr == null) {
            throw new ApiException("Missing the required parameter 'lpnNbr' when calling createLPN(Async)");
        }
        
        // verify the required parameter 'qty' is set
        if (qty == null) {
            throw new ApiException("Missing the required parameter 'qty' when calling createLPN(Async)");
        }
        

        com.squareup.okhttp.Call call = createLPNCall(lpnNbr, qty, batchNumber, companyCode, destFacilityCode, dropLocnBarcode, expiryDate, facilityCode, itemAlternateCode, itemBarcode, lockCode, lpnWeight, orderType, xdockLpnFlg, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create LPN
     * 
     * @param lpnNbr  (required)
     * @param qty  (required)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param destFacilityCode  (optional)
     * @param dropLocnBarcode  (optional)
     * @param expiryDate  (optional)
     * @param facilityCode  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param lockCode  (optional)
     * @param lpnWeight  (optional)
     * @param orderType  (optional)
     * @param xdockLpnFlg  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createLPN(String lpnNbr, Integer qty, String batchNumber, String companyCode, String destFacilityCode, String dropLocnBarcode, String expiryDate, String facilityCode, String itemAlternateCode, String itemBarcode, String lockCode, BigDecimal lpnWeight, String orderType, Boolean xdockLpnFlg) throws ApiException {
        ApiResponse<Object> resp = createLPNWithHttpInfo(lpnNbr, qty, batchNumber, companyCode, destFacilityCode, dropLocnBarcode, expiryDate, facilityCode, itemAlternateCode, itemBarcode, lockCode, lpnWeight, orderType, xdockLpnFlg);
        return resp.getData();
    }

    /**
     * Create LPN
     * 
     * @param lpnNbr  (required)
     * @param qty  (required)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param destFacilityCode  (optional)
     * @param dropLocnBarcode  (optional)
     * @param expiryDate  (optional)
     * @param facilityCode  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param lockCode  (optional)
     * @param lpnWeight  (optional)
     * @param orderType  (optional)
     * @param xdockLpnFlg  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createLPNWithHttpInfo(String lpnNbr, Integer qty, String batchNumber, String companyCode, String destFacilityCode, String dropLocnBarcode, String expiryDate, String facilityCode, String itemAlternateCode, String itemBarcode, String lockCode, BigDecimal lpnWeight, String orderType, Boolean xdockLpnFlg) throws ApiException {
        com.squareup.okhttp.Call call = createLPNValidateBeforeCall(lpnNbr, qty, batchNumber, companyCode, destFacilityCode, dropLocnBarcode, expiryDate, facilityCode, itemAlternateCode, itemBarcode, lockCode, lpnWeight, orderType, xdockLpnFlg, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create LPN (asynchronously)
     * 
     * @param lpnNbr  (required)
     * @param qty  (required)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param destFacilityCode  (optional)
     * @param dropLocnBarcode  (optional)
     * @param expiryDate  (optional)
     * @param facilityCode  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param lockCode  (optional)
     * @param lpnWeight  (optional)
     * @param orderType  (optional)
     * @param xdockLpnFlg  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLPNAsync(String lpnNbr, Integer qty, String batchNumber, String companyCode, String destFacilityCode, String dropLocnBarcode, String expiryDate, String facilityCode, String itemAlternateCode, String itemBarcode, String lockCode, BigDecimal lpnWeight, String orderType, Boolean xdockLpnFlg, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLPNValidateBeforeCall(lpnNbr, qty, batchNumber, companyCode, destFacilityCode, dropLocnBarcode, expiryDate, facilityCode, itemAlternateCode, itemBarcode, lockCode, lpnWeight, orderType, xdockLpnFlg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for divertConfirm
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call divertConfirmCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/divert_confirm/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (flatData != null)
        localVarFormParams.put("flat_data", flatData);
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call divertConfirmValidateBeforeCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = divertConfirmCall(flatData, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Divert Confirm
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object divertConfirm(String flatData, String xmlData) throws ApiException {
        ApiResponse<Object> resp = divertConfirmWithHttpInfo(flatData, xmlData);
        return resp.getData();
    }

    /**
     * Divert Confirm
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> divertConfirmWithHttpInfo(String flatData, String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = divertConfirmValidateBeforeCall(flatData, xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Divert Confirm (asynchronously)
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call divertConfirmAsync(String flatData, String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = divertConfirmValidateBeforeCall(flatData, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entityUpdate
     * @param entityName  (required)
     * @param key  (required)
     * @param sequenceNumber  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityUpdateCall(String entityName, String key, String sequenceNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/{entity_name}/{key}/{sequence_number}/"
            .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "sequence_number" + "\\}", apiClient.escapeString(sequenceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityUpdateValidateBeforeCall(String entityName, String key, String sequenceNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling entityUpdate(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling entityUpdate(Async)");
        }
        
        // verify the required parameter 'sequenceNumber' is set
        if (sequenceNumber == null) {
            throw new ApiException("Missing the required parameter 'sequenceNumber' when calling entityUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = entityUpdateCall(entityName, key, sequenceNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Entity Update
     * 
     * @param entityName  (required)
     * @param key  (required)
     * @param sequenceNumber  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object entityUpdate(String entityName, String key, String sequenceNumber) throws ApiException {
        ApiResponse<Object> resp = entityUpdateWithHttpInfo(entityName, key, sequenceNumber);
        return resp.getData();
    }

    /**
     * Entity Update
     * 
     * @param entityName  (required)
     * @param key  (required)
     * @param sequenceNumber  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> entityUpdateWithHttpInfo(String entityName, String key, String sequenceNumber) throws ApiException {
        com.squareup.okhttp.Call call = entityUpdateValidateBeforeCall(entityName, key, sequenceNumber, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Entity Update (asynchronously)
     * 
     * @param entityName  (required)
     * @param key  (required)
     * @param sequenceNumber  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityUpdateAsync(String entityName, String key, String sequenceNumber, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityUpdateValidateBeforeCall(entityName, key, sequenceNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for extendedProperty
     * @param entityName  (required)
     * @param extendedProperty  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call extendedPropertyCall(String entityName, String extendedProperty, String key, String companyCode, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended_property/{entity_name}/{key}/{extended_property}/"
            .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()))
            .replaceAll("\\{" + "extended_property" + "\\}", apiClient.escapeString(extendedProperty.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_code", companyCode));
        if (facilityCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_code", facilityCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call extendedPropertyValidateBeforeCall(String entityName, String extendedProperty, String key, String companyCode, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling extendedProperty(Async)");
        }
        
        // verify the required parameter 'extendedProperty' is set
        if (extendedProperty == null) {
            throw new ApiException("Missing the required parameter 'extendedProperty' when calling extendedProperty(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling extendedProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = extendedPropertyCall(entityName, extendedProperty, key, companyCode, facilityCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extended Property
     * 
     * @param entityName  (required)
     * @param extendedProperty  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object extendedProperty(String entityName, String extendedProperty, String key, String companyCode, String facilityCode) throws ApiException {
        ApiResponse<Object> resp = extendedPropertyWithHttpInfo(entityName, extendedProperty, key, companyCode, facilityCode);
        return resp.getData();
    }

    /**
     * Extended Property
     * 
     * @param entityName  (required)
     * @param extendedProperty  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> extendedPropertyWithHttpInfo(String entityName, String extendedProperty, String key, String companyCode, String facilityCode) throws ApiException {
        com.squareup.okhttp.Call call = extendedPropertyValidateBeforeCall(entityName, extendedProperty, key, companyCode, facilityCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extended Property (asynchronously)
     * 
     * @param entityName  (required)
     * @param extendedProperty  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call extendedPropertyAsync(String entityName, String extendedProperty, String key, String companyCode, String facilityCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = extendedPropertyValidateBeforeCall(entityName, extendedProperty, key, companyCode, facilityCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fromMHEDistributionPack
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fromMHEDistributionPackCall(String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/from_mhe_distribution_pack/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fromMHEDistributionPackValidateBeforeCall(String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fromMHEDistributionPackCall(xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * From MHE Distribution Pack
     * 
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object fromMHEDistributionPack(String xmlData) throws ApiException {
        ApiResponse<Object> resp = fromMHEDistributionPackWithHttpInfo(xmlData);
        return resp.getData();
    }

    /**
     * From MHE Distribution Pack
     * 
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> fromMHEDistributionPackWithHttpInfo(String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = fromMHEDistributionPackValidateBeforeCall(xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * From MHE Distribution Pack (asynchronously)
     * 
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fromMHEDistributionPackAsync(String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fromMHEDistributionPackValidateBeforeCall(xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fromMHEDistributionShort
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fromMHEDistributionShortCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/from_mhe_distribution_short/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (flatData != null)
        localVarFormParams.put("flat_data", flatData);
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fromMHEDistributionShortValidateBeforeCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fromMHEDistributionShortCall(flatData, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * From MHE Distribution Short
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object fromMHEDistributionShort(String flatData, String xmlData) throws ApiException {
        ApiResponse<Object> resp = fromMHEDistributionShortWithHttpInfo(flatData, xmlData);
        return resp.getData();
    }

    /**
     * From MHE Distribution Short
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> fromMHEDistributionShortWithHttpInfo(String flatData, String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = fromMHEDistributionShortValidateBeforeCall(flatData, xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * From MHE Distribution Short (asynchronously)
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fromMHEDistributionShortAsync(String flatData, String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fromMHEDistributionShortValidateBeforeCall(flatData, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNextNumbers
     * @param counterCode  (required)
     * @param companyCode  (optional)
     * @param count  (optional)
     * @param facilityCode  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNextNumbersCall(String counterCode, String companyCode, Integer count, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get_next_numbers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (counterCode != null)
        localVarFormParams.put("counter_code", counterCode);
        if (count != null)
        localVarFormParams.put("count", count);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNextNumbersValidateBeforeCall(String counterCode, String companyCode, Integer count, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'counterCode' is set
        if (counterCode == null) {
            throw new ApiException("Missing the required parameter 'counterCode' when calling getNextNumbers(Async)");
        }
        

        com.squareup.okhttp.Call call = getNextNumbersCall(counterCode, companyCode, count, facilityCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Next Numbers
     * 
     * @param counterCode  (required)
     * @param companyCode  (optional)
     * @param count  (optional)
     * @param facilityCode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getNextNumbers(String counterCode, String companyCode, Integer count, String facilityCode) throws ApiException {
        ApiResponse<Object> resp = getNextNumbersWithHttpInfo(counterCode, companyCode, count, facilityCode);
        return resp.getData();
    }

    /**
     * Get Next Numbers
     * 
     * @param counterCode  (required)
     * @param companyCode  (optional)
     * @param count  (optional)
     * @param facilityCode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getNextNumbersWithHttpInfo(String counterCode, String companyCode, Integer count, String facilityCode) throws ApiException {
        com.squareup.okhttp.Call call = getNextNumbersValidateBeforeCall(counterCode, companyCode, count, facilityCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Next Numbers (asynchronously)
     * 
     * @param counterCode  (required)
     * @param companyCode  (optional)
     * @param count  (optional)
     * @param facilityCode  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNextNumbersAsync(String counterCode, String companyCode, Integer count, String facilityCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNextNumbersValidateBeforeCall(counterCode, companyCode, count, facilityCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatus
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatusCall(String entity, String key, String companyCode, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get_status/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (entity != null)
        localVarFormParams.put("entity", entity);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (key != null)
        localVarFormParams.put("key", key);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatusValidateBeforeCall(String entity, String key, String companyCode, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling getStatus(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatusCall(entity, key, companyCode, facilityCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Status
     * 
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getStatus(String entity, String key, String companyCode, String facilityCode) throws ApiException {
        ApiResponse<Object> resp = getStatusWithHttpInfo(entity, key, companyCode, facilityCode);
        return resp.getData();
    }

    /**
     * Get Status
     * 
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getStatusWithHttpInfo(String entity, String key, String companyCode, String facilityCode) throws ApiException {
        com.squareup.okhttp.Call call = getStatusValidateBeforeCall(entity, key, companyCode, facilityCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Status (asynchronously)
     * 
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatusAsync(String entity, String key, String companyCode, String facilityCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatusValidateBeforeCall(entity, key, companyCode, facilityCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for inductLPN
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call inductLPNCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/induct_lpn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (flatData != null)
        localVarFormParams.put("flat_data", flatData);
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call inductLPNValidateBeforeCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = inductLPNCall(flatData, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Induct LPN
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object inductLPN(String flatData, String xmlData) throws ApiException {
        ApiResponse<Object> resp = inductLPNWithHttpInfo(flatData, xmlData);
        return resp.getData();
    }

    /**
     * Induct LPN
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> inductLPNWithHttpInfo(String flatData, String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = inductLPNValidateBeforeCall(flatData, xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Induct LPN (asynchronously)
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call inductLPNAsync(String flatData, String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = inductLPNValidateBeforeCall(flatData, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for initStageInterface
     * @param async  (optional)
     * @param entity  (optional)
     * @param flatData  (optional)
     * @param validateXml  (optional)
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call initStageInterfaceCall(Boolean async, String entity, String flatData, Boolean validateXml, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/init_stage_interface/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (async != null)
        localVarFormParams.put("async", async);
        if (entity != null)
        localVarFormParams.put("entity", entity);
        if (flatData != null)
        localVarFormParams.put("flat_data", flatData);
        if (validateXml != null)
        localVarFormParams.put("validate_xml", validateXml);
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initStageInterfaceValidateBeforeCall(Boolean async, String entity, String flatData, Boolean validateXml, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = initStageInterfaceCall(async, entity, flatData, validateXml, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Init Stage Interface
     * 
     * @param async  (optional)
     * @param entity  (optional)
     * @param flatData  (optional)
     * @param validateXml  (optional)
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object initStageInterface(Boolean async, String entity, String flatData, Boolean validateXml, String xmlData) throws ApiException {
        ApiResponse<Object> resp = initStageInterfaceWithHttpInfo(async, entity, flatData, validateXml, xmlData);
        return resp.getData();
    }

    /**
     * Init Stage Interface
     * 
     * @param async  (optional)
     * @param entity  (optional)
     * @param flatData  (optional)
     * @param validateXml  (optional)
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> initStageInterfaceWithHttpInfo(Boolean async, String entity, String flatData, Boolean validateXml, String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = initStageInterfaceValidateBeforeCall(async, entity, flatData, validateXml, xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Init Stage Interface (asynchronously)
     * 
     * @param async  (optional)
     * @param entity  (optional)
     * @param flatData  (optional)
     * @param validateXml  (optional)
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initStageInterfaceAsync(Boolean async, String entity, String flatData, Boolean validateXml, String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initStageInterfaceValidateBeforeCall(async, entity, flatData, validateXml, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lockUnlockLPN
     * @param action  (optional)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param lockCode  (optional)
     * @param lpnNbr  (optional)
     * @param removeLockFromShipmentDtlFlg  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lockUnlockLPNCall(String action, String companyCode, String facilityCode, String lockCode, String lpnNbr, Boolean removeLockFromShipmentDtlFlg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lock_unlock_lpn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (action != null)
        localVarFormParams.put("action", action);
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (lockCode != null)
        localVarFormParams.put("lock_code", lockCode);
        if (lpnNbr != null)
        localVarFormParams.put("lpn_nbr", lpnNbr);
        if (removeLockFromShipmentDtlFlg != null)
        localVarFormParams.put("remove_lock_from_shipment_dtl_flg", removeLockFromShipmentDtlFlg);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lockUnlockLPNValidateBeforeCall(String action, String companyCode, String facilityCode, String lockCode, String lpnNbr, Boolean removeLockFromShipmentDtlFlg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = lockUnlockLPNCall(action, companyCode, facilityCode, lockCode, lpnNbr, removeLockFromShipmentDtlFlg, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lock/Unlock LPN
     * 
     * @param action  (optional)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param lockCode  (optional)
     * @param lpnNbr  (optional)
     * @param removeLockFromShipmentDtlFlg  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object lockUnlockLPN(String action, String companyCode, String facilityCode, String lockCode, String lpnNbr, Boolean removeLockFromShipmentDtlFlg) throws ApiException {
        ApiResponse<Object> resp = lockUnlockLPNWithHttpInfo(action, companyCode, facilityCode, lockCode, lpnNbr, removeLockFromShipmentDtlFlg);
        return resp.getData();
    }

    /**
     * Lock/Unlock LPN
     * 
     * @param action  (optional)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param lockCode  (optional)
     * @param lpnNbr  (optional)
     * @param removeLockFromShipmentDtlFlg  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> lockUnlockLPNWithHttpInfo(String action, String companyCode, String facilityCode, String lockCode, String lpnNbr, Boolean removeLockFromShipmentDtlFlg) throws ApiException {
        com.squareup.okhttp.Call call = lockUnlockLPNValidateBeforeCall(action, companyCode, facilityCode, lockCode, lpnNbr, removeLockFromShipmentDtlFlg, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lock/Unlock LPN (asynchronously)
     * 
     * @param action  (optional)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param lockCode  (optional)
     * @param lpnNbr  (optional)
     * @param removeLockFromShipmentDtlFlg  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lockUnlockLPNAsync(String action, String companyCode, String facilityCode, String lockCode, String lpnNbr, Boolean removeLockFromShipmentDtlFlg, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lockUnlockLPNValidateBeforeCall(action, companyCode, facilityCode, lockCode, lpnNbr, removeLockFromShipmentDtlFlg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for objectInquiry
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param minimize  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call objectInquiryCall(String entity, String key, String companyCode, String facilityCode, String minimize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/{entity}/{key}/"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_code", companyCode));
        if (facilityCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_code", facilityCode));
        if (minimize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimize", minimize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call objectInquiryValidateBeforeCall(String entity, String key, String companyCode, String facilityCode, String minimize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling objectInquiry(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling objectInquiry(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling objectInquiry(Async)");
        }
        
        // verify the required parameter 'facilityCode' is set
        if (facilityCode == null) {
            throw new ApiException("Missing the required parameter 'facilityCode' when calling objectInquiry(Async)");
        }
        

        com.squareup.okhttp.Call call = objectInquiryCall(entity, key, companyCode, facilityCode, minimize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Object Inquiry
     * 
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param minimize  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object objectInquiry(String entity, String key, String companyCode, String facilityCode, String minimize) throws ApiException {
        ApiResponse<Object> resp = objectInquiryWithHttpInfo(entity, key, companyCode, facilityCode, minimize);
        return resp.getData();
    }

    /**
     * Object Inquiry
     * 
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param minimize  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> objectInquiryWithHttpInfo(String entity, String key, String companyCode, String facilityCode, String minimize) throws ApiException {
        com.squareup.okhttp.Call call = objectInquiryValidateBeforeCall(entity, key, companyCode, facilityCode, minimize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Object Inquiry (asynchronously)
     * 
     * @param entity  (required)
     * @param key  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param minimize  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectInquiryAsync(String entity, String key, String companyCode, String facilityCode, String minimize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectInquiryValidateBeforeCall(entity, key, companyCode, facilityCode, minimize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pickConfirm
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pickConfirmCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pick_confirm/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (flatData != null)
        localVarFormParams.put("flat_data", flatData);
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pickConfirmValidateBeforeCall(String flatData, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = pickConfirmCall(flatData, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Pick Confirm
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object pickConfirm(String flatData, String xmlData) throws ApiException {
        ApiResponse<Object> resp = pickConfirmWithHttpInfo(flatData, xmlData);
        return resp.getData();
    }

    /**
     * Pick Confirm
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> pickConfirmWithHttpInfo(String flatData, String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = pickConfirmValidateBeforeCall(flatData, xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pick Confirm (asynchronously)
     * 
     * @param flatData  (optional)
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pickConfirmAsync(String flatData, String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pickConfirmValidateBeforeCall(flatData, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for receiveLPN
     * @param lpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param rcvdTrailerNbr  (optional)
     * @param receivedTs  (optional)
     * @param receivingLocation  (optional)
     * @param xdockLpnFlg  (optional)
     * @param xmlData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call receiveLPNCall(String lpnNbr, String companyCode, String facilityCode, String rcvdTrailerNbr, String receivedTs, String receivingLocation, Boolean xdockLpnFlg, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receive_lpn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (lpnNbr != null)
        localVarFormParams.put("lpn_nbr", lpnNbr);
        if (rcvdTrailerNbr != null)
        localVarFormParams.put("rcvd_trailer_nbr", rcvdTrailerNbr);
        if (receivedTs != null)
        localVarFormParams.put("received_ts", receivedTs);
        if (receivingLocation != null)
        localVarFormParams.put("receiving_location", receivingLocation);
        if (xdockLpnFlg != null)
        localVarFormParams.put("xdock_lpn_flg", xdockLpnFlg);
        if (xmlData != null)
        localVarFormParams.put("xml_data", xmlData);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call receiveLPNValidateBeforeCall(String lpnNbr, String companyCode, String facilityCode, String rcvdTrailerNbr, String receivedTs, String receivingLocation, Boolean xdockLpnFlg, String xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lpnNbr' is set
        if (lpnNbr == null) {
            throw new ApiException("Missing the required parameter 'lpnNbr' when calling receiveLPN(Async)");
        }
        

        com.squareup.okhttp.Call call = receiveLPNCall(lpnNbr, companyCode, facilityCode, rcvdTrailerNbr, receivedTs, receivingLocation, xdockLpnFlg, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Receive LPN
     * 
     * @param lpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param rcvdTrailerNbr  (optional)
     * @param receivedTs  (optional)
     * @param receivingLocation  (optional)
     * @param xdockLpnFlg  (optional)
     * @param xmlData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object receiveLPN(String lpnNbr, String companyCode, String facilityCode, String rcvdTrailerNbr, String receivedTs, String receivingLocation, Boolean xdockLpnFlg, String xmlData) throws ApiException {
        ApiResponse<Object> resp = receiveLPNWithHttpInfo(lpnNbr, companyCode, facilityCode, rcvdTrailerNbr, receivedTs, receivingLocation, xdockLpnFlg, xmlData);
        return resp.getData();
    }

    /**
     * Receive LPN
     * 
     * @param lpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param rcvdTrailerNbr  (optional)
     * @param receivedTs  (optional)
     * @param receivingLocation  (optional)
     * @param xdockLpnFlg  (optional)
     * @param xmlData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> receiveLPNWithHttpInfo(String lpnNbr, String companyCode, String facilityCode, String rcvdTrailerNbr, String receivedTs, String receivingLocation, Boolean xdockLpnFlg, String xmlData) throws ApiException {
        com.squareup.okhttp.Call call = receiveLPNValidateBeforeCall(lpnNbr, companyCode, facilityCode, rcvdTrailerNbr, receivedTs, receivingLocation, xdockLpnFlg, xmlData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Receive LPN (asynchronously)
     * 
     * @param lpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param rcvdTrailerNbr  (optional)
     * @param receivedTs  (optional)
     * @param receivingLocation  (optional)
     * @param xdockLpnFlg  (optional)
     * @param xmlData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call receiveLPNAsync(String lpnNbr, String companyCode, String facilityCode, String rcvdTrailerNbr, String receivedTs, String receivingLocation, Boolean xdockLpnFlg, String xmlData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = receiveLPNValidateBeforeCall(lpnNbr, companyCode, facilityCode, rcvdTrailerNbr, receivedTs, receivingLocation, xdockLpnFlg, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runMHEStageInterface
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param mheVendorCode  (required)
     * @param pythonFunction  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runMHEStageInterfaceCall(String companyCode, String entity, String facilityCode, String mheVendorCode, String pythonFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/run_mhe_stage_interface/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (entity != null)
        localVarFormParams.put("entity", entity);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (mheVendorCode != null)
        localVarFormParams.put("mhe_vendor_code", mheVendorCode);
        if (pythonFunction != null)
        localVarFormParams.put("python_function", pythonFunction);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runMHEStageInterfaceValidateBeforeCall(String companyCode, String entity, String facilityCode, String mheVendorCode, String pythonFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling runMHEStageInterface(Async)");
        }
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling runMHEStageInterface(Async)");
        }
        
        // verify the required parameter 'facilityCode' is set
        if (facilityCode == null) {
            throw new ApiException("Missing the required parameter 'facilityCode' when calling runMHEStageInterface(Async)");
        }
        
        // verify the required parameter 'mheVendorCode' is set
        if (mheVendorCode == null) {
            throw new ApiException("Missing the required parameter 'mheVendorCode' when calling runMHEStageInterface(Async)");
        }
        

        com.squareup.okhttp.Call call = runMHEStageInterfaceCall(companyCode, entity, facilityCode, mheVendorCode, pythonFunction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run MHE Stage Interface
     * 
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param mheVendorCode  (required)
     * @param pythonFunction  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runMHEStageInterface(String companyCode, String entity, String facilityCode, String mheVendorCode, String pythonFunction) throws ApiException {
        ApiResponse<Object> resp = runMHEStageInterfaceWithHttpInfo(companyCode, entity, facilityCode, mheVendorCode, pythonFunction);
        return resp.getData();
    }

    /**
     * Run MHE Stage Interface
     * 
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param mheVendorCode  (required)
     * @param pythonFunction  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runMHEStageInterfaceWithHttpInfo(String companyCode, String entity, String facilityCode, String mheVendorCode, String pythonFunction) throws ApiException {
        com.squareup.okhttp.Call call = runMHEStageInterfaceValidateBeforeCall(companyCode, entity, facilityCode, mheVendorCode, pythonFunction, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run MHE Stage Interface (asynchronously)
     * 
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param mheVendorCode  (required)
     * @param pythonFunction  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runMHEStageInterfaceAsync(String companyCode, String entity, String facilityCode, String mheVendorCode, String pythonFunction, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runMHEStageInterfaceValidateBeforeCall(companyCode, entity, facilityCode, mheVendorCode, pythonFunction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runStageInterface
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param fileGroupNbr  (required)
     * @param async  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runStageInterfaceCall(String companyCode, String entity, String facilityCode, String fileGroupNbr, Boolean async, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/run_stage_interface/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (async != null)
        localVarFormParams.put("async", async);
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (entity != null)
        localVarFormParams.put("entity", entity);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (fileGroupNbr != null)
        localVarFormParams.put("file_group_nbr", fileGroupNbr);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runStageInterfaceValidateBeforeCall(String companyCode, String entity, String facilityCode, String fileGroupNbr, Boolean async, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling runStageInterface(Async)");
        }
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling runStageInterface(Async)");
        }
        
        // verify the required parameter 'facilityCode' is set
        if (facilityCode == null) {
            throw new ApiException("Missing the required parameter 'facilityCode' when calling runStageInterface(Async)");
        }
        
        // verify the required parameter 'fileGroupNbr' is set
        if (fileGroupNbr == null) {
            throw new ApiException("Missing the required parameter 'fileGroupNbr' when calling runStageInterface(Async)");
        }
        

        com.squareup.okhttp.Call call = runStageInterfaceCall(companyCode, entity, facilityCode, fileGroupNbr, async, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run Stage Interface
     * 
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param fileGroupNbr  (required)
     * @param async  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runStageInterface(String companyCode, String entity, String facilityCode, String fileGroupNbr, Boolean async) throws ApiException {
        ApiResponse<Object> resp = runStageInterfaceWithHttpInfo(companyCode, entity, facilityCode, fileGroupNbr, async);
        return resp.getData();
    }

    /**
     * Run Stage Interface
     * 
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param fileGroupNbr  (required)
     * @param async  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runStageInterfaceWithHttpInfo(String companyCode, String entity, String facilityCode, String fileGroupNbr, Boolean async) throws ApiException {
        com.squareup.okhttp.Call call = runStageInterfaceValidateBeforeCall(companyCode, entity, facilityCode, fileGroupNbr, async, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run Stage Interface (asynchronously)
     * 
     * @param companyCode  (required)
     * @param entity  (required)
     * @param facilityCode  (required)
     * @param fileGroupNbr  (required)
     * @param async  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runStageInterfaceAsync(String companyCode, String entity, String facilityCode, String fileGroupNbr, Boolean async, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runStageInterfaceValidateBeforeCall(companyCode, entity, facilityCode, fileGroupNbr, async, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shipOBLPN
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param locnBarcode  (required)
     * @param oblpnNbr  (required)
     * @param outputFileToGenerate  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shipOBLPNCall(String companyCode, String facilityCode, String locnBarcode, String oblpnNbr, String outputFileToGenerate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ship_oblpn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (locnBarcode != null)
        localVarFormParams.put("locn_barcode", locnBarcode);
        if (oblpnNbr != null)
        localVarFormParams.put("oblpn_nbr", oblpnNbr);
        if (outputFileToGenerate != null)
        localVarFormParams.put("output_file_to_generate", outputFileToGenerate);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shipOBLPNValidateBeforeCall(String companyCode, String facilityCode, String locnBarcode, String oblpnNbr, String outputFileToGenerate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling shipOBLPN(Async)");
        }
        
        // verify the required parameter 'facilityCode' is set
        if (facilityCode == null) {
            throw new ApiException("Missing the required parameter 'facilityCode' when calling shipOBLPN(Async)");
        }
        
        // verify the required parameter 'locnBarcode' is set
        if (locnBarcode == null) {
            throw new ApiException("Missing the required parameter 'locnBarcode' when calling shipOBLPN(Async)");
        }
        
        // verify the required parameter 'oblpnNbr' is set
        if (oblpnNbr == null) {
            throw new ApiException("Missing the required parameter 'oblpnNbr' when calling shipOBLPN(Async)");
        }
        

        com.squareup.okhttp.Call call = shipOBLPNCall(companyCode, facilityCode, locnBarcode, oblpnNbr, outputFileToGenerate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Ship OBLPN
     * 
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param locnBarcode  (required)
     * @param oblpnNbr  (required)
     * @param outputFileToGenerate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object shipOBLPN(String companyCode, String facilityCode, String locnBarcode, String oblpnNbr, String outputFileToGenerate) throws ApiException {
        ApiResponse<Object> resp = shipOBLPNWithHttpInfo(companyCode, facilityCode, locnBarcode, oblpnNbr, outputFileToGenerate);
        return resp.getData();
    }

    /**
     * Ship OBLPN
     * 
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param locnBarcode  (required)
     * @param oblpnNbr  (required)
     * @param outputFileToGenerate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> shipOBLPNWithHttpInfo(String companyCode, String facilityCode, String locnBarcode, String oblpnNbr, String outputFileToGenerate) throws ApiException {
        com.squareup.okhttp.Call call = shipOBLPNValidateBeforeCall(companyCode, facilityCode, locnBarcode, oblpnNbr, outputFileToGenerate, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ship OBLPN (asynchronously)
     * 
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param locnBarcode  (required)
     * @param oblpnNbr  (required)
     * @param outputFileToGenerate  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shipOBLPNAsync(String companyCode, String facilityCode, String locnBarcode, String oblpnNbr, String outputFileToGenerate, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shipOBLPNValidateBeforeCall(companyCode, facilityCode, locnBarcode, oblpnNbr, outputFileToGenerate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateActiveInventory
     * @param locationBarcode  (required)
     * @param reasonCode  (required)
     * @param actualQty  (optional)
     * @param adjustmentQty  (optional)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param expiryData  (optional)
     * @param facilityCode  (optional)
     * @param invnAttrA  (optional)
     * @param invnAttrB  (optional)
     * @param invnAttrC  (optional)
     * @param invnAttrD  (optional)
     * @param invnAttrE  (optional)
     * @param invnAttrF  (optional)
     * @param invnAttrG  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param itemCode  (optional)
     * @param locnCapacityCheckFlg  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateActiveInventoryCall(String locationBarcode, String reasonCode, BigDecimal actualQty, BigDecimal adjustmentQty, String batchNumber, String companyCode, String expiryData, String facilityCode, String invnAttrA, String invnAttrB, String invnAttrC, String invnAttrD, String invnAttrE, String invnAttrF, String invnAttrG, String itemAlternateCode, String itemBarcode, String itemCode, Boolean locnCapacityCheckFlg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/active_inventory/{location_barcode}/"
            .replaceAll("\\{" + "location_barcode" + "\\}", apiClient.escapeString(locationBarcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (actualQty != null)
        localVarFormParams.put("actual_qty", actualQty);
        if (adjustmentQty != null)
        localVarFormParams.put("adjustment_qty", adjustmentQty);
        if (batchNumber != null)
        localVarFormParams.put("batch_number", batchNumber);
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (expiryData != null)
        localVarFormParams.put("expiry_data", expiryData);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (invnAttrA != null)
        localVarFormParams.put("invn_attr_a", invnAttrA);
        if (invnAttrB != null)
        localVarFormParams.put("invn_attr_b", invnAttrB);
        if (invnAttrC != null)
        localVarFormParams.put("invn_attr_c", invnAttrC);
        if (invnAttrD != null)
        localVarFormParams.put("invn_attr_d", invnAttrD);
        if (invnAttrE != null)
        localVarFormParams.put("invn_attr_e", invnAttrE);
        if (invnAttrF != null)
        localVarFormParams.put("invn_attr_f", invnAttrF);
        if (invnAttrG != null)
        localVarFormParams.put("invn_attr_g", invnAttrG);
        if (itemAlternateCode != null)
        localVarFormParams.put("item_alternate_code", itemAlternateCode);
        if (itemBarcode != null)
        localVarFormParams.put("item_barcode", itemBarcode);
        if (itemCode != null)
        localVarFormParams.put("item_code", itemCode);
        if (locnCapacityCheckFlg != null)
        localVarFormParams.put("locn_capacity_check_flg", locnCapacityCheckFlg);
        if (reasonCode != null)
        localVarFormParams.put("reason_code", reasonCode);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActiveInventoryValidateBeforeCall(String locationBarcode, String reasonCode, BigDecimal actualQty, BigDecimal adjustmentQty, String batchNumber, String companyCode, String expiryData, String facilityCode, String invnAttrA, String invnAttrB, String invnAttrC, String invnAttrD, String invnAttrE, String invnAttrF, String invnAttrG, String itemAlternateCode, String itemBarcode, String itemCode, Boolean locnCapacityCheckFlg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBarcode' is set
        if (locationBarcode == null) {
            throw new ApiException("Missing the required parameter 'locationBarcode' when calling updateActiveInventory(Async)");
        }
        
        // verify the required parameter 'reasonCode' is set
        if (reasonCode == null) {
            throw new ApiException("Missing the required parameter 'reasonCode' when calling updateActiveInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = updateActiveInventoryCall(locationBarcode, reasonCode, actualQty, adjustmentQty, batchNumber, companyCode, expiryData, facilityCode, invnAttrA, invnAttrB, invnAttrC, invnAttrD, invnAttrE, invnAttrF, invnAttrG, itemAlternateCode, itemBarcode, itemCode, locnCapacityCheckFlg, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Active Inventory
     * 
     * @param locationBarcode  (required)
     * @param reasonCode  (required)
     * @param actualQty  (optional)
     * @param adjustmentQty  (optional)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param expiryData  (optional)
     * @param facilityCode  (optional)
     * @param invnAttrA  (optional)
     * @param invnAttrB  (optional)
     * @param invnAttrC  (optional)
     * @param invnAttrD  (optional)
     * @param invnAttrE  (optional)
     * @param invnAttrF  (optional)
     * @param invnAttrG  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param itemCode  (optional)
     * @param locnCapacityCheckFlg  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateActiveInventory(String locationBarcode, String reasonCode, BigDecimal actualQty, BigDecimal adjustmentQty, String batchNumber, String companyCode, String expiryData, String facilityCode, String invnAttrA, String invnAttrB, String invnAttrC, String invnAttrD, String invnAttrE, String invnAttrF, String invnAttrG, String itemAlternateCode, String itemBarcode, String itemCode, Boolean locnCapacityCheckFlg) throws ApiException {
        ApiResponse<Object> resp = updateActiveInventoryWithHttpInfo(locationBarcode, reasonCode, actualQty, adjustmentQty, batchNumber, companyCode, expiryData, facilityCode, invnAttrA, invnAttrB, invnAttrC, invnAttrD, invnAttrE, invnAttrF, invnAttrG, itemAlternateCode, itemBarcode, itemCode, locnCapacityCheckFlg);
        return resp.getData();
    }

    /**
     * Update Active Inventory
     * 
     * @param locationBarcode  (required)
     * @param reasonCode  (required)
     * @param actualQty  (optional)
     * @param adjustmentQty  (optional)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param expiryData  (optional)
     * @param facilityCode  (optional)
     * @param invnAttrA  (optional)
     * @param invnAttrB  (optional)
     * @param invnAttrC  (optional)
     * @param invnAttrD  (optional)
     * @param invnAttrE  (optional)
     * @param invnAttrF  (optional)
     * @param invnAttrG  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param itemCode  (optional)
     * @param locnCapacityCheckFlg  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateActiveInventoryWithHttpInfo(String locationBarcode, String reasonCode, BigDecimal actualQty, BigDecimal adjustmentQty, String batchNumber, String companyCode, String expiryData, String facilityCode, String invnAttrA, String invnAttrB, String invnAttrC, String invnAttrD, String invnAttrE, String invnAttrF, String invnAttrG, String itemAlternateCode, String itemBarcode, String itemCode, Boolean locnCapacityCheckFlg) throws ApiException {
        com.squareup.okhttp.Call call = updateActiveInventoryValidateBeforeCall(locationBarcode, reasonCode, actualQty, adjustmentQty, batchNumber, companyCode, expiryData, facilityCode, invnAttrA, invnAttrB, invnAttrC, invnAttrD, invnAttrE, invnAttrF, invnAttrG, itemAlternateCode, itemBarcode, itemCode, locnCapacityCheckFlg, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Active Inventory (asynchronously)
     * 
     * @param locationBarcode  (required)
     * @param reasonCode  (required)
     * @param actualQty  (optional)
     * @param adjustmentQty  (optional)
     * @param batchNumber  (optional)
     * @param companyCode  (optional)
     * @param expiryData  (optional)
     * @param facilityCode  (optional)
     * @param invnAttrA  (optional)
     * @param invnAttrB  (optional)
     * @param invnAttrC  (optional)
     * @param invnAttrD  (optional)
     * @param invnAttrE  (optional)
     * @param invnAttrF  (optional)
     * @param invnAttrG  (optional)
     * @param itemAlternateCode  (optional)
     * @param itemBarcode  (optional)
     * @param itemCode  (optional)
     * @param locnCapacityCheckFlg  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActiveInventoryAsync(String locationBarcode, String reasonCode, BigDecimal actualQty, BigDecimal adjustmentQty, String batchNumber, String companyCode, String expiryData, String facilityCode, String invnAttrA, String invnAttrB, String invnAttrC, String invnAttrD, String invnAttrE, String invnAttrF, String invnAttrG, String itemAlternateCode, String itemBarcode, String itemCode, Boolean locnCapacityCheckFlg, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActiveInventoryValidateBeforeCall(locationBarcode, reasonCode, actualQty, adjustmentQty, batchNumber, companyCode, expiryData, facilityCode, invnAttrA, invnAttrB, invnAttrC, invnAttrD, invnAttrE, invnAttrF, invnAttrG, itemAlternateCode, itemBarcode, itemCode, locnCapacityCheckFlg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCarrierLPNLabel
     * @param label  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCarrierLPNLabelCall(String label, String oblpnNbr, String companyCode, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update_carrier_lpn_label/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (label != null)
        localVarFormParams.put("label", label);
        if (oblpnNbr != null)
        localVarFormParams.put("oblpn_nbr", oblpnNbr);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCarrierLPNLabelValidateBeforeCall(String label, String oblpnNbr, String companyCode, String facilityCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling updateCarrierLPNLabel(Async)");
        }
        
        // verify the required parameter 'oblpnNbr' is set
        if (oblpnNbr == null) {
            throw new ApiException("Missing the required parameter 'oblpnNbr' when calling updateCarrierLPNLabel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCarrierLPNLabelCall(label, oblpnNbr, companyCode, facilityCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Carrier LPN Label
     * 
     * @param label  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateCarrierLPNLabel(String label, String oblpnNbr, String companyCode, String facilityCode) throws ApiException {
        ApiResponse<Object> resp = updateCarrierLPNLabelWithHttpInfo(label, oblpnNbr, companyCode, facilityCode);
        return resp.getData();
    }

    /**
     * Update Carrier LPN Label
     * 
     * @param label  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateCarrierLPNLabelWithHttpInfo(String label, String oblpnNbr, String companyCode, String facilityCode) throws ApiException {
        com.squareup.okhttp.Call call = updateCarrierLPNLabelValidateBeforeCall(label, oblpnNbr, companyCode, facilityCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Carrier LPN Label (asynchronously)
     * 
     * @param label  (required)
     * @param oblpnNbr  (required)
     * @param companyCode  (optional)
     * @param facilityCode  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCarrierLPNLabelAsync(String label, String oblpnNbr, String companyCode, String facilityCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCarrierLPNLabelValidateBeforeCall(label, oblpnNbr, companyCode, facilityCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOBLPNDimensions
     * @param calcVolFlg  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param height  (required)
     * @param length  (required)
     * @param oblpnNbr  (required)
     * @param width  (required)
     * @param shipOblpn  (optional)
     * @param shippingLocation  (optional)
     * @param volume  (optional)
     * @param weight  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOBLPNDimensionsCall(Boolean calcVolFlg, String companyCode, String facilityCode, BigDecimal height, BigDecimal length, String oblpnNbr, BigDecimal width, Boolean shipOblpn, String shippingLocation, BigDecimal volume, BigDecimal weight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update_oblpn_dims/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (calcVolFlg != null)
        localVarFormParams.put("calc_vol_flg", calcVolFlg);
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (height != null)
        localVarFormParams.put("height", height);
        if (length != null)
        localVarFormParams.put("length", length);
        if (oblpnNbr != null)
        localVarFormParams.put("oblpn_nbr", oblpnNbr);
        if (shipOblpn != null)
        localVarFormParams.put("ship_oblpn", shipOblpn);
        if (shippingLocation != null)
        localVarFormParams.put("shipping_location", shippingLocation);
        if (volume != null)
        localVarFormParams.put("volume", volume);
        if (weight != null)
        localVarFormParams.put("weight", weight);
        if (width != null)
        localVarFormParams.put("width", width);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOBLPNDimensionsValidateBeforeCall(Boolean calcVolFlg, String companyCode, String facilityCode, BigDecimal height, BigDecimal length, String oblpnNbr, BigDecimal width, Boolean shipOblpn, String shippingLocation, BigDecimal volume, BigDecimal weight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'calcVolFlg' is set
        if (calcVolFlg == null) {
            throw new ApiException("Missing the required parameter 'calcVolFlg' when calling updateOBLPNDimensions(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling updateOBLPNDimensions(Async)");
        }
        
        // verify the required parameter 'facilityCode' is set
        if (facilityCode == null) {
            throw new ApiException("Missing the required parameter 'facilityCode' when calling updateOBLPNDimensions(Async)");
        }
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling updateOBLPNDimensions(Async)");
        }
        
        // verify the required parameter 'length' is set
        if (length == null) {
            throw new ApiException("Missing the required parameter 'length' when calling updateOBLPNDimensions(Async)");
        }
        
        // verify the required parameter 'oblpnNbr' is set
        if (oblpnNbr == null) {
            throw new ApiException("Missing the required parameter 'oblpnNbr' when calling updateOBLPNDimensions(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling updateOBLPNDimensions(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOBLPNDimensionsCall(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, shipOblpn, shippingLocation, volume, weight, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update OBLPN Dimensions
     * 
     * @param calcVolFlg  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param height  (required)
     * @param length  (required)
     * @param oblpnNbr  (required)
     * @param width  (required)
     * @param shipOblpn  (optional)
     * @param shippingLocation  (optional)
     * @param volume  (optional)
     * @param weight  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateOBLPNDimensions(Boolean calcVolFlg, String companyCode, String facilityCode, BigDecimal height, BigDecimal length, String oblpnNbr, BigDecimal width, Boolean shipOblpn, String shippingLocation, BigDecimal volume, BigDecimal weight) throws ApiException {
        ApiResponse<Object> resp = updateOBLPNDimensionsWithHttpInfo(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, shipOblpn, shippingLocation, volume, weight);
        return resp.getData();
    }

    /**
     * Update OBLPN Dimensions
     * 
     * @param calcVolFlg  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param height  (required)
     * @param length  (required)
     * @param oblpnNbr  (required)
     * @param width  (required)
     * @param shipOblpn  (optional)
     * @param shippingLocation  (optional)
     * @param volume  (optional)
     * @param weight  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateOBLPNDimensionsWithHttpInfo(Boolean calcVolFlg, String companyCode, String facilityCode, BigDecimal height, BigDecimal length, String oblpnNbr, BigDecimal width, Boolean shipOblpn, String shippingLocation, BigDecimal volume, BigDecimal weight) throws ApiException {
        com.squareup.okhttp.Call call = updateOBLPNDimensionsValidateBeforeCall(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, shipOblpn, shippingLocation, volume, weight, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update OBLPN Dimensions (asynchronously)
     * 
     * @param calcVolFlg  (required)
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param height  (required)
     * @param length  (required)
     * @param oblpnNbr  (required)
     * @param width  (required)
     * @param shipOblpn  (optional)
     * @param shippingLocation  (optional)
     * @param volume  (optional)
     * @param weight  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOBLPNDimensionsAsync(Boolean calcVolFlg, String companyCode, String facilityCode, BigDecimal height, BigDecimal length, String oblpnNbr, BigDecimal width, Boolean shipOblpn, String shippingLocation, BigDecimal volume, BigDecimal weight, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOBLPNDimensionsValidateBeforeCall(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, shipOblpn, shippingLocation, volume, weight, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOBLPNTrackingNumber
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param oblpnNbr  (required)
     * @param trackingNbr  (required)
     * @param dryIceWeight  (optional)
     * @param estimatedDeliveryTime  (optional)
     * @param masterTrackingNbr  (optional)
     * @param rate  (optional)
     * @param shipViaCode  (optional)
     * @param weight  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOBLPNTrackingNumberCall(String companyCode, String facilityCode, String oblpnNbr, String trackingNbr, BigDecimal dryIceWeight, String estimatedDeliveryTime, String masterTrackingNbr, String rate, String shipViaCode, BigDecimal weight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update_oblpn_tracing_nbr/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (dryIceWeight != null)
        localVarFormParams.put("dry_ice_weight", dryIceWeight);
        if (estimatedDeliveryTime != null)
        localVarFormParams.put("estimated_delivery_time", estimatedDeliveryTime);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (masterTrackingNbr != null)
        localVarFormParams.put("master_tracking_nbr", masterTrackingNbr);
        if (oblpnNbr != null)
        localVarFormParams.put("oblpn_nbr", oblpnNbr);
        if (rate != null)
        localVarFormParams.put("rate", rate);
        if (shipViaCode != null)
        localVarFormParams.put("ship_via_code", shipViaCode);
        if (trackingNbr != null)
        localVarFormParams.put("tracking_nbr", trackingNbr);
        if (weight != null)
        localVarFormParams.put("weight", weight);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOBLPNTrackingNumberValidateBeforeCall(String companyCode, String facilityCode, String oblpnNbr, String trackingNbr, BigDecimal dryIceWeight, String estimatedDeliveryTime, String masterTrackingNbr, String rate, String shipViaCode, BigDecimal weight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling updateOBLPNTrackingNumber(Async)");
        }
        
        // verify the required parameter 'facilityCode' is set
        if (facilityCode == null) {
            throw new ApiException("Missing the required parameter 'facilityCode' when calling updateOBLPNTrackingNumber(Async)");
        }
        
        // verify the required parameter 'oblpnNbr' is set
        if (oblpnNbr == null) {
            throw new ApiException("Missing the required parameter 'oblpnNbr' when calling updateOBLPNTrackingNumber(Async)");
        }
        
        // verify the required parameter 'trackingNbr' is set
        if (trackingNbr == null) {
            throw new ApiException("Missing the required parameter 'trackingNbr' when calling updateOBLPNTrackingNumber(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOBLPNTrackingNumberCall(companyCode, facilityCode, oblpnNbr, trackingNbr, dryIceWeight, estimatedDeliveryTime, masterTrackingNbr, rate, shipViaCode, weight, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update OBLPN Tracking Number
     * 
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param oblpnNbr  (required)
     * @param trackingNbr  (required)
     * @param dryIceWeight  (optional)
     * @param estimatedDeliveryTime  (optional)
     * @param masterTrackingNbr  (optional)
     * @param rate  (optional)
     * @param shipViaCode  (optional)
     * @param weight  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateOBLPNTrackingNumber(String companyCode, String facilityCode, String oblpnNbr, String trackingNbr, BigDecimal dryIceWeight, String estimatedDeliveryTime, String masterTrackingNbr, String rate, String shipViaCode, BigDecimal weight) throws ApiException {
        ApiResponse<Object> resp = updateOBLPNTrackingNumberWithHttpInfo(companyCode, facilityCode, oblpnNbr, trackingNbr, dryIceWeight, estimatedDeliveryTime, masterTrackingNbr, rate, shipViaCode, weight);
        return resp.getData();
    }

    /**
     * Update OBLPN Tracking Number
     * 
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param oblpnNbr  (required)
     * @param trackingNbr  (required)
     * @param dryIceWeight  (optional)
     * @param estimatedDeliveryTime  (optional)
     * @param masterTrackingNbr  (optional)
     * @param rate  (optional)
     * @param shipViaCode  (optional)
     * @param weight  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateOBLPNTrackingNumberWithHttpInfo(String companyCode, String facilityCode, String oblpnNbr, String trackingNbr, BigDecimal dryIceWeight, String estimatedDeliveryTime, String masterTrackingNbr, String rate, String shipViaCode, BigDecimal weight) throws ApiException {
        com.squareup.okhttp.Call call = updateOBLPNTrackingNumberValidateBeforeCall(companyCode, facilityCode, oblpnNbr, trackingNbr, dryIceWeight, estimatedDeliveryTime, masterTrackingNbr, rate, shipViaCode, weight, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update OBLPN Tracking Number (asynchronously)
     * 
     * @param companyCode  (required)
     * @param facilityCode  (required)
     * @param oblpnNbr  (required)
     * @param trackingNbr  (required)
     * @param dryIceWeight  (optional)
     * @param estimatedDeliveryTime  (optional)
     * @param masterTrackingNbr  (optional)
     * @param rate  (optional)
     * @param shipViaCode  (optional)
     * @param weight  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOBLPNTrackingNumberAsync(String companyCode, String facilityCode, String oblpnNbr, String trackingNbr, BigDecimal dryIceWeight, String estimatedDeliveryTime, String masterTrackingNbr, String rate, String shipViaCode, BigDecimal weight, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOBLPNTrackingNumberValidateBeforeCall(companyCode, facilityCode, oblpnNbr, trackingNbr, dryIceWeight, estimatedDeliveryTime, masterTrackingNbr, rate, shipViaCode, weight, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOutputInterface
     * @param companyCode  (optional)
     * @param custIntlCode  (optional)
     * @param facilityCode  (optional)
     * @param filename  (optional)
     * @param interfaceTypeCode  (optional)
     * @param message  (optional)
     * @param runOutputInterfaceFlg  (optional)
     * @param statusId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOutputInterfaceCall(String companyCode, String custIntlCode, String facilityCode, String filename, String interfaceTypeCode, String message, Boolean runOutputInterfaceFlg, Integer statusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update_output_interface/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (companyCode != null)
        localVarFormParams.put("company_code", companyCode);
        if (custIntlCode != null)
        localVarFormParams.put("cust_intl_code", custIntlCode);
        if (facilityCode != null)
        localVarFormParams.put("facility_code", facilityCode);
        if (filename != null)
        localVarFormParams.put("filename", filename);
        if (interfaceTypeCode != null)
        localVarFormParams.put("interface_type_code", interfaceTypeCode);
        if (message != null)
        localVarFormParams.put("message", message);
        if (runOutputInterfaceFlg != null)
        localVarFormParams.put("run_output_interface_flg", runOutputInterfaceFlg);
        if (statusId != null)
        localVarFormParams.put("status_id", statusId);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOutputInterfaceValidateBeforeCall(String companyCode, String custIntlCode, String facilityCode, String filename, String interfaceTypeCode, String message, Boolean runOutputInterfaceFlg, Integer statusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = updateOutputInterfaceCall(companyCode, custIntlCode, facilityCode, filename, interfaceTypeCode, message, runOutputInterfaceFlg, statusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Output Interface
     * 
     * @param companyCode  (optional)
     * @param custIntlCode  (optional)
     * @param facilityCode  (optional)
     * @param filename  (optional)
     * @param interfaceTypeCode  (optional)
     * @param message  (optional)
     * @param runOutputInterfaceFlg  (optional)
     * @param statusId  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateOutputInterface(String companyCode, String custIntlCode, String facilityCode, String filename, String interfaceTypeCode, String message, Boolean runOutputInterfaceFlg, Integer statusId) throws ApiException {
        ApiResponse<Object> resp = updateOutputInterfaceWithHttpInfo(companyCode, custIntlCode, facilityCode, filename, interfaceTypeCode, message, runOutputInterfaceFlg, statusId);
        return resp.getData();
    }

    /**
     * Update Output Interface
     * 
     * @param companyCode  (optional)
     * @param custIntlCode  (optional)
     * @param facilityCode  (optional)
     * @param filename  (optional)
     * @param interfaceTypeCode  (optional)
     * @param message  (optional)
     * @param runOutputInterfaceFlg  (optional)
     * @param statusId  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateOutputInterfaceWithHttpInfo(String companyCode, String custIntlCode, String facilityCode, String filename, String interfaceTypeCode, String message, Boolean runOutputInterfaceFlg, Integer statusId) throws ApiException {
        com.squareup.okhttp.Call call = updateOutputInterfaceValidateBeforeCall(companyCode, custIntlCode, facilityCode, filename, interfaceTypeCode, message, runOutputInterfaceFlg, statusId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Output Interface (asynchronously)
     * 
     * @param companyCode  (optional)
     * @param custIntlCode  (optional)
     * @param facilityCode  (optional)
     * @param filename  (optional)
     * @param interfaceTypeCode  (optional)
     * @param message  (optional)
     * @param runOutputInterfaceFlg  (optional)
     * @param statusId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOutputInterfaceAsync(String companyCode, String custIntlCode, String facilityCode, String filename, String interfaceTypeCode, String message, Boolean runOutputInterfaceFlg, Integer statusId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOutputInterfaceValidateBeforeCall(companyCode, custIntlCode, facilityCode, filename, interfaceTypeCode, message, runOutputInterfaceFlg, statusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
