/*
 * Integration API
 * This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Assign OBLPN to Load
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignOBLPNtoLoadTest() throws ApiException {
        String loadNbr = null;
        String oblpnNbr = null;
        String carrierCode = null;
        String companyCode = null;
        String delimiter = null;
        String facilityCode = null;
        Boolean reassignLoadFlg = null;
        Integer requireSpecificOblpnStatus = null;
        String trailerNbr = null;
        Object response = api.assignOBLPNtoLoad(loadNbr, oblpnNbr, carrierCode, companyCode, delimiter, facilityCode, reassignLoadFlg, requireSpecificOblpnStatus, trailerNbr);

        // TODO: test validations
    }
    
    /**
     * Assign and Load LPN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignandLoadLPNTest() throws ApiException {
        String loadNbr = null;
        String oblpnNbr = null;
        String companyCode = null;
        String dockDoorNbr = null;
        String facilityCode = null;
        BigDecimal oblpnWeight = null;
        String palletNbr = null;
        String trailerNbr = null;
        Object response = api.assignandLoadLPN(loadNbr, oblpnNbr, companyCode, dockDoorNbr, facilityCode, oblpnWeight, palletNbr, trailerNbr);

        // TODO: test validations
    }
    
    /**
     * Create LPN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLPNTest() throws ApiException {
        String lpnNbr = null;
        Integer qty = null;
        String batchNumber = null;
        String companyCode = null;
        String destFacilityCode = null;
        String dropLocnBarcode = null;
        String expiryDate = null;
        String facilityCode = null;
        String itemAlternateCode = null;
        String itemBarcode = null;
        String lockCode = null;
        BigDecimal lpnWeight = null;
        String orderType = null;
        Boolean xdockLpnFlg = null;
        Object response = api.createLPN(lpnNbr, qty, batchNumber, companyCode, destFacilityCode, dropLocnBarcode, expiryDate, facilityCode, itemAlternateCode, itemBarcode, lockCode, lpnWeight, orderType, xdockLpnFlg);

        // TODO: test validations
    }
    
    /**
     * Divert Confirm
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void divertConfirmTest() throws ApiException {
        String flatData = null;
        String xmlData = null;
        Object response = api.divertConfirm(flatData, xmlData);

        // TODO: test validations
    }
    
    /**
     * Entity Update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityUpdateTest() throws ApiException {
        String entityName = null;
        String key = null;
        String sequenceNumber = null;
        Object response = api.entityUpdate(entityName, key, sequenceNumber);

        // TODO: test validations
    }
    
    /**
     * Extended Property
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extendedPropertyTest() throws ApiException {
        String entityName = null;
        String extendedProperty = null;
        String key = null;
        String companyCode = null;
        String facilityCode = null;
        Object response = api.extendedProperty(entityName, extendedProperty, key, companyCode, facilityCode);

        // TODO: test validations
    }
    
    /**
     * From MHE Distribution Pack
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fromMHEDistributionPackTest() throws ApiException {
        String xmlData = null;
        Object response = api.fromMHEDistributionPack(xmlData);

        // TODO: test validations
    }
    
    /**
     * From MHE Distribution Short
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fromMHEDistributionShortTest() throws ApiException {
        String flatData = null;
        String xmlData = null;
        Object response = api.fromMHEDistributionShort(flatData, xmlData);

        // TODO: test validations
    }
    
    /**
     * Get Next Numbers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNextNumbersTest() throws ApiException {
        String counterCode = null;
        String companyCode = null;
        Integer count = null;
        String facilityCode = null;
        Object response = api.getNextNumbers(counterCode, companyCode, count, facilityCode);

        // TODO: test validations
    }
    
    /**
     * Get Status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        String entity = null;
        String key = null;
        String companyCode = null;
        String facilityCode = null;
        Object response = api.getStatus(entity, key, companyCode, facilityCode);

        // TODO: test validations
    }
    
    /**
     * Induct LPN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inductLPNTest() throws ApiException {
        String flatData = null;
        String xmlData = null;
        Object response = api.inductLPN(flatData, xmlData);

        // TODO: test validations
    }
    
    /**
     * Init Stage Interface
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initStageInterfaceTest() throws ApiException {
        Boolean async = null;
        String entity = null;
        String flatData = null;
        Boolean validateXml = null;
        String xmlData = null;
        Object response = api.initStageInterface(async, entity, flatData, validateXml, xmlData);

        // TODO: test validations
    }
    
    /**
     * Lock/Unlock LPN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lockUnlockLPNTest() throws ApiException {
        String action = null;
        String companyCode = null;
        String facilityCode = null;
        String lockCode = null;
        String lpnNbr = null;
        Boolean removeLockFromShipmentDtlFlg = null;
        Object response = api.lockUnlockLPN(action, companyCode, facilityCode, lockCode, lpnNbr, removeLockFromShipmentDtlFlg);

        // TODO: test validations
    }
    
    /**
     * Object Inquiry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectInquiryTest() throws ApiException {
        String entity = null;
        String key = null;
        String companyCode = null;
        String facilityCode = null;
        String minimize = null;
        Object response = api.objectInquiry(entity, key, companyCode, facilityCode, minimize);

        // TODO: test validations
    }
    
    /**
     * Pick Confirm
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pickConfirmTest() throws ApiException {
        String flatData = null;
        String xmlData = null;
        Object response = api.pickConfirm(flatData, xmlData);

        // TODO: test validations
    }
    
    /**
     * Receive LPN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void receiveLPNTest() throws ApiException {
        String lpnNbr = null;
        String companyCode = null;
        String facilityCode = null;
        String rcvdTrailerNbr = null;
        String receivedTs = null;
        String receivingLocation = null;
        Boolean xdockLpnFlg = null;
        String xmlData = null;
        Object response = api.receiveLPN(lpnNbr, companyCode, facilityCode, rcvdTrailerNbr, receivedTs, receivingLocation, xdockLpnFlg, xmlData);

        // TODO: test validations
    }
    
    /**
     * Run MHE Stage Interface
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runMHEStageInterfaceTest() throws ApiException {
        String companyCode = null;
        String entity = null;
        String facilityCode = null;
        String mheVendorCode = null;
        String pythonFunction = null;
        Object response = api.runMHEStageInterface(companyCode, entity, facilityCode, mheVendorCode, pythonFunction);

        // TODO: test validations
    }
    
    /**
     * Run Stage Interface
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runStageInterfaceTest() throws ApiException {
        String companyCode = null;
        String entity = null;
        String facilityCode = null;
        String fileGroupNbr = null;
        Boolean async = null;
        Object response = api.runStageInterface(companyCode, entity, facilityCode, fileGroupNbr, async);

        // TODO: test validations
    }
    
    /**
     * Ship OBLPN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shipOBLPNTest() throws ApiException {
        String companyCode = null;
        String facilityCode = null;
        String locnBarcode = null;
        String oblpnNbr = null;
        String outputFileToGenerate = null;
        Object response = api.shipOBLPN(companyCode, facilityCode, locnBarcode, oblpnNbr, outputFileToGenerate);

        // TODO: test validations
    }
    
    /**
     * Update Active Inventory
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateActiveInventoryTest() throws ApiException {
        String locationBarcode = null;
        String reasonCode = null;
        BigDecimal actualQty = null;
        BigDecimal adjustmentQty = null;
        String batchNumber = null;
        String companyCode = null;
        String expiryData = null;
        String facilityCode = null;
        String invnAttrA = null;
        String invnAttrB = null;
        String invnAttrC = null;
        String invnAttrD = null;
        String invnAttrE = null;
        String invnAttrF = null;
        String invnAttrG = null;
        String itemAlternateCode = null;
        String itemBarcode = null;
        String itemCode = null;
        Boolean locnCapacityCheckFlg = null;
        Object response = api.updateActiveInventory(locationBarcode, reasonCode, actualQty, adjustmentQty, batchNumber, companyCode, expiryData, facilityCode, invnAttrA, invnAttrB, invnAttrC, invnAttrD, invnAttrE, invnAttrF, invnAttrG, itemAlternateCode, itemBarcode, itemCode, locnCapacityCheckFlg);

        // TODO: test validations
    }
    
    /**
     * Update Carrier LPN Label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCarrierLPNLabelTest() throws ApiException {
        String label = null;
        String oblpnNbr = null;
        String companyCode = null;
        String facilityCode = null;
        Object response = api.updateCarrierLPNLabel(label, oblpnNbr, companyCode, facilityCode);

        // TODO: test validations
    }
    
    /**
     * Update OBLPN Dimensions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOBLPNDimensionsTest() throws ApiException {
        Boolean calcVolFlg = null;
        String companyCode = null;
        String facilityCode = null;
        BigDecimal height = null;
        BigDecimal length = null;
        String oblpnNbr = null;
        BigDecimal width = null;
        Boolean shipOblpn = null;
        String shippingLocation = null;
        BigDecimal volume = null;
        BigDecimal weight = null;
        Object response = api.updateOBLPNDimensions(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, shipOblpn, shippingLocation, volume, weight);

        // TODO: test validations
    }
    
    /**
     * Update OBLPN Tracking Number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOBLPNTrackingNumberTest() throws ApiException {
        String companyCode = null;
        String facilityCode = null;
        String oblpnNbr = null;
        String trackingNbr = null;
        BigDecimal dryIceWeight = null;
        String estimatedDeliveryTime = null;
        String masterTrackingNbr = null;
        String rate = null;
        String shipViaCode = null;
        BigDecimal weight = null;
        Object response = api.updateOBLPNTrackingNumber(companyCode, facilityCode, oblpnNbr, trackingNbr, dryIceWeight, estimatedDeliveryTime, masterTrackingNbr, rate, shipViaCode, weight);

        // TODO: test validations
    }
    
    /**
     * Update Output Interface
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOutputInterfaceTest() throws ApiException {
        String companyCode = null;
        String custIntlCode = null;
        String facilityCode = null;
        String filename = null;
        String interfaceTypeCode = null;
        String message = null;
        Boolean runOutputInterfaceFlg = null;
        Integer statusId = null;
        Object response = api.updateOutputInterface(companyCode, custIntlCode, facilityCode, filename, interfaceTypeCode, message, runOutputInterfaceFlg, statusId);

        // TODO: test validations
    }
    
}
