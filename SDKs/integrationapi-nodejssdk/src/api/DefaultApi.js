/*
 * Integration API
 * This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.IntegrationApi) {
      root.IntegrationApi = {};
    }
    root.IntegrationApi.DefaultApi = factory(root.IntegrationApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignOBLPNtoLoad operation.
     * @callback module:api/DefaultApi~assignOBLPNtoLoadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign OBLPN to Load
     * 
     * @param {String} loadNbr 
     * @param {String} oblpnNbr 
     * @param {Object} opts Optional parameters
     * @param {String} opts.carrierCode 
     * @param {String} opts.companyCode 
     * @param {String} opts.delimiter 
     * @param {String} opts.facilityCode 
     * @param {Boolean} opts.reassignLoadFlg 
     * @param {Number} opts.requireSpecificOblpnStatus 
     * @param {String} opts.trailerNbr 
     * @param {module:api/DefaultApi~assignOBLPNtoLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.assignOBLPNtoLoad = function(loadNbr, oblpnNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'loadNbr' is set
      if (loadNbr === undefined || loadNbr === null) {
        throw new Error("Missing the required parameter 'loadNbr' when calling assignOBLPNtoLoad");
      }

      // verify the required parameter 'oblpnNbr' is set
      if (oblpnNbr === undefined || oblpnNbr === null) {
        throw new Error("Missing the required parameter 'oblpnNbr' when calling assignOBLPNtoLoad");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'carrier_code': opts['carrierCode'],
        'company_code': opts['companyCode'],
        'delimiter': opts['delimiter'],
        'facility_code': opts['facilityCode'],
        'load_nbr': loadNbr,
        'oblpn_nbr': oblpnNbr,
        'reassign_load_flg': opts['reassignLoadFlg'],
        'require_specific_oblpn_status': opts['requireSpecificOblpnStatus'],
        'trailer_nbr': opts['trailerNbr']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/assign_oblpn_to_load/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignandLoadLPN operation.
     * @callback module:api/DefaultApi~assignandLoadLPNCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign and Load LPN
     * 
     * @param {String} loadNbr 
     * @param {String} oblpnNbr 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {String} opts.dockDoorNbr 
     * @param {String} opts.facilityCode 
     * @param {Number} opts.oblpnWeight 
     * @param {String} opts.palletNbr 
     * @param {String} opts.trailerNbr 
     * @param {module:api/DefaultApi~assignandLoadLPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.assignandLoadLPN = function(loadNbr, oblpnNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'loadNbr' is set
      if (loadNbr === undefined || loadNbr === null) {
        throw new Error("Missing the required parameter 'loadNbr' when calling assignandLoadLPN");
      }

      // verify the required parameter 'oblpnNbr' is set
      if (oblpnNbr === undefined || oblpnNbr === null) {
        throw new Error("Missing the required parameter 'oblpnNbr' when calling assignandLoadLPN");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': opts['companyCode'],
        'dock_door_nbr': opts['dockDoorNbr'],
        'facility_code': opts['facilityCode'],
        'load_nbr': loadNbr,
        'oblpn_nbr': oblpnNbr,
        'oblpn_weight': opts['oblpnWeight'],
        'pallet_nbr': opts['palletNbr'],
        'trailer_nbr': opts['trailerNbr']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/assign_and_load_oblpn/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLPN operation.
     * @callback module:api/DefaultApi~createLPNCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create LPN
     * 
     * @param {String} lpnNbr 
     * @param {Number} qty 
     * @param {Object} opts Optional parameters
     * @param {String} opts.batchNumber 
     * @param {String} opts.companyCode 
     * @param {String} opts.destFacilityCode 
     * @param {String} opts.dropLocnBarcode 
     * @param {String} opts.expiryDate 
     * @param {String} opts.facilityCode 
     * @param {String} opts.itemAlternateCode 
     * @param {String} opts.itemBarcode 
     * @param {String} opts.lockCode 
     * @param {Number} opts.lpnWeight 
     * @param {String} opts.orderType 
     * @param {Boolean} opts.xdockLpnFlg 
     * @param {module:api/DefaultApi~createLPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createLPN = function(lpnNbr, qty, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lpnNbr' is set
      if (lpnNbr === undefined || lpnNbr === null) {
        throw new Error("Missing the required parameter 'lpnNbr' when calling createLPN");
      }

      // verify the required parameter 'qty' is set
      if (qty === undefined || qty === null) {
        throw new Error("Missing the required parameter 'qty' when calling createLPN");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'batch_number': opts['batchNumber'],
        'company_code': opts['companyCode'],
        'dest_facility_code': opts['destFacilityCode'],
        'drop_locn_barcode': opts['dropLocnBarcode'],
        'expiry_date': opts['expiryDate'],
        'facility_code': opts['facilityCode'],
        'item_alternate_code': opts['itemAlternateCode'],
        'item_barcode': opts['itemBarcode'],
        'lock_code': opts['lockCode'],
        'lpn_nbr': lpnNbr,
        'lpn_weight': opts['lpnWeight'],
        'order_type': opts['orderType'],
        'qty': qty,
        'xdock_lpn_flg': opts['xdockLpnFlg']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/create_lpn/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the divertConfirm operation.
     * @callback module:api/DefaultApi~divertConfirmCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Divert Confirm
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.flatData 
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~divertConfirmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.divertConfirm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'flat_data': opts['flatData'],
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/divert_confirm/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entityUpdate operation.
     * @callback module:api/DefaultApi~entityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entity Update
     * 
     * @param {String} entityName 
     * @param {String} key 
     * @param {String} sequenceNumber 
     * @param {module:api/DefaultApi~entityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.entityUpdate = function(entityName, key, sequenceNumber, callback) {
      var postBody = null;

      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling entityUpdate");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling entityUpdate");
      }

      // verify the required parameter 'sequenceNumber' is set
      if (sequenceNumber === undefined || sequenceNumber === null) {
        throw new Error("Missing the required parameter 'sequenceNumber' when calling entityUpdate");
      }


      var pathParams = {
        'entity_name': entityName,
        'key': key,
        'sequence_number': sequenceNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/{entity_name}/{key}/{sequence_number}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the extendedProperty operation.
     * @callback module:api/DefaultApi~extendedPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extended Property
     * 
     * @param {String} entityName 
     * @param {String} extendedProperty 
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {String} opts.facilityCode 
     * @param {module:api/DefaultApi~extendedPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.extendedProperty = function(entityName, extendedProperty, key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling extendedProperty");
      }

      // verify the required parameter 'extendedProperty' is set
      if (extendedProperty === undefined || extendedProperty === null) {
        throw new Error("Missing the required parameter 'extendedProperty' when calling extendedProperty");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling extendedProperty");
      }


      var pathParams = {
        'entity_name': entityName,
        'extended_property': extendedProperty,
        'key': key
      };
      var queryParams = {
        'company_code': opts['companyCode'],
        'facility_code': opts['facilityCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/extended_property/{entity_name}/{key}/{extended_property}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fromMHEDistributionPack operation.
     * @callback module:api/DefaultApi~fromMHEDistributionPackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From MHE Distribution Pack
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~fromMHEDistributionPackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.fromMHEDistributionPack = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/from_mhe_distribution_pack/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fromMHEDistributionShort operation.
     * @callback module:api/DefaultApi~fromMHEDistributionShortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From MHE Distribution Short
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.flatData 
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~fromMHEDistributionShortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.fromMHEDistributionShort = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'flat_data': opts['flatData'],
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/from_mhe_distribution_short/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextNumbers operation.
     * @callback module:api/DefaultApi~getNextNumbersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Next Numbers
     * 
     * @param {String} counterCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {Number} opts.count 
     * @param {String} opts.facilityCode 
     * @param {module:api/DefaultApi~getNextNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNextNumbers = function(counterCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'counterCode' is set
      if (counterCode === undefined || counterCode === null) {
        throw new Error("Missing the required parameter 'counterCode' when calling getNextNumbers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': opts['companyCode'],
        'counter_code': counterCode,
        'count': opts['count'],
        'facility_code': opts['facilityCode']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/get_next_numbers/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/DefaultApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Status
     * 
     * @param {String} entity 
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {String} opts.facilityCode 
     * @param {module:api/DefaultApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getStatus = function(entity, key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling getStatus");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': opts['companyCode'],
        'entity': entity,
        'facility_code': opts['facilityCode'],
        'key': key
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/get_status/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inductLPN operation.
     * @callback module:api/DefaultApi~inductLPNCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Induct LPN
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.flatData 
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~inductLPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.inductLPN = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'flat_data': opts['flatData'],
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/induct_lpn/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initStageInterface operation.
     * @callback module:api/DefaultApi~initStageInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Init Stage Interface
     * 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async 
     * @param {String} opts.entity 
     * @param {String} opts.flatData 
     * @param {Boolean} opts.validateXml 
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~initStageInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.initStageInterface = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'async': opts['async'],
        'entity': opts['entity'],
        'flat_data': opts['flatData'],
        'validate_xml': opts['validateXml'],
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/init_stage_interface/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lockUnlockLPN operation.
     * @callback module:api/DefaultApi~lockUnlockLPNCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock/Unlock LPN
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.action 
     * @param {String} opts.companyCode 
     * @param {String} opts.facilityCode 
     * @param {String} opts.lockCode 
     * @param {String} opts.lpnNbr 
     * @param {Boolean} opts.removeLockFromShipmentDtlFlg 
     * @param {module:api/DefaultApi~lockUnlockLPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.lockUnlockLPN = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'action': opts['action'],
        'company_code': opts['companyCode'],
        'facility_code': opts['facilityCode'],
        'lock_code': opts['lockCode'],
        'lpn_nbr': opts['lpnNbr'],
        'remove_lock_from_shipment_dtl_flg': opts['removeLockFromShipmentDtlFlg']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/lock_unlock_lpn/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the objectInquiry operation.
     * @callback module:api/DefaultApi~objectInquiryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Object Inquiry
     * 
     * @param {String} entity 
     * @param {String} key 
     * @param {String} companyCode 
     * @param {String} facilityCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.minimize 
     * @param {module:api/DefaultApi~objectInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.objectInquiry = function(entity, key, companyCode, facilityCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling objectInquiry");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling objectInquiry");
      }

      // verify the required parameter 'companyCode' is set
      if (companyCode === undefined || companyCode === null) {
        throw new Error("Missing the required parameter 'companyCode' when calling objectInquiry");
      }

      // verify the required parameter 'facilityCode' is set
      if (facilityCode === undefined || facilityCode === null) {
        throw new Error("Missing the required parameter 'facilityCode' when calling objectInquiry");
      }


      var pathParams = {
        'entity': entity,
        'key': key
      };
      var queryParams = {
        'company_code': companyCode,
        'facility_code': facilityCode,
        'minimize': opts['minimize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/{entity}/{key}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pickConfirm operation.
     * @callback module:api/DefaultApi~pickConfirmCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pick Confirm
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.flatData 
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~pickConfirmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.pickConfirm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'flat_data': opts['flatData'],
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/pick_confirm/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the receiveLPN operation.
     * @callback module:api/DefaultApi~receiveLPNCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receive LPN
     * 
     * @param {String} lpnNbr 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {String} opts.facilityCode 
     * @param {String} opts.rcvdTrailerNbr 
     * @param {String} opts.receivedTs 
     * @param {String} opts.receivingLocation 
     * @param {Boolean} opts.xdockLpnFlg 
     * @param {String} opts.xmlData 
     * @param {module:api/DefaultApi~receiveLPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.receiveLPN = function(lpnNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lpnNbr' is set
      if (lpnNbr === undefined || lpnNbr === null) {
        throw new Error("Missing the required parameter 'lpnNbr' when calling receiveLPN");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': opts['companyCode'],
        'facility_code': opts['facilityCode'],
        'lpn_nbr': lpnNbr,
        'rcvd_trailer_nbr': opts['rcvdTrailerNbr'],
        'received_ts': opts['receivedTs'],
        'receiving_location': opts['receivingLocation'],
        'xdock_lpn_flg': opts['xdockLpnFlg'],
        'xml_data': opts['xmlData']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/receive_lpn/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runMHEStageInterface operation.
     * @callback module:api/DefaultApi~runMHEStageInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run MHE Stage Interface
     * 
     * @param {String} companyCode 
     * @param {String} entity 
     * @param {String} facilityCode 
     * @param {String} mheVendorCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pythonFunction 
     * @param {module:api/DefaultApi~runMHEStageInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.runMHEStageInterface = function(companyCode, entity, facilityCode, mheVendorCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyCode' is set
      if (companyCode === undefined || companyCode === null) {
        throw new Error("Missing the required parameter 'companyCode' when calling runMHEStageInterface");
      }

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling runMHEStageInterface");
      }

      // verify the required parameter 'facilityCode' is set
      if (facilityCode === undefined || facilityCode === null) {
        throw new Error("Missing the required parameter 'facilityCode' when calling runMHEStageInterface");
      }

      // verify the required parameter 'mheVendorCode' is set
      if (mheVendorCode === undefined || mheVendorCode === null) {
        throw new Error("Missing the required parameter 'mheVendorCode' when calling runMHEStageInterface");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': companyCode,
        'entity': entity,
        'facility_code': facilityCode,
        'mhe_vendor_code': mheVendorCode,
        'python_function': opts['pythonFunction']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/run_mhe_stage_interface/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runStageInterface operation.
     * @callback module:api/DefaultApi~runStageInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Stage Interface
     * 
     * @param {String} companyCode 
     * @param {String} entity 
     * @param {String} facilityCode 
     * @param {String} fileGroupNbr 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async 
     * @param {module:api/DefaultApi~runStageInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.runStageInterface = function(companyCode, entity, facilityCode, fileGroupNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyCode' is set
      if (companyCode === undefined || companyCode === null) {
        throw new Error("Missing the required parameter 'companyCode' when calling runStageInterface");
      }

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling runStageInterface");
      }

      // verify the required parameter 'facilityCode' is set
      if (facilityCode === undefined || facilityCode === null) {
        throw new Error("Missing the required parameter 'facilityCode' when calling runStageInterface");
      }

      // verify the required parameter 'fileGroupNbr' is set
      if (fileGroupNbr === undefined || fileGroupNbr === null) {
        throw new Error("Missing the required parameter 'fileGroupNbr' when calling runStageInterface");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'async': opts['async'],
        'company_code': companyCode,
        'entity': entity,
        'facility_code': facilityCode,
        'file_group_nbr': fileGroupNbr
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/run_stage_interface/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shipOBLPN operation.
     * @callback module:api/DefaultApi~shipOBLPNCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ship OBLPN
     * 
     * @param {String} companyCode 
     * @param {String} facilityCode 
     * @param {String} locnBarcode 
     * @param {String} oblpnNbr 
     * @param {Object} opts Optional parameters
     * @param {String} opts.outputFileToGenerate 
     * @param {module:api/DefaultApi~shipOBLPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.shipOBLPN = function(companyCode, facilityCode, locnBarcode, oblpnNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyCode' is set
      if (companyCode === undefined || companyCode === null) {
        throw new Error("Missing the required parameter 'companyCode' when calling shipOBLPN");
      }

      // verify the required parameter 'facilityCode' is set
      if (facilityCode === undefined || facilityCode === null) {
        throw new Error("Missing the required parameter 'facilityCode' when calling shipOBLPN");
      }

      // verify the required parameter 'locnBarcode' is set
      if (locnBarcode === undefined || locnBarcode === null) {
        throw new Error("Missing the required parameter 'locnBarcode' when calling shipOBLPN");
      }

      // verify the required parameter 'oblpnNbr' is set
      if (oblpnNbr === undefined || oblpnNbr === null) {
        throw new Error("Missing the required parameter 'oblpnNbr' when calling shipOBLPN");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': companyCode,
        'facility_code': facilityCode,
        'locn_barcode': locnBarcode,
        'oblpn_nbr': oblpnNbr,
        'output_file_to_generate': opts['outputFileToGenerate']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/ship_oblpn', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActiveInventory operation.
     * @callback module:api/DefaultApi~updateActiveInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Active Inventory
     * 
     * @param {String} locationBarcode 
     * @param {String} reasonCode 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.actualQty 
     * @param {Number} opts.adjustmentQty 
     * @param {String} opts.batchNumber 
     * @param {String} opts.companyCode 
     * @param {String} opts.expiryData 
     * @param {String} opts.facilityCode 
     * @param {String} opts.invnAttrA 
     * @param {String} opts.invnAttrB 
     * @param {String} opts.invnAttrC 
     * @param {String} opts.invnAttrD 
     * @param {String} opts.invnAttrE 
     * @param {String} opts.invnAttrF 
     * @param {String} opts.invnAttrG 
     * @param {String} opts.itemAlternateCode 
     * @param {String} opts.itemBarcode 
     * @param {String} opts.itemCode 
     * @param {Boolean} opts.locnCapacityCheckFlg 
     * @param {module:api/DefaultApi~updateActiveInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateActiveInventory = function(locationBarcode, reasonCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationBarcode' is set
      if (locationBarcode === undefined || locationBarcode === null) {
        throw new Error("Missing the required parameter 'locationBarcode' when calling updateActiveInventory");
      }

      // verify the required parameter 'reasonCode' is set
      if (reasonCode === undefined || reasonCode === null) {
        throw new Error("Missing the required parameter 'reasonCode' when calling updateActiveInventory");
      }


      var pathParams = {
        'location_barcode': locationBarcode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'actual_qty': opts['actualQty'],
        'adjustment_qty': opts['adjustmentQty'],
        'batch_number': opts['batchNumber'],
        'company_code': opts['companyCode'],
        'expiry_data': opts['expiryData'],
        'facility_code': opts['facilityCode'],
        'invn_attr_a': opts['invnAttrA'],
        'invn_attr_b': opts['invnAttrB'],
        'invn_attr_c': opts['invnAttrC'],
        'invn_attr_d': opts['invnAttrD'],
        'invn_attr_e': opts['invnAttrE'],
        'invn_attr_f': opts['invnAttrF'],
        'invn_attr_g': opts['invnAttrG'],
        'item_alternate_code': opts['itemAlternateCode'],
        'item_barcode': opts['itemBarcode'],
        'item_code': opts['itemCode'],
        'locn_capacity_check_flg': opts['locnCapacityCheckFlg'],
        'reason_code': reasonCode
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/active_inventory/{location_barcode}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCarrierLPNLabel operation.
     * @callback module:api/DefaultApi~updateCarrierLPNLabelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Carrier LPN Label
     * 
     * @param {String} label 
     * @param {String} oblpnNbr 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {String} opts.facilityCode 
     * @param {module:api/DefaultApi~updateCarrierLPNLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateCarrierLPNLabel = function(label, oblpnNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling updateCarrierLPNLabel");
      }

      // verify the required parameter 'oblpnNbr' is set
      if (oblpnNbr === undefined || oblpnNbr === null) {
        throw new Error("Missing the required parameter 'oblpnNbr' when calling updateCarrierLPNLabel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': opts['companyCode'],
        'facility_code': opts['facilityCode'],
        'label': label,
        'oblpn_nbr': oblpnNbr
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/update_carrier_lpn_label/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOBLPNDimensions operation.
     * @callback module:api/DefaultApi~updateOBLPNDimensionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update OBLPN Dimensions
     * 
     * @param {Boolean} calcVolFlg 
     * @param {String} companyCode 
     * @param {String} facilityCode 
     * @param {Number} height 
     * @param {Number} length 
     * @param {String} oblpnNbr 
     * @param {Number} width 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.shipOblpn 
     * @param {String} opts.shippingLocation 
     * @param {Number} opts.volume 
     * @param {Number} opts.weight 
     * @param {module:api/DefaultApi~updateOBLPNDimensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOBLPNDimensions = function(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'calcVolFlg' is set
      if (calcVolFlg === undefined || calcVolFlg === null) {
        throw new Error("Missing the required parameter 'calcVolFlg' when calling updateOBLPNDimensions");
      }

      // verify the required parameter 'companyCode' is set
      if (companyCode === undefined || companyCode === null) {
        throw new Error("Missing the required parameter 'companyCode' when calling updateOBLPNDimensions");
      }

      // verify the required parameter 'facilityCode' is set
      if (facilityCode === undefined || facilityCode === null) {
        throw new Error("Missing the required parameter 'facilityCode' when calling updateOBLPNDimensions");
      }

      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling updateOBLPNDimensions");
      }

      // verify the required parameter 'length' is set
      if (length === undefined || length === null) {
        throw new Error("Missing the required parameter 'length' when calling updateOBLPNDimensions");
      }

      // verify the required parameter 'oblpnNbr' is set
      if (oblpnNbr === undefined || oblpnNbr === null) {
        throw new Error("Missing the required parameter 'oblpnNbr' when calling updateOBLPNDimensions");
      }

      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling updateOBLPNDimensions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'calc_vol_flg': calcVolFlg,
        'company_code': companyCode,
        'facility_code': facilityCode,
        'height': height,
        'length': length,
        'oblpn_nbr': oblpnNbr,
        'ship_oblpn': opts['shipOblpn'],
        'shipping_location': opts['shippingLocation'],
        'volume': opts['volume'],
        'weight': opts['weight'],
        'width': width
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/update_oblpn_dims/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOBLPNTrackingNumber operation.
     * @callback module:api/DefaultApi~updateOBLPNTrackingNumberCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update OBLPN Tracking Number
     * 
     * @param {String} companyCode 
     * @param {String} facilityCode 
     * @param {String} oblpnNbr 
     * @param {String} trackingNbr 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dryIceWeight 
     * @param {String} opts.estimatedDeliveryTime 
     * @param {String} opts.masterTrackingNbr 
     * @param {String} opts.rate 
     * @param {String} opts.shipViaCode 
     * @param {Number} opts.weight 
     * @param {module:api/DefaultApi~updateOBLPNTrackingNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOBLPNTrackingNumber = function(companyCode, facilityCode, oblpnNbr, trackingNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyCode' is set
      if (companyCode === undefined || companyCode === null) {
        throw new Error("Missing the required parameter 'companyCode' when calling updateOBLPNTrackingNumber");
      }

      // verify the required parameter 'facilityCode' is set
      if (facilityCode === undefined || facilityCode === null) {
        throw new Error("Missing the required parameter 'facilityCode' when calling updateOBLPNTrackingNumber");
      }

      // verify the required parameter 'oblpnNbr' is set
      if (oblpnNbr === undefined || oblpnNbr === null) {
        throw new Error("Missing the required parameter 'oblpnNbr' when calling updateOBLPNTrackingNumber");
      }

      // verify the required parameter 'trackingNbr' is set
      if (trackingNbr === undefined || trackingNbr === null) {
        throw new Error("Missing the required parameter 'trackingNbr' when calling updateOBLPNTrackingNumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': companyCode,
        'dry_ice_weight': opts['dryIceWeight'],
        'estimated_delivery_time': opts['estimatedDeliveryTime'],
        'facility_code': facilityCode,
        'master_tracking_nbr': opts['masterTrackingNbr'],
        'oblpn_nbr': oblpnNbr,
        'rate': opts['rate'],
        'ship_via_code': opts['shipViaCode'],
        'tracking_nbr': trackingNbr,
        'weight': opts['weight']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/update_oblpn_tracing_nbr/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOutputInterface operation.
     * @callback module:api/DefaultApi~updateOutputInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Output Interface
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyCode 
     * @param {String} opts.custIntlCode 
     * @param {String} opts.facilityCode 
     * @param {String} opts.filename 
     * @param {String} opts.interfaceTypeCode 
     * @param {String} opts.message 
     * @param {Boolean} opts.runOutputInterfaceFlg 
     * @param {Number} opts.statusId 
     * @param {module:api/DefaultApi~updateOutputInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOutputInterface = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_code': opts['companyCode'],
        'cust_intl_code': opts['custIntlCode'],
        'facility_code': opts['facilityCode'],
        'filename': opts['filename'],
        'interface_type_code': opts['interfaceTypeCode'],
        'message': opts['message'],
        'run_output_interface_flg': opts['runOutputInterfaceFlg'],
        'status_id': opts['statusId']
      };

      var authNames = ['basic'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/update_output_interface/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
