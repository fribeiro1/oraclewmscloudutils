/*
 * Integration API
 * This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationApi);
  }
}(this, function(expect, IntegrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IntegrationApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('assignOBLPNtoLoad', function() {
        it('should call assignOBLPNtoLoad successfully', function(done) {
          // TODO: uncomment, update parameter values for assignOBLPNtoLoad call and complete the assertions
          /*
          var loadNbr = "loadNbr_example";
          var oblpnNbr = "oblpnNbr_example";
          var opts = {};
          opts.carrierCode = "carrierCode_example";
          opts.companyCode = "companyCode_example";
          opts.delimiter = "delimiter_example";
          opts.facilityCode = "facilityCode_example";
          opts.reassignLoadFlg = true;
          opts.requireSpecificOblpnStatus = 56;
          opts.trailerNbr = "trailerNbr_example";

          instance.assignOBLPNtoLoad(loadNbr, oblpnNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('assignandLoadLPN', function() {
        it('should call assignandLoadLPN successfully', function(done) {
          // TODO: uncomment, update parameter values for assignandLoadLPN call and complete the assertions
          /*
          var loadNbr = "loadNbr_example";
          var oblpnNbr = "oblpnNbr_example";
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.dockDoorNbr = "dockDoorNbr_example";
          opts.facilityCode = "facilityCode_example";
          opts.oblpnWeight = 8.14;
          opts.palletNbr = "palletNbr_example";
          opts.trailerNbr = "trailerNbr_example";

          instance.assignandLoadLPN(loadNbr, oblpnNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createLPN', function() {
        it('should call createLPN successfully', function(done) {
          // TODO: uncomment, update parameter values for createLPN call and complete the assertions
          /*
          var lpnNbr = "lpnNbr_example";
          var qty = 56;
          var opts = {};
          opts.batchNumber = "batchNumber_example";
          opts.companyCode = "companyCode_example";
          opts.destFacilityCode = "destFacilityCode_example";
          opts.dropLocnBarcode = "dropLocnBarcode_example";
          opts.expiryDate = "expiryDate_example";
          opts.facilityCode = "facilityCode_example";
          opts.itemAlternateCode = "itemAlternateCode_example";
          opts.itemBarcode = "itemBarcode_example";
          opts.lockCode = "lockCode_example";
          opts.lpnWeight = 8.14;
          opts.orderType = "orderType_example";
          opts.xdockLpnFlg = true;

          instance.createLPN(lpnNbr, qty, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('divertConfirm', function() {
        it('should call divertConfirm successfully', function(done) {
          // TODO: uncomment, update parameter values for divertConfirm call and complete the assertions
          /*
          var opts = {};
          opts.flatData = "flatData_example";
          opts.xmlData = "xmlData_example";

          instance.divertConfirm(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityUpdate', function() {
        it('should call entityUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for entityUpdate call and complete the assertions
          /*
          var entityName = "entityName_example";
          var key = "key_example";
          var sequenceNumber = "sequenceNumber_example";

          instance.entityUpdate(entityName, key, sequenceNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('extendedProperty', function() {
        it('should call extendedProperty successfully', function(done) {
          // TODO: uncomment, update parameter values for extendedProperty call and complete the assertions
          /*
          var entityName = "entityName_example";
          var extendedProperty = "extendedProperty_example";
          var key = "key_example";
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.facilityCode = "facilityCode_example";

          instance.extendedProperty(entityName, extendedProperty, key, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fromMHEDistributionPack', function() {
        it('should call fromMHEDistributionPack successfully', function(done) {
          // TODO: uncomment, update parameter values for fromMHEDistributionPack call and complete the assertions
          /*
          var opts = {};
          opts.xmlData = "xmlData_example";

          instance.fromMHEDistributionPack(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fromMHEDistributionShort', function() {
        it('should call fromMHEDistributionShort successfully', function(done) {
          // TODO: uncomment, update parameter values for fromMHEDistributionShort call and complete the assertions
          /*
          var opts = {};
          opts.flatData = "flatData_example";
          opts.xmlData = "xmlData_example";

          instance.fromMHEDistributionShort(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNextNumbers', function() {
        it('should call getNextNumbers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNextNumbers call and complete the assertions
          /*
          var counterCode = "counterCode_example";
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.count = 56;
          opts.facilityCode = "facilityCode_example";

          instance.getNextNumbers(counterCode, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStatus', function() {
        it('should call getStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getStatus call and complete the assertions
          /*
          var entity = "entity_example";
          var key = "key_example";
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.facilityCode = "facilityCode_example";

          instance.getStatus(entity, key, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('inductLPN', function() {
        it('should call inductLPN successfully', function(done) {
          // TODO: uncomment, update parameter values for inductLPN call and complete the assertions
          /*
          var opts = {};
          opts.flatData = "flatData_example";
          opts.xmlData = "xmlData_example";

          instance.inductLPN(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initStageInterface', function() {
        it('should call initStageInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for initStageInterface call and complete the assertions
          /*
          var opts = {};
          opts.async = true;
          opts.entity = "entity_example";
          opts.flatData = "flatData_example";
          opts.validateXml = true;
          opts.xmlData = "xmlData_example";

          instance.initStageInterface(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('lockUnlockLPN', function() {
        it('should call lockUnlockLPN successfully', function(done) {
          // TODO: uncomment, update parameter values for lockUnlockLPN call and complete the assertions
          /*
          var opts = {};
          opts.action = "action_example";
          opts.companyCode = "companyCode_example";
          opts.facilityCode = "facilityCode_example";
          opts.lockCode = "lockCode_example";
          opts.lpnNbr = "lpnNbr_example";
          opts.removeLockFromShipmentDtlFlg = true;

          instance.lockUnlockLPN(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('objectInquiry', function() {
        it('should call objectInquiry successfully', function(done) {
          // TODO: uncomment, update parameter values for objectInquiry call and complete the assertions
          /*
          var entity = "entity_example";
          var key = "key_example";
          var companyCode = "companyCode_example";
          var facilityCode = "facilityCode_example";
          var opts = {};
          opts.minimize = "minimize_example";

          instance.objectInquiry(entity, key, companyCode, facilityCode, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pickConfirm', function() {
        it('should call pickConfirm successfully', function(done) {
          // TODO: uncomment, update parameter values for pickConfirm call and complete the assertions
          /*
          var opts = {};
          opts.flatData = "flatData_example";
          opts.xmlData = "xmlData_example";

          instance.pickConfirm(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('receiveLPN', function() {
        it('should call receiveLPN successfully', function(done) {
          // TODO: uncomment, update parameter values for receiveLPN call and complete the assertions
          /*
          var lpnNbr = "lpnNbr_example";
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.facilityCode = "facilityCode_example";
          opts.rcvdTrailerNbr = "rcvdTrailerNbr_example";
          opts.receivedTs = "receivedTs_example";
          opts.receivingLocation = "receivingLocation_example";
          opts.xdockLpnFlg = true;
          opts.xmlData = "xmlData_example";

          instance.receiveLPN(lpnNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runMHEStageInterface', function() {
        it('should call runMHEStageInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for runMHEStageInterface call and complete the assertions
          /*
          var companyCode = "companyCode_example";
          var entity = "entity_example";
          var facilityCode = "facilityCode_example";
          var mheVendorCode = "mheVendorCode_example";
          var opts = {};
          opts.pythonFunction = "pythonFunction_example";

          instance.runMHEStageInterface(companyCode, entity, facilityCode, mheVendorCode, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runStageInterface', function() {
        it('should call runStageInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for runStageInterface call and complete the assertions
          /*
          var companyCode = "companyCode_example";
          var entity = "entity_example";
          var facilityCode = "facilityCode_example";
          var fileGroupNbr = "fileGroupNbr_example";
          var opts = {};
          opts.async = true;

          instance.runStageInterface(companyCode, entity, facilityCode, fileGroupNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipOBLPN', function() {
        it('should call shipOBLPN successfully', function(done) {
          // TODO: uncomment, update parameter values for shipOBLPN call and complete the assertions
          /*
          var companyCode = "companyCode_example";
          var facilityCode = "facilityCode_example";
          var locnBarcode = "locnBarcode_example";
          var oblpnNbr = "oblpnNbr_example";
          var opts = {};
          opts.outputFileToGenerate = "outputFileToGenerate_example";

          instance.shipOBLPN(companyCode, facilityCode, locnBarcode, oblpnNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateActiveInventory', function() {
        it('should call updateActiveInventory successfully', function(done) {
          // TODO: uncomment, update parameter values for updateActiveInventory call and complete the assertions
          /*
          var locationBarcode = "locationBarcode_example";
          var reasonCode = "reasonCode_example";
          var opts = {};
          opts.actualQty = 8.14;
          opts.adjustmentQty = 8.14;
          opts.batchNumber = "batchNumber_example";
          opts.companyCode = "companyCode_example";
          opts.expiryData = "expiryData_example";
          opts.facilityCode = "facilityCode_example";
          opts.invnAttrA = "invnAttrA_example";
          opts.invnAttrB = "invnAttrB_example";
          opts.invnAttrC = "invnAttrC_example";
          opts.invnAttrD = "invnAttrD_example";
          opts.invnAttrE = "invnAttrE_example";
          opts.invnAttrF = "invnAttrF_example";
          opts.invnAttrG = "invnAttrG_example";
          opts.itemAlternateCode = "itemAlternateCode_example";
          opts.itemBarcode = "itemBarcode_example";
          opts.itemCode = "itemCode_example";
          opts.locnCapacityCheckFlg = true;

          instance.updateActiveInventory(locationBarcode, reasonCode, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCarrierLPNLabel', function() {
        it('should call updateCarrierLPNLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCarrierLPNLabel call and complete the assertions
          /*
          var label = "label_example";
          var oblpnNbr = "oblpnNbr_example";
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.facilityCode = "facilityCode_example";

          instance.updateCarrierLPNLabel(label, oblpnNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOBLPNDimensions', function() {
        it('should call updateOBLPNDimensions successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOBLPNDimensions call and complete the assertions
          /*
          var calcVolFlg = true;
          var companyCode = "companyCode_example";
          var facilityCode = "facilityCode_example";
          var height = 8.14;
          var length = 8.14;
          var oblpnNbr = "oblpnNbr_example";
          var width = 8.14;
          var opts = {};
          opts.shipOblpn = true;
          opts.shippingLocation = "shippingLocation_example";
          opts.volume = 8.14;
          opts.weight = 8.14;

          instance.updateOBLPNDimensions(calcVolFlg, companyCode, facilityCode, height, length, oblpnNbr, width, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOBLPNTrackingNumber', function() {
        it('should call updateOBLPNTrackingNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOBLPNTrackingNumber call and complete the assertions
          /*
          var companyCode = "companyCode_example";
          var facilityCode = "facilityCode_example";
          var oblpnNbr = "oblpnNbr_example";
          var trackingNbr = "trackingNbr_example";
          var opts = {};
          opts.dryIceWeight = 8.14;
          opts.estimatedDeliveryTime = "estimatedDeliveryTime_example";
          opts.masterTrackingNbr = "masterTrackingNbr_example";
          opts.rate = "rate_example";
          opts.shipViaCode = "shipViaCode_example";
          opts.weight = 8.14;

          instance.updateOBLPNTrackingNumber(companyCode, facilityCode, oblpnNbr, trackingNbr, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOutputInterface', function() {
        it('should call updateOutputInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOutputInterface call and complete the assertions
          /*
          var opts = {};
          opts.companyCode = "companyCode_example";
          opts.custIntlCode = "custIntlCode_example";
          opts.facilityCode = "facilityCode_example";
          opts.filename = "filename_example";
          opts.interfaceTypeCode = "interfaceTypeCode_example";
          opts.message = "message_example";
          opts.runOutputInterfaceFlg = true;
          opts.statusId = 56;

          instance.updateOutputInterface(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
