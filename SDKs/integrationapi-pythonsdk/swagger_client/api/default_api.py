# coding: utf-8

"""
    Integration API

    This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_oblp_nto_load(self, load_nbr, oblpn_nbr, **kwargs):  # noqa: E501
        """Assign OBLPN to Load  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_oblp_nto_load(load_nbr, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str load_nbr:  (required)
        :param str oblpn_nbr:  (required)
        :param str carrier_code: 
        :param str company_code: 
        :param str delimiter: 
        :param str facility_code: 
        :param bool reassign_load_flg: 
        :param int require_specific_oblpn_status: 
        :param str trailer_nbr: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_oblp_nto_load_with_http_info(load_nbr, oblpn_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_oblp_nto_load_with_http_info(load_nbr, oblpn_nbr, **kwargs)  # noqa: E501
            return data

    def assign_oblp_nto_load_with_http_info(self, load_nbr, oblpn_nbr, **kwargs):  # noqa: E501
        """Assign OBLPN to Load  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_oblp_nto_load_with_http_info(load_nbr, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str load_nbr:  (required)
        :param str oblpn_nbr:  (required)
        :param str carrier_code: 
        :param str company_code: 
        :param str delimiter: 
        :param str facility_code: 
        :param bool reassign_load_flg: 
        :param int require_specific_oblpn_status: 
        :param str trailer_nbr: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['load_nbr', 'oblpn_nbr', 'carrier_code', 'company_code', 'delimiter', 'facility_code', 'reassign_load_flg', 'require_specific_oblpn_status', 'trailer_nbr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_oblp_nto_load" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'load_nbr' is set
        if ('load_nbr' not in params or
                params['load_nbr'] is None):
            raise ValueError("Missing the required parameter `load_nbr` when calling `assign_oblp_nto_load`")  # noqa: E501
        # verify the required parameter 'oblpn_nbr' is set
        if ('oblpn_nbr' not in params or
                params['oblpn_nbr'] is None):
            raise ValueError("Missing the required parameter `oblpn_nbr` when calling `assign_oblp_nto_load`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'carrier_code' in params:
            form_params.append(('carrier_code', params['carrier_code']))  # noqa: E501
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'delimiter' in params:
            form_params.append(('delimiter', params['delimiter']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'load_nbr' in params:
            form_params.append(('load_nbr', params['load_nbr']))  # noqa: E501
        if 'oblpn_nbr' in params:
            form_params.append(('oblpn_nbr', params['oblpn_nbr']))  # noqa: E501
        if 'reassign_load_flg' in params:
            form_params.append(('reassign_load_flg', params['reassign_load_flg']))  # noqa: E501
        if 'require_specific_oblpn_status' in params:
            form_params.append(('require_specific_oblpn_status', params['require_specific_oblpn_status']))  # noqa: E501
        if 'trailer_nbr' in params:
            form_params.append(('trailer_nbr', params['trailer_nbr']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/assign_oblpn_to_load/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignand_load_lpn(self, load_nbr, oblpn_nbr, **kwargs):  # noqa: E501
        """Assign and Load LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignand_load_lpn(load_nbr, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str load_nbr:  (required)
        :param str oblpn_nbr:  (required)
        :param str company_code: 
        :param str dock_door_nbr: 
        :param str facility_code: 
        :param float oblpn_weight: 
        :param str pallet_nbr: 
        :param str trailer_nbr: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignand_load_lpn_with_http_info(load_nbr, oblpn_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.assignand_load_lpn_with_http_info(load_nbr, oblpn_nbr, **kwargs)  # noqa: E501
            return data

    def assignand_load_lpn_with_http_info(self, load_nbr, oblpn_nbr, **kwargs):  # noqa: E501
        """Assign and Load LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignand_load_lpn_with_http_info(load_nbr, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str load_nbr:  (required)
        :param str oblpn_nbr:  (required)
        :param str company_code: 
        :param str dock_door_nbr: 
        :param str facility_code: 
        :param float oblpn_weight: 
        :param str pallet_nbr: 
        :param str trailer_nbr: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['load_nbr', 'oblpn_nbr', 'company_code', 'dock_door_nbr', 'facility_code', 'oblpn_weight', 'pallet_nbr', 'trailer_nbr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignand_load_lpn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'load_nbr' is set
        if ('load_nbr' not in params or
                params['load_nbr'] is None):
            raise ValueError("Missing the required parameter `load_nbr` when calling `assignand_load_lpn`")  # noqa: E501
        # verify the required parameter 'oblpn_nbr' is set
        if ('oblpn_nbr' not in params or
                params['oblpn_nbr'] is None):
            raise ValueError("Missing the required parameter `oblpn_nbr` when calling `assignand_load_lpn`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'dock_door_nbr' in params:
            form_params.append(('dock_door_nbr', params['dock_door_nbr']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'load_nbr' in params:
            form_params.append(('load_nbr', params['load_nbr']))  # noqa: E501
        if 'oblpn_nbr' in params:
            form_params.append(('oblpn_nbr', params['oblpn_nbr']))  # noqa: E501
        if 'oblpn_weight' in params:
            form_params.append(('oblpn_weight', params['oblpn_weight']))  # noqa: E501
        if 'pallet_nbr' in params:
            form_params.append(('pallet_nbr', params['pallet_nbr']))  # noqa: E501
        if 'trailer_nbr' in params:
            form_params.append(('trailer_nbr', params['trailer_nbr']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/assign_and_load_oblpn/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_lpn(self, lpn_nbr, qty, **kwargs):  # noqa: E501
        """Create LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lpn(lpn_nbr, qty, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lpn_nbr:  (required)
        :param int qty:  (required)
        :param str batch_number: 
        :param str company_code: 
        :param str dest_facility_code: 
        :param str drop_locn_barcode: 
        :param str expiry_date: 
        :param str facility_code: 
        :param str item_alternate_code: 
        :param str item_barcode: 
        :param str lock_code: 
        :param float lpn_weight: 
        :param str order_type: 
        :param bool xdock_lpn_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_lpn_with_http_info(lpn_nbr, qty, **kwargs)  # noqa: E501
        else:
            (data) = self.create_lpn_with_http_info(lpn_nbr, qty, **kwargs)  # noqa: E501
            return data

    def create_lpn_with_http_info(self, lpn_nbr, qty, **kwargs):  # noqa: E501
        """Create LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lpn_with_http_info(lpn_nbr, qty, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lpn_nbr:  (required)
        :param int qty:  (required)
        :param str batch_number: 
        :param str company_code: 
        :param str dest_facility_code: 
        :param str drop_locn_barcode: 
        :param str expiry_date: 
        :param str facility_code: 
        :param str item_alternate_code: 
        :param str item_barcode: 
        :param str lock_code: 
        :param float lpn_weight: 
        :param str order_type: 
        :param bool xdock_lpn_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lpn_nbr', 'qty', 'batch_number', 'company_code', 'dest_facility_code', 'drop_locn_barcode', 'expiry_date', 'facility_code', 'item_alternate_code', 'item_barcode', 'lock_code', 'lpn_weight', 'order_type', 'xdock_lpn_flg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lpn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lpn_nbr' is set
        if ('lpn_nbr' not in params or
                params['lpn_nbr'] is None):
            raise ValueError("Missing the required parameter `lpn_nbr` when calling `create_lpn`")  # noqa: E501
        # verify the required parameter 'qty' is set
        if ('qty' not in params or
                params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `create_lpn`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'batch_number' in params:
            form_params.append(('batch_number', params['batch_number']))  # noqa: E501
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'dest_facility_code' in params:
            form_params.append(('dest_facility_code', params['dest_facility_code']))  # noqa: E501
        if 'drop_locn_barcode' in params:
            form_params.append(('drop_locn_barcode', params['drop_locn_barcode']))  # noqa: E501
        if 'expiry_date' in params:
            form_params.append(('expiry_date', params['expiry_date']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'item_alternate_code' in params:
            form_params.append(('item_alternate_code', params['item_alternate_code']))  # noqa: E501
        if 'item_barcode' in params:
            form_params.append(('item_barcode', params['item_barcode']))  # noqa: E501
        if 'lock_code' in params:
            form_params.append(('lock_code', params['lock_code']))  # noqa: E501
        if 'lpn_nbr' in params:
            form_params.append(('lpn_nbr', params['lpn_nbr']))  # noqa: E501
        if 'lpn_weight' in params:
            form_params.append(('lpn_weight', params['lpn_weight']))  # noqa: E501
        if 'order_type' in params:
            form_params.append(('order_type', params['order_type']))  # noqa: E501
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'xdock_lpn_flg' in params:
            form_params.append(('xdock_lpn_flg', params['xdock_lpn_flg']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/create_lpn/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def divert_confirm(self, **kwargs):  # noqa: E501
        """Divert Confirm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.divert_confirm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.divert_confirm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.divert_confirm_with_http_info(**kwargs)  # noqa: E501
            return data

    def divert_confirm_with_http_info(self, **kwargs):  # noqa: E501
        """Divert Confirm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.divert_confirm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flat_data', 'xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method divert_confirm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'flat_data' in params:
            form_params.append(('flat_data', params['flat_data']))  # noqa: E501
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/divert_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entity_update(self, entity_name, key, sequence_number, **kwargs):  # noqa: E501
        """Entity Update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entity_update(entity_name, key, sequence_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_name:  (required)
        :param str key:  (required)
        :param str sequence_number:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entity_update_with_http_info(entity_name, key, sequence_number, **kwargs)  # noqa: E501
        else:
            (data) = self.entity_update_with_http_info(entity_name, key, sequence_number, **kwargs)  # noqa: E501
            return data

    def entity_update_with_http_info(self, entity_name, key, sequence_number, **kwargs):  # noqa: E501
        """Entity Update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entity_update_with_http_info(entity_name, key, sequence_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_name:  (required)
        :param str key:  (required)
        :param str sequence_number:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_name', 'key', 'sequence_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entity_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_name' is set
        if ('entity_name' not in params or
                params['entity_name'] is None):
            raise ValueError("Missing the required parameter `entity_name` when calling `entity_update`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `entity_update`")  # noqa: E501
        # verify the required parameter 'sequence_number' is set
        if ('sequence_number' not in params or
                params['sequence_number'] is None):
            raise ValueError("Missing the required parameter `sequence_number` when calling `entity_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_name' in params:
            path_params['entity_name'] = params['entity_name']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'sequence_number' in params:
            path_params['sequence_number'] = params['sequence_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/entity/{entity_name}/{key}/{sequence_number}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extended_property(self, entity_name, extended_property, key, **kwargs):  # noqa: E501
        """Extended Property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extended_property(entity_name, extended_property, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_name:  (required)
        :param str extended_property:  (required)
        :param str key:  (required)
        :param str company_code: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extended_property_with_http_info(entity_name, extended_property, key, **kwargs)  # noqa: E501
        else:
            (data) = self.extended_property_with_http_info(entity_name, extended_property, key, **kwargs)  # noqa: E501
            return data

    def extended_property_with_http_info(self, entity_name, extended_property, key, **kwargs):  # noqa: E501
        """Extended Property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extended_property_with_http_info(entity_name, extended_property, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_name:  (required)
        :param str extended_property:  (required)
        :param str key:  (required)
        :param str company_code: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_name', 'extended_property', 'key', 'company_code', 'facility_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extended_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_name' is set
        if ('entity_name' not in params or
                params['entity_name'] is None):
            raise ValueError("Missing the required parameter `entity_name` when calling `extended_property`")  # noqa: E501
        # verify the required parameter 'extended_property' is set
        if ('extended_property' not in params or
                params['extended_property'] is None):
            raise ValueError("Missing the required parameter `extended_property` when calling `extended_property`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `extended_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_name' in params:
            path_params['entity_name'] = params['entity_name']  # noqa: E501
        if 'extended_property' in params:
            path_params['extended_property'] = params['extended_property']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'company_code' in params:
            query_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            query_params.append(('facility_code', params['facility_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/extended_property/{entity_name}/{key}/{extended_property}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def from_mhe_distribution_pack(self, **kwargs):  # noqa: E501
        """From MHE Distribution Pack  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.from_mhe_distribution_pack(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.from_mhe_distribution_pack_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.from_mhe_distribution_pack_with_http_info(**kwargs)  # noqa: E501
            return data

    def from_mhe_distribution_pack_with_http_info(self, **kwargs):  # noqa: E501
        """From MHE Distribution Pack  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.from_mhe_distribution_pack_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method from_mhe_distribution_pack" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/from_mhe_distribution_pack/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def from_mhe_distribution_short(self, **kwargs):  # noqa: E501
        """From MHE Distribution Short  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.from_mhe_distribution_short(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.from_mhe_distribution_short_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.from_mhe_distribution_short_with_http_info(**kwargs)  # noqa: E501
            return data

    def from_mhe_distribution_short_with_http_info(self, **kwargs):  # noqa: E501
        """From MHE Distribution Short  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.from_mhe_distribution_short_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flat_data', 'xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method from_mhe_distribution_short" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'flat_data' in params:
            form_params.append(('flat_data', params['flat_data']))  # noqa: E501
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/from_mhe_distribution_short/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_next_numbers(self, counter_code, **kwargs):  # noqa: E501
        """Get Next Numbers  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_next_numbers(counter_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str counter_code:  (required)
        :param str company_code: 
        :param int count: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_next_numbers_with_http_info(counter_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_next_numbers_with_http_info(counter_code, **kwargs)  # noqa: E501
            return data

    def get_next_numbers_with_http_info(self, counter_code, **kwargs):  # noqa: E501
        """Get Next Numbers  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_next_numbers_with_http_info(counter_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str counter_code:  (required)
        :param str company_code: 
        :param int count: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['counter_code', 'company_code', 'count', 'facility_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_next_numbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'counter_code' is set
        if ('counter_code' not in params or
                params['counter_code'] is None):
            raise ValueError("Missing the required parameter `counter_code` when calling `get_next_numbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'counter_code' in params:
            form_params.append(('counter_code', params['counter_code']))  # noqa: E501
        if 'count' in params:
            form_params.append(('count', params['count']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/get_next_numbers/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status(self, entity, key, **kwargs):  # noqa: E501
        """Get Status  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status(entity, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity:  (required)
        :param str key:  (required)
        :param str company_code: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_with_http_info(entity, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_with_http_info(entity, key, **kwargs)  # noqa: E501
            return data

    def get_status_with_http_info(self, entity, key, **kwargs):  # noqa: E501
        """Get Status  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_with_http_info(entity, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity:  (required)
        :param str key:  (required)
        :param str company_code: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'key', 'company_code', 'facility_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'key' in params:
            form_params.append(('key', params['key']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/get_status/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def induct_lpn(self, **kwargs):  # noqa: E501
        """Induct LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.induct_lpn(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.induct_lpn_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.induct_lpn_with_http_info(**kwargs)  # noqa: E501
            return data

    def induct_lpn_with_http_info(self, **kwargs):  # noqa: E501
        """Induct LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.induct_lpn_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flat_data', 'xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method induct_lpn" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'flat_data' in params:
            form_params.append(('flat_data', params['flat_data']))  # noqa: E501
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/induct_lpn/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def init_stage_interface(self, **kwargs):  # noqa: E501
        """Init Stage Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_stage_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool _async: 
        :param str entity: 
        :param str flat_data: 
        :param bool validate_xml: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.init_stage_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.init_stage_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def init_stage_interface_with_http_info(self, **kwargs):  # noqa: E501
        """Init Stage Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_stage_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool _async: 
        :param str entity: 
        :param str flat_data: 
        :param bool validate_xml: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_async', 'entity', 'flat_data', 'validate_xml', 'xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method init_stage_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_async' in params:
            form_params.append(('async', params['_async']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'flat_data' in params:
            form_params.append(('flat_data', params['flat_data']))  # noqa: E501
        if 'validate_xml' in params:
            form_params.append(('validate_xml', params['validate_xml']))  # noqa: E501
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/init_stage_interface/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lock_unlock_lpn(self, **kwargs):  # noqa: E501
        """Lock/Unlock LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_unlock_lpn(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: 
        :param str company_code: 
        :param str facility_code: 
        :param str lock_code: 
        :param str lpn_nbr: 
        :param bool remove_lock_from_shipment_dtl_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lock_unlock_lpn_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.lock_unlock_lpn_with_http_info(**kwargs)  # noqa: E501
            return data

    def lock_unlock_lpn_with_http_info(self, **kwargs):  # noqa: E501
        """Lock/Unlock LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_unlock_lpn_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: 
        :param str company_code: 
        :param str facility_code: 
        :param str lock_code: 
        :param str lpn_nbr: 
        :param bool remove_lock_from_shipment_dtl_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'company_code', 'facility_code', 'lock_code', 'lpn_nbr', 'remove_lock_from_shipment_dtl_flg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_unlock_lpn" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'lock_code' in params:
            form_params.append(('lock_code', params['lock_code']))  # noqa: E501
        if 'lpn_nbr' in params:
            form_params.append(('lpn_nbr', params['lpn_nbr']))  # noqa: E501
        if 'remove_lock_from_shipment_dtl_flg' in params:
            form_params.append(('remove_lock_from_shipment_dtl_flg', params['remove_lock_from_shipment_dtl_flg']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/lock_unlock_lpn/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def object_inquiry(self, entity, key, company_code, facility_code, **kwargs):  # noqa: E501
        """Object Inquiry  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.object_inquiry(entity, key, company_code, facility_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity:  (required)
        :param str key:  (required)
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param str minimize: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.object_inquiry_with_http_info(entity, key, company_code, facility_code, **kwargs)  # noqa: E501
        else:
            (data) = self.object_inquiry_with_http_info(entity, key, company_code, facility_code, **kwargs)  # noqa: E501
            return data

    def object_inquiry_with_http_info(self, entity, key, company_code, facility_code, **kwargs):  # noqa: E501
        """Object Inquiry  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.object_inquiry_with_http_info(entity, key, company_code, facility_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity:  (required)
        :param str key:  (required)
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param str minimize: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'key', 'company_code', 'facility_code', 'minimize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_inquiry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `object_inquiry`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `object_inquiry`")  # noqa: E501
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params or
                params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `object_inquiry`")  # noqa: E501
        # verify the required parameter 'facility_code' is set
        if ('facility_code' not in params or
                params['facility_code'] is None):
            raise ValueError("Missing the required parameter `facility_code` when calling `object_inquiry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity' in params:
            path_params['entity'] = params['entity']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'company_code' in params:
            query_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            query_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'minimize' in params:
            query_params.append(('minimize', params['minimize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/entity/{entity}/{key}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pick_confirm(self, **kwargs):  # noqa: E501
        """Pick Confirm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_confirm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pick_confirm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pick_confirm_with_http_info(**kwargs)  # noqa: E501
            return data

    def pick_confirm_with_http_info(self, **kwargs):  # noqa: E501
        """Pick Confirm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_confirm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flat_data: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flat_data', 'xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pick_confirm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'flat_data' in params:
            form_params.append(('flat_data', params['flat_data']))  # noqa: E501
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/pick_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def receive_lpn(self, lpn_nbr, **kwargs):  # noqa: E501
        """Receive LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.receive_lpn(lpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lpn_nbr:  (required)
        :param str company_code: 
        :param str facility_code: 
        :param str rcvd_trailer_nbr: 
        :param str received_ts: 
        :param str receiving_location: 
        :param bool xdock_lpn_flg: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.receive_lpn_with_http_info(lpn_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.receive_lpn_with_http_info(lpn_nbr, **kwargs)  # noqa: E501
            return data

    def receive_lpn_with_http_info(self, lpn_nbr, **kwargs):  # noqa: E501
        """Receive LPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.receive_lpn_with_http_info(lpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lpn_nbr:  (required)
        :param str company_code: 
        :param str facility_code: 
        :param str rcvd_trailer_nbr: 
        :param str received_ts: 
        :param str receiving_location: 
        :param bool xdock_lpn_flg: 
        :param str xml_data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lpn_nbr', 'company_code', 'facility_code', 'rcvd_trailer_nbr', 'received_ts', 'receiving_location', 'xdock_lpn_flg', 'xml_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method receive_lpn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lpn_nbr' is set
        if ('lpn_nbr' not in params or
                params['lpn_nbr'] is None):
            raise ValueError("Missing the required parameter `lpn_nbr` when calling `receive_lpn`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'lpn_nbr' in params:
            form_params.append(('lpn_nbr', params['lpn_nbr']))  # noqa: E501
        if 'rcvd_trailer_nbr' in params:
            form_params.append(('rcvd_trailer_nbr', params['rcvd_trailer_nbr']))  # noqa: E501
        if 'received_ts' in params:
            form_params.append(('received_ts', params['received_ts']))  # noqa: E501
        if 'receiving_location' in params:
            form_params.append(('receiving_location', params['receiving_location']))  # noqa: E501
        if 'xdock_lpn_flg' in params:
            form_params.append(('xdock_lpn_flg', params['xdock_lpn_flg']))  # noqa: E501
        if 'xml_data' in params:
            form_params.append(('xml_data', params['xml_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/receive_lpn/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_mhe_stage_interface(self, company_code, entity, facility_code, mhe_vendor_code, **kwargs):  # noqa: E501
        """Run MHE Stage Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_mhe_stage_interface(company_code, entity, facility_code, mhe_vendor_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str entity:  (required)
        :param str facility_code:  (required)
        :param str mhe_vendor_code:  (required)
        :param str python_function: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_mhe_stage_interface_with_http_info(company_code, entity, facility_code, mhe_vendor_code, **kwargs)  # noqa: E501
        else:
            (data) = self.run_mhe_stage_interface_with_http_info(company_code, entity, facility_code, mhe_vendor_code, **kwargs)  # noqa: E501
            return data

    def run_mhe_stage_interface_with_http_info(self, company_code, entity, facility_code, mhe_vendor_code, **kwargs):  # noqa: E501
        """Run MHE Stage Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_mhe_stage_interface_with_http_info(company_code, entity, facility_code, mhe_vendor_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str entity:  (required)
        :param str facility_code:  (required)
        :param str mhe_vendor_code:  (required)
        :param str python_function: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_code', 'entity', 'facility_code', 'mhe_vendor_code', 'python_function']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_mhe_stage_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params or
                params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `run_mhe_stage_interface`")  # noqa: E501
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `run_mhe_stage_interface`")  # noqa: E501
        # verify the required parameter 'facility_code' is set
        if ('facility_code' not in params or
                params['facility_code'] is None):
            raise ValueError("Missing the required parameter `facility_code` when calling `run_mhe_stage_interface`")  # noqa: E501
        # verify the required parameter 'mhe_vendor_code' is set
        if ('mhe_vendor_code' not in params or
                params['mhe_vendor_code'] is None):
            raise ValueError("Missing the required parameter `mhe_vendor_code` when calling `run_mhe_stage_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'mhe_vendor_code' in params:
            form_params.append(('mhe_vendor_code', params['mhe_vendor_code']))  # noqa: E501
        if 'python_function' in params:
            form_params.append(('python_function', params['python_function']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/run_mhe_stage_interface/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_stage_interface(self, company_code, entity, facility_code, file_group_nbr, **kwargs):  # noqa: E501
        """Run Stage Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_stage_interface(company_code, entity, facility_code, file_group_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str entity:  (required)
        :param str facility_code:  (required)
        :param str file_group_nbr:  (required)
        :param bool _async: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_stage_interface_with_http_info(company_code, entity, facility_code, file_group_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.run_stage_interface_with_http_info(company_code, entity, facility_code, file_group_nbr, **kwargs)  # noqa: E501
            return data

    def run_stage_interface_with_http_info(self, company_code, entity, facility_code, file_group_nbr, **kwargs):  # noqa: E501
        """Run Stage Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_stage_interface_with_http_info(company_code, entity, facility_code, file_group_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str entity:  (required)
        :param str facility_code:  (required)
        :param str file_group_nbr:  (required)
        :param bool _async: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_code', 'entity', 'facility_code', 'file_group_nbr', '_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_stage_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params or
                params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `run_stage_interface`")  # noqa: E501
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `run_stage_interface`")  # noqa: E501
        # verify the required parameter 'facility_code' is set
        if ('facility_code' not in params or
                params['facility_code'] is None):
            raise ValueError("Missing the required parameter `facility_code` when calling `run_stage_interface`")  # noqa: E501
        # verify the required parameter 'file_group_nbr' is set
        if ('file_group_nbr' not in params or
                params['file_group_nbr'] is None):
            raise ValueError("Missing the required parameter `file_group_nbr` when calling `run_stage_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_async' in params:
            form_params.append(('async', params['_async']))  # noqa: E501
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'file_group_nbr' in params:
            form_params.append(('file_group_nbr', params['file_group_nbr']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/run_stage_interface/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ship_oblpn(self, company_code, facility_code, locn_barcode, oblpn_nbr, **kwargs):  # noqa: E501
        """Ship OBLPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ship_oblpn(company_code, facility_code, locn_barcode, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param str locn_barcode:  (required)
        :param str oblpn_nbr:  (required)
        :param str output_file_to_generate: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ship_oblpn_with_http_info(company_code, facility_code, locn_barcode, oblpn_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.ship_oblpn_with_http_info(company_code, facility_code, locn_barcode, oblpn_nbr, **kwargs)  # noqa: E501
            return data

    def ship_oblpn_with_http_info(self, company_code, facility_code, locn_barcode, oblpn_nbr, **kwargs):  # noqa: E501
        """Ship OBLPN  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ship_oblpn_with_http_info(company_code, facility_code, locn_barcode, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param str locn_barcode:  (required)
        :param str oblpn_nbr:  (required)
        :param str output_file_to_generate: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_code', 'facility_code', 'locn_barcode', 'oblpn_nbr', 'output_file_to_generate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ship_oblpn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params or
                params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `ship_oblpn`")  # noqa: E501
        # verify the required parameter 'facility_code' is set
        if ('facility_code' not in params or
                params['facility_code'] is None):
            raise ValueError("Missing the required parameter `facility_code` when calling `ship_oblpn`")  # noqa: E501
        # verify the required parameter 'locn_barcode' is set
        if ('locn_barcode' not in params or
                params['locn_barcode'] is None):
            raise ValueError("Missing the required parameter `locn_barcode` when calling `ship_oblpn`")  # noqa: E501
        # verify the required parameter 'oblpn_nbr' is set
        if ('oblpn_nbr' not in params or
                params['oblpn_nbr'] is None):
            raise ValueError("Missing the required parameter `oblpn_nbr` when calling `ship_oblpn`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'locn_barcode' in params:
            form_params.append(('locn_barcode', params['locn_barcode']))  # noqa: E501
        if 'oblpn_nbr' in params:
            form_params.append(('oblpn_nbr', params['oblpn_nbr']))  # noqa: E501
        if 'output_file_to_generate' in params:
            form_params.append(('output_file_to_generate', params['output_file_to_generate']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/ship_oblpn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_active_inventory(self, location_barcode, reason_code, **kwargs):  # noqa: E501
        """Update Active Inventory  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_active_inventory(location_barcode, reason_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_barcode:  (required)
        :param str reason_code:  (required)
        :param float actual_qty: 
        :param float adjustment_qty: 
        :param str batch_number: 
        :param str company_code: 
        :param str expiry_data: 
        :param str facility_code: 
        :param str invn_attr_a: 
        :param str invn_attr_b: 
        :param str invn_attr_c: 
        :param str invn_attr_d: 
        :param str invn_attr_e: 
        :param str invn_attr_f: 
        :param str invn_attr_g: 
        :param str item_alternate_code: 
        :param str item_barcode: 
        :param str item_code: 
        :param bool locn_capacity_check_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_active_inventory_with_http_info(location_barcode, reason_code, **kwargs)  # noqa: E501
        else:
            (data) = self.update_active_inventory_with_http_info(location_barcode, reason_code, **kwargs)  # noqa: E501
            return data

    def update_active_inventory_with_http_info(self, location_barcode, reason_code, **kwargs):  # noqa: E501
        """Update Active Inventory  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_active_inventory_with_http_info(location_barcode, reason_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_barcode:  (required)
        :param str reason_code:  (required)
        :param float actual_qty: 
        :param float adjustment_qty: 
        :param str batch_number: 
        :param str company_code: 
        :param str expiry_data: 
        :param str facility_code: 
        :param str invn_attr_a: 
        :param str invn_attr_b: 
        :param str invn_attr_c: 
        :param str invn_attr_d: 
        :param str invn_attr_e: 
        :param str invn_attr_f: 
        :param str invn_attr_g: 
        :param str item_alternate_code: 
        :param str item_barcode: 
        :param str item_code: 
        :param bool locn_capacity_check_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_barcode', 'reason_code', 'actual_qty', 'adjustment_qty', 'batch_number', 'company_code', 'expiry_data', 'facility_code', 'invn_attr_a', 'invn_attr_b', 'invn_attr_c', 'invn_attr_d', 'invn_attr_e', 'invn_attr_f', 'invn_attr_g', 'item_alternate_code', 'item_barcode', 'item_code', 'locn_capacity_check_flg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_active_inventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_barcode' is set
        if ('location_barcode' not in params or
                params['location_barcode'] is None):
            raise ValueError("Missing the required parameter `location_barcode` when calling `update_active_inventory`")  # noqa: E501
        # verify the required parameter 'reason_code' is set
        if ('reason_code' not in params or
                params['reason_code'] is None):
            raise ValueError("Missing the required parameter `reason_code` when calling `update_active_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_barcode' in params:
            path_params['location_barcode'] = params['location_barcode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'actual_qty' in params:
            form_params.append(('actual_qty', params['actual_qty']))  # noqa: E501
        if 'adjustment_qty' in params:
            form_params.append(('adjustment_qty', params['adjustment_qty']))  # noqa: E501
        if 'batch_number' in params:
            form_params.append(('batch_number', params['batch_number']))  # noqa: E501
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'expiry_data' in params:
            form_params.append(('expiry_data', params['expiry_data']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'invn_attr_a' in params:
            form_params.append(('invn_attr_a', params['invn_attr_a']))  # noqa: E501
        if 'invn_attr_b' in params:
            form_params.append(('invn_attr_b', params['invn_attr_b']))  # noqa: E501
        if 'invn_attr_c' in params:
            form_params.append(('invn_attr_c', params['invn_attr_c']))  # noqa: E501
        if 'invn_attr_d' in params:
            form_params.append(('invn_attr_d', params['invn_attr_d']))  # noqa: E501
        if 'invn_attr_e' in params:
            form_params.append(('invn_attr_e', params['invn_attr_e']))  # noqa: E501
        if 'invn_attr_f' in params:
            form_params.append(('invn_attr_f', params['invn_attr_f']))  # noqa: E501
        if 'invn_attr_g' in params:
            form_params.append(('invn_attr_g', params['invn_attr_g']))  # noqa: E501
        if 'item_alternate_code' in params:
            form_params.append(('item_alternate_code', params['item_alternate_code']))  # noqa: E501
        if 'item_barcode' in params:
            form_params.append(('item_barcode', params['item_barcode']))  # noqa: E501
        if 'item_code' in params:
            form_params.append(('item_code', params['item_code']))  # noqa: E501
        if 'locn_capacity_check_flg' in params:
            form_params.append(('locn_capacity_check_flg', params['locn_capacity_check_flg']))  # noqa: E501
        if 'reason_code' in params:
            form_params.append(('reason_code', params['reason_code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/entity/active_inventory/{location_barcode}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_carrier_lpn_label(self, label, oblpn_nbr, **kwargs):  # noqa: E501
        """Update Carrier LPN Label  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_carrier_lpn_label(label, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label:  (required)
        :param str oblpn_nbr:  (required)
        :param str company_code: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_carrier_lpn_label_with_http_info(label, oblpn_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.update_carrier_lpn_label_with_http_info(label, oblpn_nbr, **kwargs)  # noqa: E501
            return data

    def update_carrier_lpn_label_with_http_info(self, label, oblpn_nbr, **kwargs):  # noqa: E501
        """Update Carrier LPN Label  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_carrier_lpn_label_with_http_info(label, oblpn_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label:  (required)
        :param str oblpn_nbr:  (required)
        :param str company_code: 
        :param str facility_code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['label', 'oblpn_nbr', 'company_code', 'facility_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_carrier_lpn_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `update_carrier_lpn_label`")  # noqa: E501
        # verify the required parameter 'oblpn_nbr' is set
        if ('oblpn_nbr' not in params or
                params['oblpn_nbr'] is None):
            raise ValueError("Missing the required parameter `oblpn_nbr` when calling `update_carrier_lpn_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'oblpn_nbr' in params:
            form_params.append(('oblpn_nbr', params['oblpn_nbr']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/update_carrier_lpn_label/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_oblpn_dimensions(self, calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, **kwargs):  # noqa: E501
        """Update OBLPN Dimensions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_oblpn_dimensions(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool calc_vol_flg:  (required)
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param float height:  (required)
        :param float length:  (required)
        :param str oblpn_nbr:  (required)
        :param float width:  (required)
        :param bool ship_oblpn: 
        :param str shipping_location: 
        :param float volume: 
        :param float weight: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_oblpn_dimensions_with_http_info(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, **kwargs)  # noqa: E501
        else:
            (data) = self.update_oblpn_dimensions_with_http_info(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, **kwargs)  # noqa: E501
            return data

    def update_oblpn_dimensions_with_http_info(self, calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, **kwargs):  # noqa: E501
        """Update OBLPN Dimensions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_oblpn_dimensions_with_http_info(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool calc_vol_flg:  (required)
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param float height:  (required)
        :param float length:  (required)
        :param str oblpn_nbr:  (required)
        :param float width:  (required)
        :param bool ship_oblpn: 
        :param str shipping_location: 
        :param float volume: 
        :param float weight: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calc_vol_flg', 'company_code', 'facility_code', 'height', 'length', 'oblpn_nbr', 'width', 'ship_oblpn', 'shipping_location', 'volume', 'weight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_oblpn_dimensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calc_vol_flg' is set
        if ('calc_vol_flg' not in params or
                params['calc_vol_flg'] is None):
            raise ValueError("Missing the required parameter `calc_vol_flg` when calling `update_oblpn_dimensions`")  # noqa: E501
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params or
                params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `update_oblpn_dimensions`")  # noqa: E501
        # verify the required parameter 'facility_code' is set
        if ('facility_code' not in params or
                params['facility_code'] is None):
            raise ValueError("Missing the required parameter `facility_code` when calling `update_oblpn_dimensions`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `update_oblpn_dimensions`")  # noqa: E501
        # verify the required parameter 'length' is set
        if ('length' not in params or
                params['length'] is None):
            raise ValueError("Missing the required parameter `length` when calling `update_oblpn_dimensions`")  # noqa: E501
        # verify the required parameter 'oblpn_nbr' is set
        if ('oblpn_nbr' not in params or
                params['oblpn_nbr'] is None):
            raise ValueError("Missing the required parameter `oblpn_nbr` when calling `update_oblpn_dimensions`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `update_oblpn_dimensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'calc_vol_flg' in params:
            form_params.append(('calc_vol_flg', params['calc_vol_flg']))  # noqa: E501
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'height' in params:
            form_params.append(('height', params['height']))  # noqa: E501
        if 'length' in params:
            form_params.append(('length', params['length']))  # noqa: E501
        if 'oblpn_nbr' in params:
            form_params.append(('oblpn_nbr', params['oblpn_nbr']))  # noqa: E501
        if 'ship_oblpn' in params:
            form_params.append(('ship_oblpn', params['ship_oblpn']))  # noqa: E501
        if 'shipping_location' in params:
            form_params.append(('shipping_location', params['shipping_location']))  # noqa: E501
        if 'volume' in params:
            form_params.append(('volume', params['volume']))  # noqa: E501
        if 'weight' in params:
            form_params.append(('weight', params['weight']))  # noqa: E501
        if 'width' in params:
            form_params.append(('width', params['width']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/update_oblpn_dims/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_oblpn_tracking_number(self, company_code, facility_code, oblpn_nbr, tracking_nbr, **kwargs):  # noqa: E501
        """Update OBLPN Tracking Number  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_oblpn_tracking_number(company_code, facility_code, oblpn_nbr, tracking_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param str oblpn_nbr:  (required)
        :param str tracking_nbr:  (required)
        :param float dry_ice_weight: 
        :param str estimated_delivery_time: 
        :param str master_tracking_nbr: 
        :param str rate: 
        :param str ship_via_code: 
        :param float weight: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_oblpn_tracking_number_with_http_info(company_code, facility_code, oblpn_nbr, tracking_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.update_oblpn_tracking_number_with_http_info(company_code, facility_code, oblpn_nbr, tracking_nbr, **kwargs)  # noqa: E501
            return data

    def update_oblpn_tracking_number_with_http_info(self, company_code, facility_code, oblpn_nbr, tracking_nbr, **kwargs):  # noqa: E501
        """Update OBLPN Tracking Number  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_oblpn_tracking_number_with_http_info(company_code, facility_code, oblpn_nbr, tracking_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code:  (required)
        :param str facility_code:  (required)
        :param str oblpn_nbr:  (required)
        :param str tracking_nbr:  (required)
        :param float dry_ice_weight: 
        :param str estimated_delivery_time: 
        :param str master_tracking_nbr: 
        :param str rate: 
        :param str ship_via_code: 
        :param float weight: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_code', 'facility_code', 'oblpn_nbr', 'tracking_nbr', 'dry_ice_weight', 'estimated_delivery_time', 'master_tracking_nbr', 'rate', 'ship_via_code', 'weight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_oblpn_tracking_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params or
                params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `update_oblpn_tracking_number`")  # noqa: E501
        # verify the required parameter 'facility_code' is set
        if ('facility_code' not in params or
                params['facility_code'] is None):
            raise ValueError("Missing the required parameter `facility_code` when calling `update_oblpn_tracking_number`")  # noqa: E501
        # verify the required parameter 'oblpn_nbr' is set
        if ('oblpn_nbr' not in params or
                params['oblpn_nbr'] is None):
            raise ValueError("Missing the required parameter `oblpn_nbr` when calling `update_oblpn_tracking_number`")  # noqa: E501
        # verify the required parameter 'tracking_nbr' is set
        if ('tracking_nbr' not in params or
                params['tracking_nbr'] is None):
            raise ValueError("Missing the required parameter `tracking_nbr` when calling `update_oblpn_tracking_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'dry_ice_weight' in params:
            form_params.append(('dry_ice_weight', params['dry_ice_weight']))  # noqa: E501
        if 'estimated_delivery_time' in params:
            form_params.append(('estimated_delivery_time', params['estimated_delivery_time']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'master_tracking_nbr' in params:
            form_params.append(('master_tracking_nbr', params['master_tracking_nbr']))  # noqa: E501
        if 'oblpn_nbr' in params:
            form_params.append(('oblpn_nbr', params['oblpn_nbr']))  # noqa: E501
        if 'rate' in params:
            form_params.append(('rate', params['rate']))  # noqa: E501
        if 'ship_via_code' in params:
            form_params.append(('ship_via_code', params['ship_via_code']))  # noqa: E501
        if 'tracking_nbr' in params:
            form_params.append(('tracking_nbr', params['tracking_nbr']))  # noqa: E501
        if 'weight' in params:
            form_params.append(('weight', params['weight']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/update_oblpn_tracing_nbr/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_output_interface(self, **kwargs):  # noqa: E501
        """Update Output Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_output_interface(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code: 
        :param str cust_intl_code: 
        :param str facility_code: 
        :param str filename: 
        :param str interface_type_code: 
        :param str message: 
        :param bool run_output_interface_flg: 
        :param int status_id: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_output_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_output_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_output_interface_with_http_info(self, **kwargs):  # noqa: E501
        """Update Output Interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_output_interface_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_code: 
        :param str cust_intl_code: 
        :param str facility_code: 
        :param str filename: 
        :param str interface_type_code: 
        :param str message: 
        :param bool run_output_interface_flg: 
        :param int status_id: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_code', 'cust_intl_code', 'facility_code', 'filename', 'interface_type_code', 'message', 'run_output_interface_flg', 'status_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_output_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_code' in params:
            form_params.append(('company_code', params['company_code']))  # noqa: E501
        if 'cust_intl_code' in params:
            form_params.append(('cust_intl_code', params['cust_intl_code']))  # noqa: E501
        if 'facility_code' in params:
            form_params.append(('facility_code', params['facility_code']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501
        if 'interface_type_code' in params:
            form_params.append(('interface_type_code', params['interface_type_code']))  # noqa: E501
        if 'message' in params:
            form_params.append(('message', params['message']))  # noqa: E501
        if 'run_output_interface_flg' in params:
            form_params.append(('run_output_interface_flg', params['run_output_interface_flg']))  # noqa: E501
        if 'status_id' in params:
            form_params.append(('status_id', params['status_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/update_output_interface/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
