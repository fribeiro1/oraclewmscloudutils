=begin
#Integration API

#This is a sample definition of the Oracle WMS Cloud Integration API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign OBLPN to Load
    # 
    # @param load_nbr 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :carrier_code 
    # @option opts [String] :company_code 
    # @option opts [String] :delimiter 
    # @option opts [String] :facility_code 
    # @option opts [BOOLEAN] :reassign_load_flg 
    # @option opts [Integer] :require_specific_oblpn_status 
    # @option opts [String] :trailer_nbr 
    # @return [Object]
    def assign_oblp_nto_load(load_nbr, oblpn_nbr, opts = {})
      data, _status_code, _headers = assign_oblp_nto_load_with_http_info(load_nbr, oblpn_nbr, opts)
      data
    end

    # Assign OBLPN to Load
    # 
    # @param load_nbr 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :carrier_code 
    # @option opts [String] :company_code 
    # @option opts [String] :delimiter 
    # @option opts [String] :facility_code 
    # @option opts [BOOLEAN] :reassign_load_flg 
    # @option opts [Integer] :require_specific_oblpn_status 
    # @option opts [String] :trailer_nbr 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def assign_oblp_nto_load_with_http_info(load_nbr, oblpn_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.assign_oblp_nto_load ...'
      end
      # verify the required parameter 'load_nbr' is set
      if @api_client.config.client_side_validation && load_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'load_nbr' when calling DefaultApi.assign_oblp_nto_load"
      end
      # verify the required parameter 'oblpn_nbr' is set
      if @api_client.config.client_side_validation && oblpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'oblpn_nbr' when calling DefaultApi.assign_oblp_nto_load"
      end
      # resource path
      local_var_path = '/assign_oblpn_to_load/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['load_nbr'] = load_nbr
      form_params['oblpn_nbr'] = oblpn_nbr
      form_params['carrier_code'] = opts[:'carrier_code'] if !opts[:'carrier_code'].nil?
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['delimiter'] = opts[:'delimiter'] if !opts[:'delimiter'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['reassign_load_flg'] = opts[:'reassign_load_flg'] if !opts[:'reassign_load_flg'].nil?
      form_params['require_specific_oblpn_status'] = opts[:'require_specific_oblpn_status'] if !opts[:'require_specific_oblpn_status'].nil?
      form_params['trailer_nbr'] = opts[:'trailer_nbr'] if !opts[:'trailer_nbr'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#assign_oblp_nto_load\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign and Load LPN
    # 
    # @param load_nbr 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :dock_door_nbr 
    # @option opts [String] :facility_code 
    # @option opts [Float] :oblpn_weight 
    # @option opts [String] :pallet_nbr 
    # @option opts [String] :trailer_nbr 
    # @return [Object]
    def assignand_load_lpn(load_nbr, oblpn_nbr, opts = {})
      data, _status_code, _headers = assignand_load_lpn_with_http_info(load_nbr, oblpn_nbr, opts)
      data
    end

    # Assign and Load LPN
    # 
    # @param load_nbr 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :dock_door_nbr 
    # @option opts [String] :facility_code 
    # @option opts [Float] :oblpn_weight 
    # @option opts [String] :pallet_nbr 
    # @option opts [String] :trailer_nbr 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def assignand_load_lpn_with_http_info(load_nbr, oblpn_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.assignand_load_lpn ...'
      end
      # verify the required parameter 'load_nbr' is set
      if @api_client.config.client_side_validation && load_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'load_nbr' when calling DefaultApi.assignand_load_lpn"
      end
      # verify the required parameter 'oblpn_nbr' is set
      if @api_client.config.client_side_validation && oblpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'oblpn_nbr' when calling DefaultApi.assignand_load_lpn"
      end
      # resource path
      local_var_path = '/assign_and_load_oblpn/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['load_nbr'] = load_nbr
      form_params['oblpn_nbr'] = oblpn_nbr
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['dock_door_nbr'] = opts[:'dock_door_nbr'] if !opts[:'dock_door_nbr'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['oblpn_weight'] = opts[:'oblpn_weight'] if !opts[:'oblpn_weight'].nil?
      form_params['pallet_nbr'] = opts[:'pallet_nbr'] if !opts[:'pallet_nbr'].nil?
      form_params['trailer_nbr'] = opts[:'trailer_nbr'] if !opts[:'trailer_nbr'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#assignand_load_lpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create LPN
    # 
    # @param lpn_nbr 
    # @param qty 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :batch_number 
    # @option opts [String] :company_code 
    # @option opts [String] :dest_facility_code 
    # @option opts [String] :drop_locn_barcode 
    # @option opts [String] :expiry_date 
    # @option opts [String] :facility_code 
    # @option opts [String] :item_alternate_code 
    # @option opts [String] :item_barcode 
    # @option opts [String] :lock_code 
    # @option opts [Float] :lpn_weight 
    # @option opts [String] :order_type 
    # @option opts [BOOLEAN] :xdock_lpn_flg 
    # @return [Object]
    def create_lpn(lpn_nbr, qty, opts = {})
      data, _status_code, _headers = create_lpn_with_http_info(lpn_nbr, qty, opts)
      data
    end

    # Create LPN
    # 
    # @param lpn_nbr 
    # @param qty 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :batch_number 
    # @option opts [String] :company_code 
    # @option opts [String] :dest_facility_code 
    # @option opts [String] :drop_locn_barcode 
    # @option opts [String] :expiry_date 
    # @option opts [String] :facility_code 
    # @option opts [String] :item_alternate_code 
    # @option opts [String] :item_barcode 
    # @option opts [String] :lock_code 
    # @option opts [Float] :lpn_weight 
    # @option opts [String] :order_type 
    # @option opts [BOOLEAN] :xdock_lpn_flg 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_lpn_with_http_info(lpn_nbr, qty, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_lpn ...'
      end
      # verify the required parameter 'lpn_nbr' is set
      if @api_client.config.client_side_validation && lpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'lpn_nbr' when calling DefaultApi.create_lpn"
      end
      # verify the required parameter 'qty' is set
      if @api_client.config.client_side_validation && qty.nil?
        fail ArgumentError, "Missing the required parameter 'qty' when calling DefaultApi.create_lpn"
      end
      # resource path
      local_var_path = '/create_lpn/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['lpn_nbr'] = lpn_nbr
      form_params['qty'] = qty
      form_params['batch_number'] = opts[:'batch_number'] if !opts[:'batch_number'].nil?
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['dest_facility_code'] = opts[:'dest_facility_code'] if !opts[:'dest_facility_code'].nil?
      form_params['drop_locn_barcode'] = opts[:'drop_locn_barcode'] if !opts[:'drop_locn_barcode'].nil?
      form_params['expiry_date'] = opts[:'expiry_date'] if !opts[:'expiry_date'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['item_alternate_code'] = opts[:'item_alternate_code'] if !opts[:'item_alternate_code'].nil?
      form_params['item_barcode'] = opts[:'item_barcode'] if !opts[:'item_barcode'].nil?
      form_params['lock_code'] = opts[:'lock_code'] if !opts[:'lock_code'].nil?
      form_params['lpn_weight'] = opts[:'lpn_weight'] if !opts[:'lpn_weight'].nil?
      form_params['order_type'] = opts[:'order_type'] if !opts[:'order_type'].nil?
      form_params['xdock_lpn_flg'] = opts[:'xdock_lpn_flg'] if !opts[:'xdock_lpn_flg'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_lpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Divert Confirm
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Object]
    def divert_confirm(opts = {})
      data, _status_code, _headers = divert_confirm_with_http_info(opts)
      data
    end

    # Divert Confirm
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def divert_confirm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.divert_confirm ...'
      end
      # resource path
      local_var_path = '/divert_confirm/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['flat_data'] = opts[:'flat_data'] if !opts[:'flat_data'].nil?
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#divert_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Entity Update
    # 
    # @param entity_name 
    # @param key 
    # @param sequence_number 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def entity_update(entity_name, key, sequence_number, opts = {})
      data, _status_code, _headers = entity_update_with_http_info(entity_name, key, sequence_number, opts)
      data
    end

    # Entity Update
    # 
    # @param entity_name 
    # @param key 
    # @param sequence_number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def entity_update_with_http_info(entity_name, key, sequence_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.entity_update ...'
      end
      # verify the required parameter 'entity_name' is set
      if @api_client.config.client_side_validation && entity_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_name' when calling DefaultApi.entity_update"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.entity_update"
      end
      # verify the required parameter 'sequence_number' is set
      if @api_client.config.client_side_validation && sequence_number.nil?
        fail ArgumentError, "Missing the required parameter 'sequence_number' when calling DefaultApi.entity_update"
      end
      # resource path
      local_var_path = '/entity/{entity_name}/{key}/{sequence_number}/'.sub('{' + 'entity_name' + '}', entity_name.to_s).sub('{' + 'key' + '}', key.to_s).sub('{' + 'sequence_number' + '}', sequence_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#entity_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Extended Property
    # 
    # @param entity_name 
    # @param extended_property 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @return [Object]
    def extended_property(entity_name, extended_property, key, opts = {})
      data, _status_code, _headers = extended_property_with_http_info(entity_name, extended_property, key, opts)
      data
    end

    # Extended Property
    # 
    # @param entity_name 
    # @param extended_property 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def extended_property_with_http_info(entity_name, extended_property, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.extended_property ...'
      end
      # verify the required parameter 'entity_name' is set
      if @api_client.config.client_side_validation && entity_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_name' when calling DefaultApi.extended_property"
      end
      # verify the required parameter 'extended_property' is set
      if @api_client.config.client_side_validation && extended_property.nil?
        fail ArgumentError, "Missing the required parameter 'extended_property' when calling DefaultApi.extended_property"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.extended_property"
      end
      # resource path
      local_var_path = '/extended_property/{entity_name}/{key}/{extended_property}/'.sub('{' + 'entity_name' + '}', entity_name.to_s).sub('{' + 'extended_property' + '}', extended_property.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}
      query_params[:'company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      query_params[:'facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#extended_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # From MHE Distribution Pack
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :xml_data 
    # @return [Object]
    def from_mhe_distribution_pack(opts = {})
      data, _status_code, _headers = from_mhe_distribution_pack_with_http_info(opts)
      data
    end

    # From MHE Distribution Pack
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def from_mhe_distribution_pack_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.from_mhe_distribution_pack ...'
      end
      # resource path
      local_var_path = '/from_mhe_distribution_pack/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#from_mhe_distribution_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # From MHE Distribution Short
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Object]
    def from_mhe_distribution_short(opts = {})
      data, _status_code, _headers = from_mhe_distribution_short_with_http_info(opts)
      data
    end

    # From MHE Distribution Short
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def from_mhe_distribution_short_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.from_mhe_distribution_short ...'
      end
      # resource path
      local_var_path = '/from_mhe_distribution_short/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['flat_data'] = opts[:'flat_data'] if !opts[:'flat_data'].nil?
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#from_mhe_distribution_short\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Next Numbers
    # 
    # @param counter_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [Integer] :count 
    # @option opts [String] :facility_code 
    # @return [Object]
    def get_next_numbers(counter_code, opts = {})
      data, _status_code, _headers = get_next_numbers_with_http_info(counter_code, opts)
      data
    end

    # Get Next Numbers
    # 
    # @param counter_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [Integer] :count 
    # @option opts [String] :facility_code 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_next_numbers_with_http_info(counter_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_next_numbers ...'
      end
      # verify the required parameter 'counter_code' is set
      if @api_client.config.client_side_validation && counter_code.nil?
        fail ArgumentError, "Missing the required parameter 'counter_code' when calling DefaultApi.get_next_numbers"
      end
      # resource path
      local_var_path = '/get_next_numbers/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['counter_code'] = counter_code
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['count'] = opts[:'count'] if !opts[:'count'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_next_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Status
    # 
    # @param entity 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @return [Object]
    def get_status(entity, key, opts = {})
      data, _status_code, _headers = get_status_with_http_info(entity, key, opts)
      data
    end

    # Get Status
    # 
    # @param entity 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_status_with_http_info(entity, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_status ...'
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling DefaultApi.get_status"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.get_status"
      end
      # resource path
      local_var_path = '/get_status/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['entity'] = entity
      form_params['key'] = key
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Induct LPN
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Object]
    def induct_lpn(opts = {})
      data, _status_code, _headers = induct_lpn_with_http_info(opts)
      data
    end

    # Induct LPN
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def induct_lpn_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.induct_lpn ...'
      end
      # resource path
      local_var_path = '/induct_lpn/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['flat_data'] = opts[:'flat_data'] if !opts[:'flat_data'].nil?
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#induct_lpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Init Stage Interface
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async 
    # @option opts [String] :entity 
    # @option opts [String] :flat_data 
    # @option opts [BOOLEAN] :validate_xml 
    # @option opts [String] :xml_data 
    # @return [Object]
    def init_stage_interface(opts = {})
      data, _status_code, _headers = init_stage_interface_with_http_info(opts)
      data
    end

    # Init Stage Interface
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async 
    # @option opts [String] :entity 
    # @option opts [String] :flat_data 
    # @option opts [BOOLEAN] :validate_xml 
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def init_stage_interface_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.init_stage_interface ...'
      end
      # resource path
      local_var_path = '/init_stage_interface/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['async'] = opts[:'async'] if !opts[:'async'].nil?
      form_params['entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      form_params['flat_data'] = opts[:'flat_data'] if !opts[:'flat_data'].nil?
      form_params['validate_xml'] = opts[:'validate_xml'] if !opts[:'validate_xml'].nil?
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#init_stage_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lock/Unlock LPN
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @option opts [String] :lock_code 
    # @option opts [String] :lpn_nbr 
    # @option opts [BOOLEAN] :remove_lock_from_shipment_dtl_flg 
    # @return [Object]
    def lock_unlock_lpn(opts = {})
      data, _status_code, _headers = lock_unlock_lpn_with_http_info(opts)
      data
    end

    # Lock/Unlock LPN
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action 
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @option opts [String] :lock_code 
    # @option opts [String] :lpn_nbr 
    # @option opts [BOOLEAN] :remove_lock_from_shipment_dtl_flg 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def lock_unlock_lpn_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lock_unlock_lpn ...'
      end
      # resource path
      local_var_path = '/lock_unlock_lpn/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['action'] = opts[:'action'] if !opts[:'action'].nil?
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['lock_code'] = opts[:'lock_code'] if !opts[:'lock_code'].nil?
      form_params['lpn_nbr'] = opts[:'lpn_nbr'] if !opts[:'lpn_nbr'].nil?
      form_params['remove_lock_from_shipment_dtl_flg'] = opts[:'remove_lock_from_shipment_dtl_flg'] if !opts[:'remove_lock_from_shipment_dtl_flg'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lock_unlock_lpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Object Inquiry
    # 
    # @param entity 
    # @param key 
    # @param company_code 
    # @param facility_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :minimize 
    # @return [Object]
    def object_inquiry(entity, key, company_code, facility_code, opts = {})
      data, _status_code, _headers = object_inquiry_with_http_info(entity, key, company_code, facility_code, opts)
      data
    end

    # Object Inquiry
    # 
    # @param entity 
    # @param key 
    # @param company_code 
    # @param facility_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :minimize 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def object_inquiry_with_http_info(entity, key, company_code, facility_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_inquiry ...'
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling DefaultApi.object_inquiry"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.object_inquiry"
      end
      # verify the required parameter 'company_code' is set
      if @api_client.config.client_side_validation && company_code.nil?
        fail ArgumentError, "Missing the required parameter 'company_code' when calling DefaultApi.object_inquiry"
      end
      # verify the required parameter 'facility_code' is set
      if @api_client.config.client_side_validation && facility_code.nil?
        fail ArgumentError, "Missing the required parameter 'facility_code' when calling DefaultApi.object_inquiry"
      end
      # resource path
      local_var_path = '/entity/{entity}/{key}/'.sub('{' + 'entity' + '}', entity.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}
      query_params[:'company_code'] = company_code
      query_params[:'facility_code'] = facility_code
      query_params[:'minimize'] = opts[:'minimize'] if !opts[:'minimize'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pick Confirm
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Object]
    def pick_confirm(opts = {})
      data, _status_code, _headers = pick_confirm_with_http_info(opts)
      data
    end

    # Pick Confirm
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flat_data 
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def pick_confirm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pick_confirm ...'
      end
      # resource path
      local_var_path = '/pick_confirm/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['flat_data'] = opts[:'flat_data'] if !opts[:'flat_data'].nil?
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pick_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Receive LPN
    # 
    # @param lpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @option opts [String] :rcvd_trailer_nbr 
    # @option opts [String] :received_ts 
    # @option opts [String] :receiving_location 
    # @option opts [BOOLEAN] :xdock_lpn_flg 
    # @option opts [String] :xml_data 
    # @return [Object]
    def receive_lpn(lpn_nbr, opts = {})
      data, _status_code, _headers = receive_lpn_with_http_info(lpn_nbr, opts)
      data
    end

    # Receive LPN
    # 
    # @param lpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @option opts [String] :rcvd_trailer_nbr 
    # @option opts [String] :received_ts 
    # @option opts [String] :receiving_location 
    # @option opts [BOOLEAN] :xdock_lpn_flg 
    # @option opts [String] :xml_data 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def receive_lpn_with_http_info(lpn_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.receive_lpn ...'
      end
      # verify the required parameter 'lpn_nbr' is set
      if @api_client.config.client_side_validation && lpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'lpn_nbr' when calling DefaultApi.receive_lpn"
      end
      # resource path
      local_var_path = '/receive_lpn/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['lpn_nbr'] = lpn_nbr
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['rcvd_trailer_nbr'] = opts[:'rcvd_trailer_nbr'] if !opts[:'rcvd_trailer_nbr'].nil?
      form_params['received_ts'] = opts[:'received_ts'] if !opts[:'received_ts'].nil?
      form_params['receiving_location'] = opts[:'receiving_location'] if !opts[:'receiving_location'].nil?
      form_params['xdock_lpn_flg'] = opts[:'xdock_lpn_flg'] if !opts[:'xdock_lpn_flg'].nil?
      form_params['xml_data'] = opts[:'xml_data'] if !opts[:'xml_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#receive_lpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run MHE Stage Interface
    # 
    # @param company_code 
    # @param entity 
    # @param facility_code 
    # @param mhe_vendor_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :python_function 
    # @return [Object]
    def run_mhe_stage_interface(company_code, entity, facility_code, mhe_vendor_code, opts = {})
      data, _status_code, _headers = run_mhe_stage_interface_with_http_info(company_code, entity, facility_code, mhe_vendor_code, opts)
      data
    end

    # Run MHE Stage Interface
    # 
    # @param company_code 
    # @param entity 
    # @param facility_code 
    # @param mhe_vendor_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :python_function 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def run_mhe_stage_interface_with_http_info(company_code, entity, facility_code, mhe_vendor_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.run_mhe_stage_interface ...'
      end
      # verify the required parameter 'company_code' is set
      if @api_client.config.client_side_validation && company_code.nil?
        fail ArgumentError, "Missing the required parameter 'company_code' when calling DefaultApi.run_mhe_stage_interface"
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling DefaultApi.run_mhe_stage_interface"
      end
      # verify the required parameter 'facility_code' is set
      if @api_client.config.client_side_validation && facility_code.nil?
        fail ArgumentError, "Missing the required parameter 'facility_code' when calling DefaultApi.run_mhe_stage_interface"
      end
      # verify the required parameter 'mhe_vendor_code' is set
      if @api_client.config.client_side_validation && mhe_vendor_code.nil?
        fail ArgumentError, "Missing the required parameter 'mhe_vendor_code' when calling DefaultApi.run_mhe_stage_interface"
      end
      # resource path
      local_var_path = '/run_mhe_stage_interface/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['company_code'] = company_code
      form_params['entity'] = entity
      form_params['facility_code'] = facility_code
      form_params['mhe_vendor_code'] = mhe_vendor_code
      form_params['python_function'] = opts[:'python_function'] if !opts[:'python_function'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#run_mhe_stage_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run Stage Interface
    # 
    # @param company_code 
    # @param entity 
    # @param facility_code 
    # @param file_group_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async 
    # @return [Object]
    def run_stage_interface(company_code, entity, facility_code, file_group_nbr, opts = {})
      data, _status_code, _headers = run_stage_interface_with_http_info(company_code, entity, facility_code, file_group_nbr, opts)
      data
    end

    # Run Stage Interface
    # 
    # @param company_code 
    # @param entity 
    # @param facility_code 
    # @param file_group_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def run_stage_interface_with_http_info(company_code, entity, facility_code, file_group_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.run_stage_interface ...'
      end
      # verify the required parameter 'company_code' is set
      if @api_client.config.client_side_validation && company_code.nil?
        fail ArgumentError, "Missing the required parameter 'company_code' when calling DefaultApi.run_stage_interface"
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling DefaultApi.run_stage_interface"
      end
      # verify the required parameter 'facility_code' is set
      if @api_client.config.client_side_validation && facility_code.nil?
        fail ArgumentError, "Missing the required parameter 'facility_code' when calling DefaultApi.run_stage_interface"
      end
      # verify the required parameter 'file_group_nbr' is set
      if @api_client.config.client_side_validation && file_group_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'file_group_nbr' when calling DefaultApi.run_stage_interface"
      end
      # resource path
      local_var_path = '/run_stage_interface/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['company_code'] = company_code
      form_params['entity'] = entity
      form_params['facility_code'] = facility_code
      form_params['file_group_nbr'] = file_group_nbr
      form_params['async'] = opts[:'async'] if !opts[:'async'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#run_stage_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Ship OBLPN
    # 
    # @param company_code 
    # @param facility_code 
    # @param locn_barcode 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :output_file_to_generate 
    # @return [Object]
    def ship_oblpn(company_code, facility_code, locn_barcode, oblpn_nbr, opts = {})
      data, _status_code, _headers = ship_oblpn_with_http_info(company_code, facility_code, locn_barcode, oblpn_nbr, opts)
      data
    end

    # Ship OBLPN
    # 
    # @param company_code 
    # @param facility_code 
    # @param locn_barcode 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :output_file_to_generate 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def ship_oblpn_with_http_info(company_code, facility_code, locn_barcode, oblpn_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ship_oblpn ...'
      end
      # verify the required parameter 'company_code' is set
      if @api_client.config.client_side_validation && company_code.nil?
        fail ArgumentError, "Missing the required parameter 'company_code' when calling DefaultApi.ship_oblpn"
      end
      # verify the required parameter 'facility_code' is set
      if @api_client.config.client_side_validation && facility_code.nil?
        fail ArgumentError, "Missing the required parameter 'facility_code' when calling DefaultApi.ship_oblpn"
      end
      # verify the required parameter 'locn_barcode' is set
      if @api_client.config.client_side_validation && locn_barcode.nil?
        fail ArgumentError, "Missing the required parameter 'locn_barcode' when calling DefaultApi.ship_oblpn"
      end
      # verify the required parameter 'oblpn_nbr' is set
      if @api_client.config.client_side_validation && oblpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'oblpn_nbr' when calling DefaultApi.ship_oblpn"
      end
      # resource path
      local_var_path = '/ship_oblpn'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['company_code'] = company_code
      form_params['facility_code'] = facility_code
      form_params['locn_barcode'] = locn_barcode
      form_params['oblpn_nbr'] = oblpn_nbr
      form_params['output_file_to_generate'] = opts[:'output_file_to_generate'] if !opts[:'output_file_to_generate'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ship_oblpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Active Inventory
    # 
    # @param location_barcode 
    # @param reason_code 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :actual_qty 
    # @option opts [Float] :adjustment_qty 
    # @option opts [String] :batch_number 
    # @option opts [String] :company_code 
    # @option opts [String] :expiry_data 
    # @option opts [String] :facility_code 
    # @option opts [String] :invn_attr_a 
    # @option opts [String] :invn_attr_b 
    # @option opts [String] :invn_attr_c 
    # @option opts [String] :invn_attr_d 
    # @option opts [String] :invn_attr_e 
    # @option opts [String] :invn_attr_f 
    # @option opts [String] :invn_attr_g 
    # @option opts [String] :item_alternate_code 
    # @option opts [String] :item_barcode 
    # @option opts [String] :item_code 
    # @option opts [BOOLEAN] :locn_capacity_check_flg 
    # @return [Object]
    def update_active_inventory(location_barcode, reason_code, opts = {})
      data, _status_code, _headers = update_active_inventory_with_http_info(location_barcode, reason_code, opts)
      data
    end

    # Update Active Inventory
    # 
    # @param location_barcode 
    # @param reason_code 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :actual_qty 
    # @option opts [Float] :adjustment_qty 
    # @option opts [String] :batch_number 
    # @option opts [String] :company_code 
    # @option opts [String] :expiry_data 
    # @option opts [String] :facility_code 
    # @option opts [String] :invn_attr_a 
    # @option opts [String] :invn_attr_b 
    # @option opts [String] :invn_attr_c 
    # @option opts [String] :invn_attr_d 
    # @option opts [String] :invn_attr_e 
    # @option opts [String] :invn_attr_f 
    # @option opts [String] :invn_attr_g 
    # @option opts [String] :item_alternate_code 
    # @option opts [String] :item_barcode 
    # @option opts [String] :item_code 
    # @option opts [BOOLEAN] :locn_capacity_check_flg 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_active_inventory_with_http_info(location_barcode, reason_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_active_inventory ...'
      end
      # verify the required parameter 'location_barcode' is set
      if @api_client.config.client_side_validation && location_barcode.nil?
        fail ArgumentError, "Missing the required parameter 'location_barcode' when calling DefaultApi.update_active_inventory"
      end
      # verify the required parameter 'reason_code' is set
      if @api_client.config.client_side_validation && reason_code.nil?
        fail ArgumentError, "Missing the required parameter 'reason_code' when calling DefaultApi.update_active_inventory"
      end
      # resource path
      local_var_path = '/entity/active_inventory/{location_barcode}/'.sub('{' + 'location_barcode' + '}', location_barcode.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['reason_code'] = reason_code
      form_params['actual_qty'] = opts[:'actual_qty'] if !opts[:'actual_qty'].nil?
      form_params['adjustment_qty'] = opts[:'adjustment_qty'] if !opts[:'adjustment_qty'].nil?
      form_params['batch_number'] = opts[:'batch_number'] if !opts[:'batch_number'].nil?
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['expiry_data'] = opts[:'expiry_data'] if !opts[:'expiry_data'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['invn_attr_a'] = opts[:'invn_attr_a'] if !opts[:'invn_attr_a'].nil?
      form_params['invn_attr_b'] = opts[:'invn_attr_b'] if !opts[:'invn_attr_b'].nil?
      form_params['invn_attr_c'] = opts[:'invn_attr_c'] if !opts[:'invn_attr_c'].nil?
      form_params['invn_attr_d'] = opts[:'invn_attr_d'] if !opts[:'invn_attr_d'].nil?
      form_params['invn_attr_e'] = opts[:'invn_attr_e'] if !opts[:'invn_attr_e'].nil?
      form_params['invn_attr_f'] = opts[:'invn_attr_f'] if !opts[:'invn_attr_f'].nil?
      form_params['invn_attr_g'] = opts[:'invn_attr_g'] if !opts[:'invn_attr_g'].nil?
      form_params['item_alternate_code'] = opts[:'item_alternate_code'] if !opts[:'item_alternate_code'].nil?
      form_params['item_barcode'] = opts[:'item_barcode'] if !opts[:'item_barcode'].nil?
      form_params['item_code'] = opts[:'item_code'] if !opts[:'item_code'].nil?
      form_params['locn_capacity_check_flg'] = opts[:'locn_capacity_check_flg'] if !opts[:'locn_capacity_check_flg'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_active_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Carrier LPN Label
    # 
    # @param label 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @return [Object]
    def update_carrier_lpn_label(label, oblpn_nbr, opts = {})
      data, _status_code, _headers = update_carrier_lpn_label_with_http_info(label, oblpn_nbr, opts)
      data
    end

    # Update Carrier LPN Label
    # 
    # @param label 
    # @param oblpn_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :facility_code 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_carrier_lpn_label_with_http_info(label, oblpn_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_carrier_lpn_label ...'
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling DefaultApi.update_carrier_lpn_label"
      end
      # verify the required parameter 'oblpn_nbr' is set
      if @api_client.config.client_side_validation && oblpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'oblpn_nbr' when calling DefaultApi.update_carrier_lpn_label"
      end
      # resource path
      local_var_path = '/update_carrier_lpn_label/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['label'] = label
      form_params['oblpn_nbr'] = oblpn_nbr
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_carrier_lpn_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update OBLPN Dimensions
    # 
    # @param calc_vol_flg 
    # @param company_code 
    # @param facility_code 
    # @param height 
    # @param length 
    # @param oblpn_nbr 
    # @param width 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ship_oblpn 
    # @option opts [String] :shipping_location 
    # @option opts [Float] :volume 
    # @option opts [Float] :weight 
    # @return [Object]
    def update_oblpn_dimensions(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, opts = {})
      data, _status_code, _headers = update_oblpn_dimensions_with_http_info(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, opts)
      data
    end

    # Update OBLPN Dimensions
    # 
    # @param calc_vol_flg 
    # @param company_code 
    # @param facility_code 
    # @param height 
    # @param length 
    # @param oblpn_nbr 
    # @param width 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ship_oblpn 
    # @option opts [String] :shipping_location 
    # @option opts [Float] :volume 
    # @option opts [Float] :weight 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_oblpn_dimensions_with_http_info(calc_vol_flg, company_code, facility_code, height, length, oblpn_nbr, width, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_oblpn_dimensions ...'
      end
      # verify the required parameter 'calc_vol_flg' is set
      if @api_client.config.client_side_validation && calc_vol_flg.nil?
        fail ArgumentError, "Missing the required parameter 'calc_vol_flg' when calling DefaultApi.update_oblpn_dimensions"
      end
      # verify the required parameter 'company_code' is set
      if @api_client.config.client_side_validation && company_code.nil?
        fail ArgumentError, "Missing the required parameter 'company_code' when calling DefaultApi.update_oblpn_dimensions"
      end
      # verify the required parameter 'facility_code' is set
      if @api_client.config.client_side_validation && facility_code.nil?
        fail ArgumentError, "Missing the required parameter 'facility_code' when calling DefaultApi.update_oblpn_dimensions"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling DefaultApi.update_oblpn_dimensions"
      end
      # verify the required parameter 'length' is set
      if @api_client.config.client_side_validation && length.nil?
        fail ArgumentError, "Missing the required parameter 'length' when calling DefaultApi.update_oblpn_dimensions"
      end
      # verify the required parameter 'oblpn_nbr' is set
      if @api_client.config.client_side_validation && oblpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'oblpn_nbr' when calling DefaultApi.update_oblpn_dimensions"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling DefaultApi.update_oblpn_dimensions"
      end
      # resource path
      local_var_path = '/update_oblpn_dims/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['calc_vol_flg'] = calc_vol_flg
      form_params['company_code'] = company_code
      form_params['facility_code'] = facility_code
      form_params['height'] = height
      form_params['length'] = length
      form_params['oblpn_nbr'] = oblpn_nbr
      form_params['width'] = width
      form_params['ship_oblpn'] = opts[:'ship_oblpn'] if !opts[:'ship_oblpn'].nil?
      form_params['shipping_location'] = opts[:'shipping_location'] if !opts[:'shipping_location'].nil?
      form_params['volume'] = opts[:'volume'] if !opts[:'volume'].nil?
      form_params['weight'] = opts[:'weight'] if !opts[:'weight'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_oblpn_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update OBLPN Tracking Number
    # 
    # @param company_code 
    # @param facility_code 
    # @param oblpn_nbr 
    # @param tracking_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :dry_ice_weight 
    # @option opts [String] :estimated_delivery_time 
    # @option opts [String] :master_tracking_nbr 
    # @option opts [String] :rate 
    # @option opts [String] :ship_via_code 
    # @option opts [Float] :weight 
    # @return [Object]
    def update_oblpn_tracking_number(company_code, facility_code, oblpn_nbr, tracking_nbr, opts = {})
      data, _status_code, _headers = update_oblpn_tracking_number_with_http_info(company_code, facility_code, oblpn_nbr, tracking_nbr, opts)
      data
    end

    # Update OBLPN Tracking Number
    # 
    # @param company_code 
    # @param facility_code 
    # @param oblpn_nbr 
    # @param tracking_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :dry_ice_weight 
    # @option opts [String] :estimated_delivery_time 
    # @option opts [String] :master_tracking_nbr 
    # @option opts [String] :rate 
    # @option opts [String] :ship_via_code 
    # @option opts [Float] :weight 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_oblpn_tracking_number_with_http_info(company_code, facility_code, oblpn_nbr, tracking_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_oblpn_tracking_number ...'
      end
      # verify the required parameter 'company_code' is set
      if @api_client.config.client_side_validation && company_code.nil?
        fail ArgumentError, "Missing the required parameter 'company_code' when calling DefaultApi.update_oblpn_tracking_number"
      end
      # verify the required parameter 'facility_code' is set
      if @api_client.config.client_side_validation && facility_code.nil?
        fail ArgumentError, "Missing the required parameter 'facility_code' when calling DefaultApi.update_oblpn_tracking_number"
      end
      # verify the required parameter 'oblpn_nbr' is set
      if @api_client.config.client_side_validation && oblpn_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'oblpn_nbr' when calling DefaultApi.update_oblpn_tracking_number"
      end
      # verify the required parameter 'tracking_nbr' is set
      if @api_client.config.client_side_validation && tracking_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'tracking_nbr' when calling DefaultApi.update_oblpn_tracking_number"
      end
      # resource path
      local_var_path = '/update_oblpn_tracing_nbr/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['company_code'] = company_code
      form_params['facility_code'] = facility_code
      form_params['oblpn_nbr'] = oblpn_nbr
      form_params['tracking_nbr'] = tracking_nbr
      form_params['dry_ice_weight'] = opts[:'dry_ice_weight'] if !opts[:'dry_ice_weight'].nil?
      form_params['estimated_delivery_time'] = opts[:'estimated_delivery_time'] if !opts[:'estimated_delivery_time'].nil?
      form_params['master_tracking_nbr'] = opts[:'master_tracking_nbr'] if !opts[:'master_tracking_nbr'].nil?
      form_params['rate'] = opts[:'rate'] if !opts[:'rate'].nil?
      form_params['ship_via_code'] = opts[:'ship_via_code'] if !opts[:'ship_via_code'].nil?
      form_params['weight'] = opts[:'weight'] if !opts[:'weight'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_oblpn_tracking_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Output Interface
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :cust_intl_code 
    # @option opts [String] :facility_code 
    # @option opts [String] :filename 
    # @option opts [String] :interface_type_code 
    # @option opts [String] :message 
    # @option opts [BOOLEAN] :run_output_interface_flg 
    # @option opts [Integer] :status_id 
    # @return [Object]
    def update_output_interface(opts = {})
      data, _status_code, _headers = update_output_interface_with_http_info(opts)
      data
    end

    # Update Output Interface
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_code 
    # @option opts [String] :cust_intl_code 
    # @option opts [String] :facility_code 
    # @option opts [String] :filename 
    # @option opts [String] :interface_type_code 
    # @option opts [String] :message 
    # @option opts [BOOLEAN] :run_output_interface_flg 
    # @option opts [Integer] :status_id 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_output_interface_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_output_interface ...'
      end
      # resource path
      local_var_path = '/update_output_interface/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['company_code'] = opts[:'company_code'] if !opts[:'company_code'].nil?
      form_params['cust_intl_code'] = opts[:'cust_intl_code'] if !opts[:'cust_intl_code'].nil?
      form_params['facility_code'] = opts[:'facility_code'] if !opts[:'facility_code'].nil?
      form_params['filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      form_params['interface_type_code'] = opts[:'interface_type_code'] if !opts[:'interface_type_code'].nil?
      form_params['message'] = opts[:'message'] if !opts[:'message'].nil?
      form_params['run_output_interface_flg'] = opts[:'run_output_interface_flg'] if !opts[:'run_output_interface_flg'].nil?
      form_params['status_id'] = opts[:'status_id'] if !opts[:'status_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_output_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
