
/*
 * REST API
 *
 * This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PickPackApiService service

/* 
PickPackApiService PickPackCloseLpn_POST

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param toContainerNbr 
 * @param optional nil or *PickPackApiPickPackCloseLpnPOSTOpts - Optional Parameters:
     * @param "AsyncFlg" (optional.Bool) -  
     * @param "CloseContainerStatus" (optional.String) -  
     * @param "CompanyId" (optional.Float32) -  
     * @param "CompanyIdCode" (optional.String) -  
     * @param "FacilityId" (optional.Float32) -  
     * @param "FacilityIdCode" (optional.String) -  
     * @param "ReasonCode" (optional.String) -  
     * @param "ShortOnCloseFlg" (optional.Bool) -  
     * @param "UpdateInventoryOnShortFlg" (optional.Bool) -  
     * @param "ToContainerCode" (optional.String) -  

@return interface{}
*/

type PickPackApiPickPackCloseLpnPOSTOpts struct { 
	AsyncFlg optional.Bool
	CloseContainerStatus optional.String
	CompanyId optional.Float32
	CompanyIdCode optional.String
	FacilityId optional.Float32
	FacilityIdCode optional.String
	ReasonCode optional.String
	ShortOnCloseFlg optional.Bool
	UpdateInventoryOnShortFlg optional.Bool
	ToContainerCode optional.String
}

func (a *PickPackApiService) PickPackCloseLpnPOST(ctx context.Context, toContainerNbr string, localVarOptionals *PickPackApiPickPackCloseLpnPOSTOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pick_pack/close_lpn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AsyncFlg.IsSet() {
		localVarQueryParams.Add("async_flg", parameterToString(localVarOptionals.AsyncFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CloseContainerStatus.IsSet() {
		localVarQueryParams.Add("close_container_status", parameterToString(localVarOptionals.CloseContainerStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyId.IsSet() {
		localVarQueryParams.Add("company_id", parameterToString(localVarOptionals.CompanyId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyIdCode.IsSet() {
		localVarQueryParams.Add("company_id__code", parameterToString(localVarOptionals.CompanyIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityId.IsSet() {
		localVarQueryParams.Add("facility_id", parameterToString(localVarOptionals.FacilityId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityIdCode.IsSet() {
		localVarQueryParams.Add("facility_id__code", parameterToString(localVarOptionals.FacilityIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReasonCode.IsSet() {
		localVarQueryParams.Add("reason_code", parameterToString(localVarOptionals.ReasonCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShortOnCloseFlg.IsSet() {
		localVarQueryParams.Add("short_on_close_flg", parameterToString(localVarOptionals.ShortOnCloseFlg.Value(), ""))
	}
	localVarQueryParams.Add("to_container_nbr", parameterToString(toContainerNbr, ""))
	if localVarOptionals != nil && localVarOptionals.UpdateInventoryOnShortFlg.IsSet() {
		localVarQueryParams.Add("update_inventory_on_short_flg", parameterToString(localVarOptionals.UpdateInventoryOnShortFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ToContainerCode.IsSet() {
		localVarQueryParams.Add("to_container__code", parameterToString(localVarOptionals.ToContainerCode.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 201 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
PickPackApiService PickPackPickConfirm_POST

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param asyncFlg 
 * @param mheModeFlg 
 * @param orderNbr 
 * @param waveNbr 
 * @param optional nil or *PickPackApiPickPackPickConfirmPOSTOpts - Optional Parameters:
     * @param "AllocationUom" (optional.String) -  
     * @param "BatchNbr" (optional.String) -  
     * @param "CloseContainerStatus" (optional.String) -  
     * @param "CompanyId" (optional.Float32) -  
     * @param "CompanyIdCode" (optional.String) -  
     * @param "FacilityId" (optional.Float32) -  
     * @param "FacilityIdCode" (optional.String) -  
     * @param "FromContainerNbr" (optional.String) -  
     * @param "ItemAlternateCode" (optional.String) -  
     * @param "ItemBarcode" (optional.String) -  
     * @param "MheSystemCode" (optional.String) -  
     * @param "PickLocation" (optional.String) -  
     * @param "Qty" (optional.Float32) -  
     * @param "ReasonCode" (optional.String) -  
     * @param "ShortFlg" (optional.Bool) -  
     * @param "ShortOnCloseFlg" (optional.Bool) -  
     * @param "ToContainerNbr" (optional.String) -  
     * @param "UomQty" (optional.String) -  
     * @param "UpdateInventoryOnShortFlg" (optional.Bool) -  

@return interface{}
*/

type PickPackApiPickPackPickConfirmPOSTOpts struct { 
	AllocationUom optional.String
	BatchNbr optional.String
	CloseContainerStatus optional.String
	CompanyId optional.Float32
	CompanyIdCode optional.String
	FacilityId optional.Float32
	FacilityIdCode optional.String
	FromContainerNbr optional.String
	ItemAlternateCode optional.String
	ItemBarcode optional.String
	MheSystemCode optional.String
	PickLocation optional.String
	Qty optional.Float32
	ReasonCode optional.String
	ShortFlg optional.Bool
	ShortOnCloseFlg optional.Bool
	ToContainerNbr optional.String
	UomQty optional.String
	UpdateInventoryOnShortFlg optional.Bool
}

func (a *PickPackApiService) PickPackPickConfirmPOST(ctx context.Context, asyncFlg bool, mheModeFlg bool, orderNbr string, waveNbr string, localVarOptionals *PickPackApiPickPackPickConfirmPOSTOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pick_pack/pick_confirm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AllocationUom.IsSet() {
		localVarQueryParams.Add("allocation_uom", parameterToString(localVarOptionals.AllocationUom.Value(), ""))
	}
	localVarQueryParams.Add("async_flg", parameterToString(asyncFlg, ""))
	if localVarOptionals != nil && localVarOptionals.BatchNbr.IsSet() {
		localVarQueryParams.Add("batch_nbr", parameterToString(localVarOptionals.BatchNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CloseContainerStatus.IsSet() {
		localVarQueryParams.Add("close_container_status", parameterToString(localVarOptionals.CloseContainerStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyId.IsSet() {
		localVarQueryParams.Add("company_id", parameterToString(localVarOptionals.CompanyId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyIdCode.IsSet() {
		localVarQueryParams.Add("company_id__code", parameterToString(localVarOptionals.CompanyIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityId.IsSet() {
		localVarQueryParams.Add("facility_id", parameterToString(localVarOptionals.FacilityId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityIdCode.IsSet() {
		localVarQueryParams.Add("facility_id__code", parameterToString(localVarOptionals.FacilityIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FromContainerNbr.IsSet() {
		localVarQueryParams.Add("from_container_nbr", parameterToString(localVarOptionals.FromContainerNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemAlternateCode.IsSet() {
		localVarQueryParams.Add("item_alternate_code", parameterToString(localVarOptionals.ItemAlternateCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemBarcode.IsSet() {
		localVarQueryParams.Add("item_barcode", parameterToString(localVarOptionals.ItemBarcode.Value(), ""))
	}
	localVarQueryParams.Add("mhe_mode_flg", parameterToString(mheModeFlg, ""))
	if localVarOptionals != nil && localVarOptionals.MheSystemCode.IsSet() {
		localVarQueryParams.Add("mhe_system_code", parameterToString(localVarOptionals.MheSystemCode.Value(), ""))
	}
	localVarQueryParams.Add("order_nbr", parameterToString(orderNbr, ""))
	if localVarOptionals != nil && localVarOptionals.PickLocation.IsSet() {
		localVarQueryParams.Add("pick_location", parameterToString(localVarOptionals.PickLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Qty.IsSet() {
		localVarQueryParams.Add("qty", parameterToString(localVarOptionals.Qty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReasonCode.IsSet() {
		localVarQueryParams.Add("reason_code", parameterToString(localVarOptionals.ReasonCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShortFlg.IsSet() {
		localVarQueryParams.Add("short_flg", parameterToString(localVarOptionals.ShortFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShortOnCloseFlg.IsSet() {
		localVarQueryParams.Add("short_on_close_flg", parameterToString(localVarOptionals.ShortOnCloseFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ToContainerNbr.IsSet() {
		localVarQueryParams.Add("to_container_nbr", parameterToString(localVarOptionals.ToContainerNbr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UomQty.IsSet() {
		localVarQueryParams.Add("uom_qty", parameterToString(localVarOptionals.UomQty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateInventoryOnShortFlg.IsSet() {
		localVarQueryParams.Add("update_inventory_on_short_flg", parameterToString(localVarOptionals.UpdateInventoryOnShortFlg.Value(), ""))
	}
	localVarQueryParams.Add("wave_nbr", parameterToString(waveNbr, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 201 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
PickPackApiService PickPackWaveComplete_POST

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param waveNbr 
 * @param optional nil or *PickPackApiPickPackWaveCompletePOSTOpts - Optional Parameters:
     * @param "AsyncFlg" (optional.Bool) -  
     * @param "CloseContainerStatus" (optional.String) -  
     * @param "CompanyId" (optional.Float32) -  
     * @param "CompanyIdCode" (optional.String) -  
     * @param "FacilityId" (optional.Float32) -  
     * @param "FacilityIdCode" (optional.String) -  
     * @param "MheSystemCode" (optional.String) -  
     * @param "ReasonCode" (optional.String) -  
     * @param "UpdateInventoryOnShortFlg" (optional.Bool) -  

@return interface{}
*/

type PickPackApiPickPackWaveCompletePOSTOpts struct { 
	AsyncFlg optional.Bool
	CloseContainerStatus optional.String
	CompanyId optional.Float32
	CompanyIdCode optional.String
	FacilityId optional.Float32
	FacilityIdCode optional.String
	MheSystemCode optional.String
	ReasonCode optional.String
	UpdateInventoryOnShortFlg optional.Bool
}

func (a *PickPackApiService) PickPackWaveCompletePOST(ctx context.Context, waveNbr string, localVarOptionals *PickPackApiPickPackWaveCompletePOSTOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pick_pack/wave_complete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AsyncFlg.IsSet() {
		localVarQueryParams.Add("async_flg", parameterToString(localVarOptionals.AsyncFlg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CloseContainerStatus.IsSet() {
		localVarQueryParams.Add("close_container_status", parameterToString(localVarOptionals.CloseContainerStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyId.IsSet() {
		localVarQueryParams.Add("company_id", parameterToString(localVarOptionals.CompanyId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyIdCode.IsSet() {
		localVarQueryParams.Add("company_id__code", parameterToString(localVarOptionals.CompanyIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityId.IsSet() {
		localVarQueryParams.Add("facility_id", parameterToString(localVarOptionals.FacilityId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityIdCode.IsSet() {
		localVarQueryParams.Add("facility_id__code", parameterToString(localVarOptionals.FacilityIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MheSystemCode.IsSet() {
		localVarQueryParams.Add("mhe_system_code", parameterToString(localVarOptionals.MheSystemCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReasonCode.IsSet() {
		localVarQueryParams.Add("reason_code", parameterToString(localVarOptionals.ReasonCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateInventoryOnShortFlg.IsSet() {
		localVarQueryParams.Add("update_inventory_on_short_flg", parameterToString(localVarOptionals.UpdateInventoryOnShortFlg.Value(), ""))
	}
	localVarQueryParams.Add("wave_nbr", parameterToString(waveNbr, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 201 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
