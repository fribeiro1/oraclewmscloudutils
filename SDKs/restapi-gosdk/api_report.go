
/*
 * REST API
 *
 * This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ReportApiService service

/* 
ReportApiService ReportCustomInventorySummary_GET

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param itemCode 
 * @param optional nil or *ReportApiReportCustomInventorySummaryGETOpts - Optional Parameters:
     * @param "CompanyId" (optional.Float32) -  
     * @param "CompanyIdCode" (optional.String) -  
     * @param "FacilityId" (optional.Float32) -  
     * @param "FacilityIdCode" (optional.String) -  
     * @param "WriteHeaderLineFlg" (optional.Bool) -  

@return interface{}
*/

type ReportApiReportCustomInventorySummaryGETOpts struct { 
	CompanyId optional.Float32
	CompanyIdCode optional.String
	FacilityId optional.Float32
	FacilityIdCode optional.String
	WriteHeaderLineFlg optional.Bool
}

func (a *ReportApiService) ReportCustomInventorySummaryGET(ctx context.Context, itemCode string, localVarOptionals *ReportApiReportCustomInventorySummaryGETOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/custom_inventory_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CompanyId.IsSet() {
		localVarQueryParams.Add("company_id", parameterToString(localVarOptionals.CompanyId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompanyIdCode.IsSet() {
		localVarQueryParams.Add("company_id__code", parameterToString(localVarOptionals.CompanyIdCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityId.IsSet() {
		localVarQueryParams.Add("facility_id", parameterToString(localVarOptionals.FacilityId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FacilityIdCode.IsSet() {
		localVarQueryParams.Add("facility_id__code", parameterToString(localVarOptionals.FacilityIdCode.Value(), ""))
	}
	localVarQueryParams.Add("item_code", parameterToString(itemCode, ""))
	if localVarOptionals != nil && localVarOptionals.WriteHeaderLineFlg.IsSet() {
		localVarQueryParams.Add("write_header_line_flg", parameterToString(localVarOptionals.WriteHeaderLineFlg.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
