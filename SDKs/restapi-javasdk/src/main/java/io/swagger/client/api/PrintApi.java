/*
 * REST API
 * This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrintApi {
    private ApiClient apiClient;

    public PrintApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrintApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for printLabelIbContainerGET
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printLabelIbContainerGETCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/print/label/ib_container";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_id", companyId));
        if (containerNbr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container_nbr", containerNbr));
        if (facilityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_id", facilityId));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (labelDesignerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_designer_code", labelDesignerCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printLabelIbContainerGETValidateBeforeCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling printLabelIbContainerGET(Async)");
        }
        
        // verify the required parameter 'containerNbr' is set
        if (containerNbr == null) {
            throw new ApiException("Missing the required parameter 'containerNbr' when calling printLabelIbContainerGET(Async)");
        }
        
        // verify the required parameter 'facilityId' is set
        if (facilityId == null) {
            throw new ApiException("Missing the required parameter 'facilityId' when calling printLabelIbContainerGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printLabelIbContainerGET(Async)");
        }
        
        // verify the required parameter 'labelDesignerCode' is set
        if (labelDesignerCode == null) {
            throw new ApiException("Missing the required parameter 'labelDesignerCode' when calling printLabelIbContainerGET(Async)");
        }
        

        com.squareup.okhttp.Call call = printLabelIbContainerGETCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * PrintLabelIbContainer_GET
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object printLabelIbContainerGET(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        ApiResponse<Object> resp = printLabelIbContainerGETWithHttpInfo(companyId, containerNbr, facilityId, id, labelDesignerCode);
        return resp.getData();
    }

    /**
     * PrintLabelIbContainer_GET
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> printLabelIbContainerGETWithHttpInfo(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        com.squareup.okhttp.Call call = printLabelIbContainerGETValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PrintLabelIbContainer_GET (asynchronously)
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printLabelIbContainerGETAsync(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printLabelIbContainerGETValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printLabelIbContainerPOST
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printLabelIbContainerPOSTCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/print/label/ib_container";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_id", companyId));
        if (containerNbr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container_nbr", containerNbr));
        if (facilityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_id", facilityId));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (labelDesignerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_designer_code", labelDesignerCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printLabelIbContainerPOSTValidateBeforeCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling printLabelIbContainerPOST(Async)");
        }
        
        // verify the required parameter 'containerNbr' is set
        if (containerNbr == null) {
            throw new ApiException("Missing the required parameter 'containerNbr' when calling printLabelIbContainerPOST(Async)");
        }
        
        // verify the required parameter 'facilityId' is set
        if (facilityId == null) {
            throw new ApiException("Missing the required parameter 'facilityId' when calling printLabelIbContainerPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printLabelIbContainerPOST(Async)");
        }
        
        // verify the required parameter 'labelDesignerCode' is set
        if (labelDesignerCode == null) {
            throw new ApiException("Missing the required parameter 'labelDesignerCode' when calling printLabelIbContainerPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = printLabelIbContainerPOSTCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * PrintLabelIbContainer_POST
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object printLabelIbContainerPOST(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        ApiResponse<Object> resp = printLabelIbContainerPOSTWithHttpInfo(companyId, containerNbr, facilityId, id, labelDesignerCode);
        return resp.getData();
    }

    /**
     * PrintLabelIbContainer_POST
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> printLabelIbContainerPOSTWithHttpInfo(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        com.squareup.okhttp.Call call = printLabelIbContainerPOSTValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PrintLabelIbContainer_POST (asynchronously)
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printLabelIbContainerPOSTAsync(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printLabelIbContainerPOSTValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printLabelPalletGET
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printLabelPalletGETCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/print/label/pallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_id", companyId));
        if (containerNbr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container_nbr", containerNbr));
        if (facilityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_id", facilityId));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (labelDesignerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_designer_code", labelDesignerCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printLabelPalletGETValidateBeforeCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling printLabelPalletGET(Async)");
        }
        
        // verify the required parameter 'containerNbr' is set
        if (containerNbr == null) {
            throw new ApiException("Missing the required parameter 'containerNbr' when calling printLabelPalletGET(Async)");
        }
        
        // verify the required parameter 'facilityId' is set
        if (facilityId == null) {
            throw new ApiException("Missing the required parameter 'facilityId' when calling printLabelPalletGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printLabelPalletGET(Async)");
        }
        
        // verify the required parameter 'labelDesignerCode' is set
        if (labelDesignerCode == null) {
            throw new ApiException("Missing the required parameter 'labelDesignerCode' when calling printLabelPalletGET(Async)");
        }
        

        com.squareup.okhttp.Call call = printLabelPalletGETCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * PrintLabelPallet_GET
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object printLabelPalletGET(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        ApiResponse<Object> resp = printLabelPalletGETWithHttpInfo(companyId, containerNbr, facilityId, id, labelDesignerCode);
        return resp.getData();
    }

    /**
     * PrintLabelPallet_GET
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> printLabelPalletGETWithHttpInfo(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        com.squareup.okhttp.Call call = printLabelPalletGETValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PrintLabelPallet_GET (asynchronously)
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printLabelPalletGETAsync(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printLabelPalletGETValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printLabelPalletPOST
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printLabelPalletPOSTCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/print/label/pallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_id", companyId));
        if (containerNbr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container_nbr", containerNbr));
        if (facilityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_id", facilityId));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (labelDesignerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_designer_code", labelDesignerCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printLabelPalletPOSTValidateBeforeCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling printLabelPalletPOST(Async)");
        }
        
        // verify the required parameter 'containerNbr' is set
        if (containerNbr == null) {
            throw new ApiException("Missing the required parameter 'containerNbr' when calling printLabelPalletPOST(Async)");
        }
        
        // verify the required parameter 'facilityId' is set
        if (facilityId == null) {
            throw new ApiException("Missing the required parameter 'facilityId' when calling printLabelPalletPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printLabelPalletPOST(Async)");
        }
        
        // verify the required parameter 'labelDesignerCode' is set
        if (labelDesignerCode == null) {
            throw new ApiException("Missing the required parameter 'labelDesignerCode' when calling printLabelPalletPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = printLabelPalletPOSTCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * PrintLabelPallet_POST
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object printLabelPalletPOST(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        ApiResponse<Object> resp = printLabelPalletPOSTWithHttpInfo(companyId, containerNbr, facilityId, id, labelDesignerCode);
        return resp.getData();
    }

    /**
     * PrintLabelPallet_POST
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> printLabelPalletPOSTWithHttpInfo(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        com.squareup.okhttp.Call call = printLabelPalletPOSTValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PrintLabelPallet_POST (asynchronously)
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printLabelPalletPOSTAsync(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printLabelPalletPOSTValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printLabelShippingGET
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printLabelShippingGETCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/print/label/shipping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_id", companyId));
        if (containerNbr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container_nbr", containerNbr));
        if (facilityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_id", facilityId));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (labelDesignerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_designer_code", labelDesignerCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printLabelShippingGETValidateBeforeCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling printLabelShippingGET(Async)");
        }
        
        // verify the required parameter 'containerNbr' is set
        if (containerNbr == null) {
            throw new ApiException("Missing the required parameter 'containerNbr' when calling printLabelShippingGET(Async)");
        }
        
        // verify the required parameter 'facilityId' is set
        if (facilityId == null) {
            throw new ApiException("Missing the required parameter 'facilityId' when calling printLabelShippingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printLabelShippingGET(Async)");
        }
        
        // verify the required parameter 'labelDesignerCode' is set
        if (labelDesignerCode == null) {
            throw new ApiException("Missing the required parameter 'labelDesignerCode' when calling printLabelShippingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = printLabelShippingGETCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * PrintLabelShipping_GET
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object printLabelShippingGET(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        ApiResponse<Object> resp = printLabelShippingGETWithHttpInfo(companyId, containerNbr, facilityId, id, labelDesignerCode);
        return resp.getData();
    }

    /**
     * PrintLabelShipping_GET
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> printLabelShippingGETWithHttpInfo(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        com.squareup.okhttp.Call call = printLabelShippingGETValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PrintLabelShipping_GET (asynchronously)
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printLabelShippingGETAsync(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printLabelShippingGETValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printLabelShippingPOST
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printLabelShippingPOSTCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/print/label/shipping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company_id", companyId));
        if (containerNbr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("container_nbr", containerNbr));
        if (facilityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility_id", facilityId));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (labelDesignerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_designer_code", labelDesignerCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printLabelShippingPOSTValidateBeforeCall(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling printLabelShippingPOST(Async)");
        }
        
        // verify the required parameter 'containerNbr' is set
        if (containerNbr == null) {
            throw new ApiException("Missing the required parameter 'containerNbr' when calling printLabelShippingPOST(Async)");
        }
        
        // verify the required parameter 'facilityId' is set
        if (facilityId == null) {
            throw new ApiException("Missing the required parameter 'facilityId' when calling printLabelShippingPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printLabelShippingPOST(Async)");
        }
        
        // verify the required parameter 'labelDesignerCode' is set
        if (labelDesignerCode == null) {
            throw new ApiException("Missing the required parameter 'labelDesignerCode' when calling printLabelShippingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = printLabelShippingPOSTCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * PrintLabelShipping_POST
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object printLabelShippingPOST(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        ApiResponse<Object> resp = printLabelShippingPOSTWithHttpInfo(companyId, containerNbr, facilityId, id, labelDesignerCode);
        return resp.getData();
    }

    /**
     * PrintLabelShipping_POST
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> printLabelShippingPOSTWithHttpInfo(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode) throws ApiException {
        com.squareup.okhttp.Call call = printLabelShippingPOSTValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PrintLabelShipping_POST (asynchronously)
     * 
     * @param companyId  (required)
     * @param containerNbr  (required)
     * @param facilityId  (required)
     * @param id  (required)
     * @param labelDesignerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printLabelShippingPOSTAsync(BigDecimal companyId, String containerNbr, BigDecimal facilityId, BigDecimal id, String labelDesignerCode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printLabelShippingPOSTValidateBeforeCall(companyId, containerNbr, facilityId, id, labelDesignerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
