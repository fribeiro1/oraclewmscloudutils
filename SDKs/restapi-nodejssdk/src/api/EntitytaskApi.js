/*
 * REST API
 * This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RestApi) {
      root.RestApi = {};
    }
    root.RestApi.EntitytaskApi = factory(root.RestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Entitytask service.
   * @module api/EntitytaskApi
   * @version 1.0
   */

  /**
   * Constructs a new EntitytaskApi. 
   * @alias module:api/EntitytaskApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the entityTaskByIdGET operation.
     * @callback module:api/EntitytaskApi~entityTaskByIdGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EntityTaskById_GET
     * 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields 
     * @param {module:api/EntitytaskApi~entityTaskByIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.entityTaskByIdGET = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entityTaskByIdGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/task/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entityTaskDescribeGET operation.
     * @callback module:api/EntitytaskApi~entityTaskDescribeGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EntityTaskDescribe_GET
     * 
     * @param {module:api/EntitytaskApi~entityTaskDescribeGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.entityTaskDescribeGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/task/describe', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entityTaskGET operation.
     * @callback module:api/EntitytaskApi~entityTaskGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EntityTask_GET
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields 
     * @param {String} opts.ordering 
     * @param {module:model/String} opts.pageMode  (default to paged)
     * @param {Number} opts.facilityId 
     * @param {String} opts.facilityIdCode 
     * @param {String} opts.locationBarcode 
     * @param {String} opts.taskType 
     * @param {String} opts.orderingRule 
     * @param {module:api/EntitytaskApi~entityTaskGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.entityTaskGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
        'ordering': opts['ordering'],
        'page_mode': opts['pageMode'],
        'facility_id': opts['facilityId'],
        'facility_id__code': opts['facilityIdCode'],
        'location_barcode': opts['locationBarcode'],
        'task_type': opts['taskType'],
        'ordering_rule': opts['orderingRule'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/task', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entityTaskNextTaskGET operation.
     * @callback module:api/EntitytaskApi~entityTaskNextTaskGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EntityTaskNextTask_GET
     * 
     * @param {Number} facilityId 
     * @param {String} facilityIdCode 
     * @param {String} locationBarcode 
     * @param {String} orderingRule 
     * @param {String} taskType 
     * @param {module:api/EntitytaskApi~entityTaskNextTaskGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.entityTaskNextTaskGET = function(facilityId, facilityIdCode, locationBarcode, orderingRule, taskType, callback) {
      var postBody = null;

      // verify the required parameter 'facilityId' is set
      if (facilityId === undefined || facilityId === null) {
        throw new Error("Missing the required parameter 'facilityId' when calling entityTaskNextTaskGET");
      }

      // verify the required parameter 'facilityIdCode' is set
      if (facilityIdCode === undefined || facilityIdCode === null) {
        throw new Error("Missing the required parameter 'facilityIdCode' when calling entityTaskNextTaskGET");
      }

      // verify the required parameter 'locationBarcode' is set
      if (locationBarcode === undefined || locationBarcode === null) {
        throw new Error("Missing the required parameter 'locationBarcode' when calling entityTaskNextTaskGET");
      }

      // verify the required parameter 'orderingRule' is set
      if (orderingRule === undefined || orderingRule === null) {
        throw new Error("Missing the required parameter 'orderingRule' when calling entityTaskNextTaskGET");
      }

      // verify the required parameter 'taskType' is set
      if (taskType === undefined || taskType === null) {
        throw new Error("Missing the required parameter 'taskType' when calling entityTaskNextTaskGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'facility_id': facilityId,
        'facility_id__code': facilityIdCode,
        'location_barcode': locationBarcode,
        'ordering_rule': orderingRule,
        'task_type': taskType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/entity/task/next_task', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
