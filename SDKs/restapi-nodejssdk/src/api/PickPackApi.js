/*
 * REST API
 * This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RestApi) {
      root.RestApi = {};
    }
    root.RestApi.PickPackApi = factory(root.RestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * PickPack service.
   * @module api/PickPackApi
   * @version 1.0
   */

  /**
   * Constructs a new PickPackApi. 
   * @alias module:api/PickPackApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the pickPackCloseLpnPOST operation.
     * @callback module:api/PickPackApi~pickPackCloseLpnPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PickPackCloseLpn_POST
     * 
     * @param {String} toContainerNbr 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asyncFlg 
     * @param {String} opts.closeContainerStatus 
     * @param {Number} opts.companyId 
     * @param {String} opts.companyIdCode 
     * @param {Number} opts.facilityId 
     * @param {String} opts.facilityIdCode 
     * @param {String} opts.reasonCode 
     * @param {Boolean} opts.shortOnCloseFlg 
     * @param {Boolean} opts.updateInventoryOnShortFlg 
     * @param {String} opts.toContainerCode 
     * @param {module:api/PickPackApi~pickPackCloseLpnPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.pickPackCloseLpnPOST = function(toContainerNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'toContainerNbr' is set
      if (toContainerNbr === undefined || toContainerNbr === null) {
        throw new Error("Missing the required parameter 'toContainerNbr' when calling pickPackCloseLpnPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'async_flg': opts['asyncFlg'],
        'close_container_status': opts['closeContainerStatus'],
        'company_id': opts['companyId'],
        'company_id__code': opts['companyIdCode'],
        'facility_id': opts['facilityId'],
        'facility_id__code': opts['facilityIdCode'],
        'reason_code': opts['reasonCode'],
        'short_on_close_flg': opts['shortOnCloseFlg'],
        'to_container_nbr': toContainerNbr,
        'update_inventory_on_short_flg': opts['updateInventoryOnShortFlg'],
        'to_container__code': opts['toContainerCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/pick_pack/close_lpn', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pickPackPickConfirmPOST operation.
     * @callback module:api/PickPackApi~pickPackPickConfirmPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PickPackPickConfirm_POST
     * 
     * @param {Boolean} asyncFlg 
     * @param {Boolean} mheModeFlg 
     * @param {String} orderNbr 
     * @param {String} waveNbr 
     * @param {Object} opts Optional parameters
     * @param {String} opts.allocationUom 
     * @param {String} opts.batchNbr 
     * @param {String} opts.closeContainerStatus 
     * @param {Number} opts.companyId 
     * @param {String} opts.companyIdCode 
     * @param {Number} opts.facilityId 
     * @param {String} opts.facilityIdCode 
     * @param {String} opts.fromContainerNbr 
     * @param {String} opts.itemAlternateCode 
     * @param {String} opts.itemBarcode 
     * @param {String} opts.mheSystemCode 
     * @param {String} opts.pickLocation 
     * @param {Number} opts.qty 
     * @param {String} opts.reasonCode 
     * @param {Boolean} opts.shortFlg 
     * @param {Boolean} opts.shortOnCloseFlg 
     * @param {String} opts.toContainerNbr 
     * @param {String} opts.uomQty 
     * @param {Boolean} opts.updateInventoryOnShortFlg 
     * @param {module:api/PickPackApi~pickPackPickConfirmPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.pickPackPickConfirmPOST = function(asyncFlg, mheModeFlg, orderNbr, waveNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'asyncFlg' is set
      if (asyncFlg === undefined || asyncFlg === null) {
        throw new Error("Missing the required parameter 'asyncFlg' when calling pickPackPickConfirmPOST");
      }

      // verify the required parameter 'mheModeFlg' is set
      if (mheModeFlg === undefined || mheModeFlg === null) {
        throw new Error("Missing the required parameter 'mheModeFlg' when calling pickPackPickConfirmPOST");
      }

      // verify the required parameter 'orderNbr' is set
      if (orderNbr === undefined || orderNbr === null) {
        throw new Error("Missing the required parameter 'orderNbr' when calling pickPackPickConfirmPOST");
      }

      // verify the required parameter 'waveNbr' is set
      if (waveNbr === undefined || waveNbr === null) {
        throw new Error("Missing the required parameter 'waveNbr' when calling pickPackPickConfirmPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'allocation_uom': opts['allocationUom'],
        'async_flg': asyncFlg,
        'batch_nbr': opts['batchNbr'],
        'close_container_status': opts['closeContainerStatus'],
        'company_id': opts['companyId'],
        'company_id__code': opts['companyIdCode'],
        'facility_id': opts['facilityId'],
        'facility_id__code': opts['facilityIdCode'],
        'from_container_nbr': opts['fromContainerNbr'],
        'item_alternate_code': opts['itemAlternateCode'],
        'item_barcode': opts['itemBarcode'],
        'mhe_mode_flg': mheModeFlg,
        'mhe_system_code': opts['mheSystemCode'],
        'order_nbr': orderNbr,
        'pick_location': opts['pickLocation'],
        'qty': opts['qty'],
        'reason_code': opts['reasonCode'],
        'short_flg': opts['shortFlg'],
        'short_on_close_flg': opts['shortOnCloseFlg'],
        'to_container_nbr': opts['toContainerNbr'],
        'uom_qty': opts['uomQty'],
        'update_inventory_on_short_flg': opts['updateInventoryOnShortFlg'],
        'wave_nbr': waveNbr,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/pick_pack/pick_confirm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pickPackWaveCompletePOST operation.
     * @callback module:api/PickPackApi~pickPackWaveCompletePOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PickPackWaveComplete_POST
     * 
     * @param {String} waveNbr 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asyncFlg 
     * @param {String} opts.closeContainerStatus 
     * @param {Number} opts.companyId 
     * @param {String} opts.companyIdCode 
     * @param {Number} opts.facilityId 
     * @param {String} opts.facilityIdCode 
     * @param {String} opts.mheSystemCode 
     * @param {String} opts.reasonCode 
     * @param {Boolean} opts.updateInventoryOnShortFlg 
     * @param {module:api/PickPackApi~pickPackWaveCompletePOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.pickPackWaveCompletePOST = function(waveNbr, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'waveNbr' is set
      if (waveNbr === undefined || waveNbr === null) {
        throw new Error("Missing the required parameter 'waveNbr' when calling pickPackWaveCompletePOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'async_flg': opts['asyncFlg'],
        'close_container_status': opts['closeContainerStatus'],
        'company_id': opts['companyId'],
        'company_id__code': opts['companyIdCode'],
        'facility_id': opts['facilityId'],
        'facility_id__code': opts['facilityIdCode'],
        'mhe_system_code': opts['mheSystemCode'],
        'reason_code': opts['reasonCode'],
        'update_inventory_on_short_flg': opts['updateInventoryOnShortFlg'],
        'wave_nbr': waveNbr,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/pick_pack/wave_complete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
