/*
 * REST API
 * This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RestApi);
  }
}(this, function(expect, RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RestApi.EntityloadApi();
  });

  describe('(package)', function() {
    describe('EntityloadApi', function() {
      describe('entityLoadByIdGET', function() {
        it('should call entityLoadByIdGET successfully', function(done) {
          // TODO: uncomment, update parameter values for entityLoadByIdGET call and complete the assertions
          /*
          var id = 8.14;
          var opts = {};
          opts.fields = "fields_example";

          instance.entityLoadByIdGET(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadByIdPATCH', function() {
        it('should call entityLoadByIdPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for entityLoadByIdPATCH call and complete the assertions
          /*
          var id = 8.14;
          var opts = {};
          opts.fields = "fields_example";

          instance.entityLoadByIdPATCH(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadCheckInByIdPOST', function() {
        it('should call entityLoadCheckInByIdPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for entityLoadCheckInByIdPOST call and complete the assertions
          /*
          var id = 8.14;

          instance.entityLoadCheckInByIdPOST(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadCheckInPOST', function() {
        it('should call entityLoadCheckInPOST successfully', function(done) {
          // TODO: uncomment entityLoadCheckInPOST call and complete the assertions
          /*

          instance.entityLoadCheckInPOST(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadCheckOutByIdPOST', function() {
        it('should call entityLoadCheckOutByIdPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for entityLoadCheckOutByIdPOST call and complete the assertions
          /*
          var id = 8.14;

          instance.entityLoadCheckOutByIdPOST(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadCheckOutPOST', function() {
        it('should call entityLoadCheckOutPOST successfully', function(done) {
          // TODO: uncomment entityLoadCheckOutPOST call and complete the assertions
          /*

          instance.entityLoadCheckOutPOST(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadDescribeGET', function() {
        it('should call entityLoadDescribeGET successfully', function(done) {
          // TODO: uncomment entityLoadDescribeGET call and complete the assertions
          /*

          instance.entityLoadDescribeGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadGET', function() {
        it('should call entityLoadGET successfully', function(done) {
          // TODO: uncomment, update parameter values for entityLoadGET call and complete the assertions
          /*
          var opts = {};
          opts.fields = "fields_example";
          opts.ordering = "ordering_example";
          opts.pageMode = "paged";

          instance.entityLoadGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadShipByIdPOST', function() {
        it('should call entityLoadShipByIdPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for entityLoadShipByIdPOST call and complete the assertions
          /*
          var id = 8.14;

          instance.entityLoadShipByIdPOST(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entityLoadShipPOST', function() {
        it('should call entityLoadShipPOST successfully', function(done) {
          // TODO: uncomment entityLoadShipPOST call and complete the assertions
          /*

          instance.entityLoadShipPOST(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
