# coding: utf-8

"""
    REST API

    This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PickPackApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pick_pack_close_lpn_post(self, to_container_nbr, **kwargs):  # noqa: E501
        """PickPackCloseLpn_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_pack_close_lpn_post(to_container_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_container_nbr:  (required)
        :param bool async_flg: 
        :param str close_container_status: 
        :param float company_id: 
        :param str company_id__code: 
        :param float facility_id: 
        :param str facility_id__code: 
        :param str reason_code: 
        :param bool short_on_close_flg: 
        :param bool update_inventory_on_short_flg: 
        :param str to_container__code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pick_pack_close_lpn_post_with_http_info(to_container_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.pick_pack_close_lpn_post_with_http_info(to_container_nbr, **kwargs)  # noqa: E501
            return data

    def pick_pack_close_lpn_post_with_http_info(self, to_container_nbr, **kwargs):  # noqa: E501
        """PickPackCloseLpn_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_pack_close_lpn_post_with_http_info(to_container_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_container_nbr:  (required)
        :param bool async_flg: 
        :param str close_container_status: 
        :param float company_id: 
        :param str company_id__code: 
        :param float facility_id: 
        :param str facility_id__code: 
        :param str reason_code: 
        :param bool short_on_close_flg: 
        :param bool update_inventory_on_short_flg: 
        :param str to_container__code: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_container_nbr', 'async_flg', 'close_container_status', 'company_id', 'company_id__code', 'facility_id', 'facility_id__code', 'reason_code', 'short_on_close_flg', 'update_inventory_on_short_flg', 'to_container__code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pick_pack_close_lpn_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_container_nbr' is set
        if ('to_container_nbr' not in params or
                params['to_container_nbr'] is None):
            raise ValueError("Missing the required parameter `to_container_nbr` when calling `pick_pack_close_lpn_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'async_flg' in params:
            query_params.append(('async_flg', params['async_flg']))  # noqa: E501
        if 'close_container_status' in params:
            query_params.append(('close_container_status', params['close_container_status']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'company_id__code' in params:
            query_params.append(('company_id__code', params['company_id__code']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'facility_id__code' in params:
            query_params.append(('facility_id__code', params['facility_id__code']))  # noqa: E501
        if 'reason_code' in params:
            query_params.append(('reason_code', params['reason_code']))  # noqa: E501
        if 'short_on_close_flg' in params:
            query_params.append(('short_on_close_flg', params['short_on_close_flg']))  # noqa: E501
        if 'to_container_nbr' in params:
            query_params.append(('to_container_nbr', params['to_container_nbr']))  # noqa: E501
        if 'update_inventory_on_short_flg' in params:
            query_params.append(('update_inventory_on_short_flg', params['update_inventory_on_short_flg']))  # noqa: E501
        if 'to_container__code' in params:
            query_params.append(('to_container__code', params['to_container__code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/pick_pack/close_lpn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pick_pack_pick_confirm_post(self, async_flg, mhe_mode_flg, order_nbr, wave_nbr, **kwargs):  # noqa: E501
        """PickPackPickConfirm_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_pack_pick_confirm_post(async_flg, mhe_mode_flg, order_nbr, wave_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool async_flg:  (required)
        :param bool mhe_mode_flg:  (required)
        :param str order_nbr:  (required)
        :param str wave_nbr:  (required)
        :param str allocation_uom: 
        :param str batch_nbr: 
        :param str close_container_status: 
        :param float company_id: 
        :param str company_id__code: 
        :param float facility_id: 
        :param str facility_id__code: 
        :param str from_container_nbr: 
        :param str item_alternate_code: 
        :param str item_barcode: 
        :param str mhe_system_code: 
        :param str pick_location: 
        :param float qty: 
        :param str reason_code: 
        :param bool short_flg: 
        :param bool short_on_close_flg: 
        :param str to_container_nbr: 
        :param str uom_qty: 
        :param bool update_inventory_on_short_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pick_pack_pick_confirm_post_with_http_info(async_flg, mhe_mode_flg, order_nbr, wave_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.pick_pack_pick_confirm_post_with_http_info(async_flg, mhe_mode_flg, order_nbr, wave_nbr, **kwargs)  # noqa: E501
            return data

    def pick_pack_pick_confirm_post_with_http_info(self, async_flg, mhe_mode_flg, order_nbr, wave_nbr, **kwargs):  # noqa: E501
        """PickPackPickConfirm_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_pack_pick_confirm_post_with_http_info(async_flg, mhe_mode_flg, order_nbr, wave_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool async_flg:  (required)
        :param bool mhe_mode_flg:  (required)
        :param str order_nbr:  (required)
        :param str wave_nbr:  (required)
        :param str allocation_uom: 
        :param str batch_nbr: 
        :param str close_container_status: 
        :param float company_id: 
        :param str company_id__code: 
        :param float facility_id: 
        :param str facility_id__code: 
        :param str from_container_nbr: 
        :param str item_alternate_code: 
        :param str item_barcode: 
        :param str mhe_system_code: 
        :param str pick_location: 
        :param float qty: 
        :param str reason_code: 
        :param bool short_flg: 
        :param bool short_on_close_flg: 
        :param str to_container_nbr: 
        :param str uom_qty: 
        :param bool update_inventory_on_short_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['async_flg', 'mhe_mode_flg', 'order_nbr', 'wave_nbr', 'allocation_uom', 'batch_nbr', 'close_container_status', 'company_id', 'company_id__code', 'facility_id', 'facility_id__code', 'from_container_nbr', 'item_alternate_code', 'item_barcode', 'mhe_system_code', 'pick_location', 'qty', 'reason_code', 'short_flg', 'short_on_close_flg', 'to_container_nbr', 'uom_qty', 'update_inventory_on_short_flg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pick_pack_pick_confirm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'async_flg' is set
        if ('async_flg' not in params or
                params['async_flg'] is None):
            raise ValueError("Missing the required parameter `async_flg` when calling `pick_pack_pick_confirm_post`")  # noqa: E501
        # verify the required parameter 'mhe_mode_flg' is set
        if ('mhe_mode_flg' not in params or
                params['mhe_mode_flg'] is None):
            raise ValueError("Missing the required parameter `mhe_mode_flg` when calling `pick_pack_pick_confirm_post`")  # noqa: E501
        # verify the required parameter 'order_nbr' is set
        if ('order_nbr' not in params or
                params['order_nbr'] is None):
            raise ValueError("Missing the required parameter `order_nbr` when calling `pick_pack_pick_confirm_post`")  # noqa: E501
        # verify the required parameter 'wave_nbr' is set
        if ('wave_nbr' not in params or
                params['wave_nbr'] is None):
            raise ValueError("Missing the required parameter `wave_nbr` when calling `pick_pack_pick_confirm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'allocation_uom' in params:
            query_params.append(('allocation_uom', params['allocation_uom']))  # noqa: E501
        if 'async_flg' in params:
            query_params.append(('async_flg', params['async_flg']))  # noqa: E501
        if 'batch_nbr' in params:
            query_params.append(('batch_nbr', params['batch_nbr']))  # noqa: E501
        if 'close_container_status' in params:
            query_params.append(('close_container_status', params['close_container_status']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'company_id__code' in params:
            query_params.append(('company_id__code', params['company_id__code']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'facility_id__code' in params:
            query_params.append(('facility_id__code', params['facility_id__code']))  # noqa: E501
        if 'from_container_nbr' in params:
            query_params.append(('from_container_nbr', params['from_container_nbr']))  # noqa: E501
        if 'item_alternate_code' in params:
            query_params.append(('item_alternate_code', params['item_alternate_code']))  # noqa: E501
        if 'item_barcode' in params:
            query_params.append(('item_barcode', params['item_barcode']))  # noqa: E501
        if 'mhe_mode_flg' in params:
            query_params.append(('mhe_mode_flg', params['mhe_mode_flg']))  # noqa: E501
        if 'mhe_system_code' in params:
            query_params.append(('mhe_system_code', params['mhe_system_code']))  # noqa: E501
        if 'order_nbr' in params:
            query_params.append(('order_nbr', params['order_nbr']))  # noqa: E501
        if 'pick_location' in params:
            query_params.append(('pick_location', params['pick_location']))  # noqa: E501
        if 'qty' in params:
            query_params.append(('qty', params['qty']))  # noqa: E501
        if 'reason_code' in params:
            query_params.append(('reason_code', params['reason_code']))  # noqa: E501
        if 'short_flg' in params:
            query_params.append(('short_flg', params['short_flg']))  # noqa: E501
        if 'short_on_close_flg' in params:
            query_params.append(('short_on_close_flg', params['short_on_close_flg']))  # noqa: E501
        if 'to_container_nbr' in params:
            query_params.append(('to_container_nbr', params['to_container_nbr']))  # noqa: E501
        if 'uom_qty' in params:
            query_params.append(('uom_qty', params['uom_qty']))  # noqa: E501
        if 'update_inventory_on_short_flg' in params:
            query_params.append(('update_inventory_on_short_flg', params['update_inventory_on_short_flg']))  # noqa: E501
        if 'wave_nbr' in params:
            query_params.append(('wave_nbr', params['wave_nbr']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/pick_pack/pick_confirm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pick_pack_wave_complete_post(self, wave_nbr, **kwargs):  # noqa: E501
        """PickPackWaveComplete_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_pack_wave_complete_post(wave_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wave_nbr:  (required)
        :param bool async_flg: 
        :param str close_container_status: 
        :param float company_id: 
        :param str company_id__code: 
        :param float facility_id: 
        :param str facility_id__code: 
        :param str mhe_system_code: 
        :param str reason_code: 
        :param bool update_inventory_on_short_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pick_pack_wave_complete_post_with_http_info(wave_nbr, **kwargs)  # noqa: E501
        else:
            (data) = self.pick_pack_wave_complete_post_with_http_info(wave_nbr, **kwargs)  # noqa: E501
            return data

    def pick_pack_wave_complete_post_with_http_info(self, wave_nbr, **kwargs):  # noqa: E501
        """PickPackWaveComplete_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pick_pack_wave_complete_post_with_http_info(wave_nbr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wave_nbr:  (required)
        :param bool async_flg: 
        :param str close_container_status: 
        :param float company_id: 
        :param str company_id__code: 
        :param float facility_id: 
        :param str facility_id__code: 
        :param str mhe_system_code: 
        :param str reason_code: 
        :param bool update_inventory_on_short_flg: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wave_nbr', 'async_flg', 'close_container_status', 'company_id', 'company_id__code', 'facility_id', 'facility_id__code', 'mhe_system_code', 'reason_code', 'update_inventory_on_short_flg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pick_pack_wave_complete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wave_nbr' is set
        if ('wave_nbr' not in params or
                params['wave_nbr'] is None):
            raise ValueError("Missing the required parameter `wave_nbr` when calling `pick_pack_wave_complete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'async_flg' in params:
            query_params.append(('async_flg', params['async_flg']))  # noqa: E501
        if 'close_container_status' in params:
            query_params.append(('close_container_status', params['close_container_status']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'company_id__code' in params:
            query_params.append(('company_id__code', params['company_id__code']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'facility_id__code' in params:
            query_params.append(('facility_id__code', params['facility_id__code']))  # noqa: E501
        if 'mhe_system_code' in params:
            query_params.append(('mhe_system_code', params['mhe_system_code']))  # noqa: E501
        if 'reason_code' in params:
            query_params.append(('reason_code', params['reason_code']))  # noqa: E501
        if 'update_inventory_on_short_flg' in params:
            query_params.append(('update_inventory_on_short_flg', params['update_inventory_on_short_flg']))  # noqa: E501
        if 'wave_nbr' in params:
            query_params.append(('wave_nbr', params['wave_nbr']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/pick_pack/wave_complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
