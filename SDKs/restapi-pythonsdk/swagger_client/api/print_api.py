# coding: utf-8

"""
    REST API

    This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrintApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def print_label_ib_container_get(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelIbContainer_GET  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_ib_container_get(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_label_ib_container_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.print_label_ib_container_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
            return data

    def print_label_ib_container_get_with_http_info(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelIbContainer_GET  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_ib_container_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'container_nbr', 'facility_id', 'id', 'label_designer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_label_ib_container_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `print_label_ib_container_get`")  # noqa: E501
        # verify the required parameter 'container_nbr' is set
        if ('container_nbr' not in params or
                params['container_nbr'] is None):
            raise ValueError("Missing the required parameter `container_nbr` when calling `print_label_ib_container_get`")  # noqa: E501
        # verify the required parameter 'facility_id' is set
        if ('facility_id' not in params or
                params['facility_id'] is None):
            raise ValueError("Missing the required parameter `facility_id` when calling `print_label_ib_container_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_label_ib_container_get`")  # noqa: E501
        # verify the required parameter 'label_designer_code' is set
        if ('label_designer_code' not in params or
                params['label_designer_code'] is None):
            raise ValueError("Missing the required parameter `label_designer_code` when calling `print_label_ib_container_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'container_nbr' in params:
            query_params.append(('container_nbr', params['container_nbr']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'label_designer_code' in params:
            query_params.append(('label_designer_code', params['label_designer_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/print/label/ib_container', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_label_ib_container_post(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelIbContainer_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_ib_container_post(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_label_ib_container_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.print_label_ib_container_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
            return data

    def print_label_ib_container_post_with_http_info(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelIbContainer_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_ib_container_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'container_nbr', 'facility_id', 'id', 'label_designer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_label_ib_container_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `print_label_ib_container_post`")  # noqa: E501
        # verify the required parameter 'container_nbr' is set
        if ('container_nbr' not in params or
                params['container_nbr'] is None):
            raise ValueError("Missing the required parameter `container_nbr` when calling `print_label_ib_container_post`")  # noqa: E501
        # verify the required parameter 'facility_id' is set
        if ('facility_id' not in params or
                params['facility_id'] is None):
            raise ValueError("Missing the required parameter `facility_id` when calling `print_label_ib_container_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_label_ib_container_post`")  # noqa: E501
        # verify the required parameter 'label_designer_code' is set
        if ('label_designer_code' not in params or
                params['label_designer_code'] is None):
            raise ValueError("Missing the required parameter `label_designer_code` when calling `print_label_ib_container_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'container_nbr' in params:
            query_params.append(('container_nbr', params['container_nbr']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'label_designer_code' in params:
            query_params.append(('label_designer_code', params['label_designer_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/print/label/ib_container', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_label_pallet_get(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelPallet_GET  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_pallet_get(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_label_pallet_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.print_label_pallet_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
            return data

    def print_label_pallet_get_with_http_info(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelPallet_GET  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_pallet_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'container_nbr', 'facility_id', 'id', 'label_designer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_label_pallet_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `print_label_pallet_get`")  # noqa: E501
        # verify the required parameter 'container_nbr' is set
        if ('container_nbr' not in params or
                params['container_nbr'] is None):
            raise ValueError("Missing the required parameter `container_nbr` when calling `print_label_pallet_get`")  # noqa: E501
        # verify the required parameter 'facility_id' is set
        if ('facility_id' not in params or
                params['facility_id'] is None):
            raise ValueError("Missing the required parameter `facility_id` when calling `print_label_pallet_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_label_pallet_get`")  # noqa: E501
        # verify the required parameter 'label_designer_code' is set
        if ('label_designer_code' not in params or
                params['label_designer_code'] is None):
            raise ValueError("Missing the required parameter `label_designer_code` when calling `print_label_pallet_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'container_nbr' in params:
            query_params.append(('container_nbr', params['container_nbr']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'label_designer_code' in params:
            query_params.append(('label_designer_code', params['label_designer_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/print/label/pallet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_label_pallet_post(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelPallet_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_pallet_post(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_label_pallet_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.print_label_pallet_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
            return data

    def print_label_pallet_post_with_http_info(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelPallet_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_pallet_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'container_nbr', 'facility_id', 'id', 'label_designer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_label_pallet_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `print_label_pallet_post`")  # noqa: E501
        # verify the required parameter 'container_nbr' is set
        if ('container_nbr' not in params or
                params['container_nbr'] is None):
            raise ValueError("Missing the required parameter `container_nbr` when calling `print_label_pallet_post`")  # noqa: E501
        # verify the required parameter 'facility_id' is set
        if ('facility_id' not in params or
                params['facility_id'] is None):
            raise ValueError("Missing the required parameter `facility_id` when calling `print_label_pallet_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_label_pallet_post`")  # noqa: E501
        # verify the required parameter 'label_designer_code' is set
        if ('label_designer_code' not in params or
                params['label_designer_code'] is None):
            raise ValueError("Missing the required parameter `label_designer_code` when calling `print_label_pallet_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'container_nbr' in params:
            query_params.append(('container_nbr', params['container_nbr']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'label_designer_code' in params:
            query_params.append(('label_designer_code', params['label_designer_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/print/label/pallet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_label_shipping_get(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelShipping_GET  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_shipping_get(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_label_shipping_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.print_label_shipping_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
            return data

    def print_label_shipping_get_with_http_info(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelShipping_GET  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_shipping_get_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'container_nbr', 'facility_id', 'id', 'label_designer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_label_shipping_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `print_label_shipping_get`")  # noqa: E501
        # verify the required parameter 'container_nbr' is set
        if ('container_nbr' not in params or
                params['container_nbr'] is None):
            raise ValueError("Missing the required parameter `container_nbr` when calling `print_label_shipping_get`")  # noqa: E501
        # verify the required parameter 'facility_id' is set
        if ('facility_id' not in params or
                params['facility_id'] is None):
            raise ValueError("Missing the required parameter `facility_id` when calling `print_label_shipping_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_label_shipping_get`")  # noqa: E501
        # verify the required parameter 'label_designer_code' is set
        if ('label_designer_code' not in params or
                params['label_designer_code'] is None):
            raise ValueError("Missing the required parameter `label_designer_code` when calling `print_label_shipping_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'container_nbr' in params:
            query_params.append(('container_nbr', params['container_nbr']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'label_designer_code' in params:
            query_params.append(('label_designer_code', params['label_designer_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/print/label/shipping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_label_shipping_post(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelShipping_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_shipping_post(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_label_shipping_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.print_label_shipping_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, **kwargs)  # noqa: E501
            return data

    def print_label_shipping_post_with_http_info(self, company_id, container_nbr, facility_id, id, label_designer_code, **kwargs):  # noqa: E501
        """PrintLabelShipping_POST  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_label_shipping_post_with_http_info(company_id, container_nbr, facility_id, id, label_designer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float company_id:  (required)
        :param str container_nbr:  (required)
        :param float facility_id:  (required)
        :param float id:  (required)
        :param str label_designer_code:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'container_nbr', 'facility_id', 'id', 'label_designer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_label_shipping_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `print_label_shipping_post`")  # noqa: E501
        # verify the required parameter 'container_nbr' is set
        if ('container_nbr' not in params or
                params['container_nbr'] is None):
            raise ValueError("Missing the required parameter `container_nbr` when calling `print_label_shipping_post`")  # noqa: E501
        # verify the required parameter 'facility_id' is set
        if ('facility_id' not in params or
                params['facility_id'] is None):
            raise ValueError("Missing the required parameter `facility_id` when calling `print_label_shipping_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_label_shipping_post`")  # noqa: E501
        # verify the required parameter 'label_designer_code' is set
        if ('label_designer_code' not in params or
                params['label_designer_code'] is None):
            raise ValueError("Missing the required parameter `label_designer_code` when calling `print_label_shipping_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501
        if 'container_nbr' in params:
            query_params.append(('container_nbr', params['container_nbr']))  # noqa: E501
        if 'facility_id' in params:
            query_params.append(('facility_id', params['facility_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'label_designer_code' in params:
            query_params.append(('label_designer_code', params['label_designer_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
#        auth_settings = ['basic', 'oauth2']  # noqa: E501
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/print/label/shipping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
