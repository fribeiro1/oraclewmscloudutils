=begin
#REST API

#This is a sample definition of the Oracle WMS Cloud REST API.  The views expressed here are my own and do not necessarily reflect the views of Oracle.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class PickPackApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # PickPackCloseLpn_POST
    # 
    # @param to_container_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async_flg 
    # @option opts [String] :close_container_status 
    # @option opts [Float] :company_id 
    # @option opts [String] :company_id__code 
    # @option opts [Float] :facility_id 
    # @option opts [String] :facility_id__code 
    # @option opts [String] :reason_code 
    # @option opts [BOOLEAN] :short_on_close_flg 
    # @option opts [BOOLEAN] :update_inventory_on_short_flg 
    # @option opts [String] :to_container__code 
    # @return [Object]
    def pick_pack_close_lpn_post(to_container_nbr, opts = {})
      data, _status_code, _headers = pick_pack_close_lpn_post_with_http_info(to_container_nbr, opts)
      data
    end

    # PickPackCloseLpn_POST
    # 
    # @param to_container_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async_flg 
    # @option opts [String] :close_container_status 
    # @option opts [Float] :company_id 
    # @option opts [String] :company_id__code 
    # @option opts [Float] :facility_id 
    # @option opts [String] :facility_id__code 
    # @option opts [String] :reason_code 
    # @option opts [BOOLEAN] :short_on_close_flg 
    # @option opts [BOOLEAN] :update_inventory_on_short_flg 
    # @option opts [String] :to_container__code 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def pick_pack_close_lpn_post_with_http_info(to_container_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickPackApi.pick_pack_close_lpn_post ...'
      end
      # verify the required parameter 'to_container_nbr' is set
      if @api_client.config.client_side_validation && to_container_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'to_container_nbr' when calling PickPackApi.pick_pack_close_lpn_post"
      end
      # resource path
      local_var_path = '/pick_pack/close_lpn'

      # query parameters
      query_params = {}
      query_params[:'to_container_nbr'] = to_container_nbr
      query_params[:'async_flg'] = opts[:'async_flg'] if !opts[:'async_flg'].nil?
      query_params[:'close_container_status'] = opts[:'close_container_status'] if !opts[:'close_container_status'].nil?
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'company_id__code'] = opts[:'company_id__code'] if !opts[:'company_id__code'].nil?
      query_params[:'facility_id'] = opts[:'facility_id'] if !opts[:'facility_id'].nil?
      query_params[:'facility_id__code'] = opts[:'facility_id__code'] if !opts[:'facility_id__code'].nil?
      query_params[:'reason_code'] = opts[:'reason_code'] if !opts[:'reason_code'].nil?
      query_params[:'short_on_close_flg'] = opts[:'short_on_close_flg'] if !opts[:'short_on_close_flg'].nil?
      query_params[:'update_inventory_on_short_flg'] = opts[:'update_inventory_on_short_flg'] if !opts[:'update_inventory_on_short_flg'].nil?
      query_params[:'to_container__code'] = opts[:'to_container__code'] if !opts[:'to_container__code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
#      auth_names = ['basic', 'oauth2']
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickPackApi#pick_pack_close_lpn_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PickPackPickConfirm_POST
    # 
    # @param async_flg 
    # @param mhe_mode_flg 
    # @param order_nbr 
    # @param wave_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :allocation_uom 
    # @option opts [String] :batch_nbr 
    # @option opts [String] :close_container_status 
    # @option opts [Float] :company_id 
    # @option opts [String] :company_id__code 
    # @option opts [Float] :facility_id 
    # @option opts [String] :facility_id__code 
    # @option opts [String] :from_container_nbr 
    # @option opts [String] :item_alternate_code 
    # @option opts [String] :item_barcode 
    # @option opts [String] :mhe_system_code 
    # @option opts [String] :pick_location 
    # @option opts [Float] :qty 
    # @option opts [String] :reason_code 
    # @option opts [BOOLEAN] :short_flg 
    # @option opts [BOOLEAN] :short_on_close_flg 
    # @option opts [String] :to_container_nbr 
    # @option opts [String] :uom_qty 
    # @option opts [BOOLEAN] :update_inventory_on_short_flg 
    # @return [Object]
    def pick_pack_pick_confirm_post(async_flg, mhe_mode_flg, order_nbr, wave_nbr, opts = {})
      data, _status_code, _headers = pick_pack_pick_confirm_post_with_http_info(async_flg, mhe_mode_flg, order_nbr, wave_nbr, opts)
      data
    end

    # PickPackPickConfirm_POST
    # 
    # @param async_flg 
    # @param mhe_mode_flg 
    # @param order_nbr 
    # @param wave_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :allocation_uom 
    # @option opts [String] :batch_nbr 
    # @option opts [String] :close_container_status 
    # @option opts [Float] :company_id 
    # @option opts [String] :company_id__code 
    # @option opts [Float] :facility_id 
    # @option opts [String] :facility_id__code 
    # @option opts [String] :from_container_nbr 
    # @option opts [String] :item_alternate_code 
    # @option opts [String] :item_barcode 
    # @option opts [String] :mhe_system_code 
    # @option opts [String] :pick_location 
    # @option opts [Float] :qty 
    # @option opts [String] :reason_code 
    # @option opts [BOOLEAN] :short_flg 
    # @option opts [BOOLEAN] :short_on_close_flg 
    # @option opts [String] :to_container_nbr 
    # @option opts [String] :uom_qty 
    # @option opts [BOOLEAN] :update_inventory_on_short_flg 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def pick_pack_pick_confirm_post_with_http_info(async_flg, mhe_mode_flg, order_nbr, wave_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickPackApi.pick_pack_pick_confirm_post ...'
      end
      # verify the required parameter 'async_flg' is set
      if @api_client.config.client_side_validation && async_flg.nil?
        fail ArgumentError, "Missing the required parameter 'async_flg' when calling PickPackApi.pick_pack_pick_confirm_post"
      end
      # verify the required parameter 'mhe_mode_flg' is set
      if @api_client.config.client_side_validation && mhe_mode_flg.nil?
        fail ArgumentError, "Missing the required parameter 'mhe_mode_flg' when calling PickPackApi.pick_pack_pick_confirm_post"
      end
      # verify the required parameter 'order_nbr' is set
      if @api_client.config.client_side_validation && order_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'order_nbr' when calling PickPackApi.pick_pack_pick_confirm_post"
      end
      # verify the required parameter 'wave_nbr' is set
      if @api_client.config.client_side_validation && wave_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'wave_nbr' when calling PickPackApi.pick_pack_pick_confirm_post"
      end
      # resource path
      local_var_path = '/pick_pack/pick_confirm'

      # query parameters
      query_params = {}
      query_params[:'async_flg'] = async_flg
      query_params[:'mhe_mode_flg'] = mhe_mode_flg
      query_params[:'order_nbr'] = order_nbr
      query_params[:'wave_nbr'] = wave_nbr
      query_params[:'allocation_uom'] = opts[:'allocation_uom'] if !opts[:'allocation_uom'].nil?
      query_params[:'batch_nbr'] = opts[:'batch_nbr'] if !opts[:'batch_nbr'].nil?
      query_params[:'close_container_status'] = opts[:'close_container_status'] if !opts[:'close_container_status'].nil?
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'company_id__code'] = opts[:'company_id__code'] if !opts[:'company_id__code'].nil?
      query_params[:'facility_id'] = opts[:'facility_id'] if !opts[:'facility_id'].nil?
      query_params[:'facility_id__code'] = opts[:'facility_id__code'] if !opts[:'facility_id__code'].nil?
      query_params[:'from_container_nbr'] = opts[:'from_container_nbr'] if !opts[:'from_container_nbr'].nil?
      query_params[:'item_alternate_code'] = opts[:'item_alternate_code'] if !opts[:'item_alternate_code'].nil?
      query_params[:'item_barcode'] = opts[:'item_barcode'] if !opts[:'item_barcode'].nil?
      query_params[:'mhe_system_code'] = opts[:'mhe_system_code'] if !opts[:'mhe_system_code'].nil?
      query_params[:'pick_location'] = opts[:'pick_location'] if !opts[:'pick_location'].nil?
      query_params[:'qty'] = opts[:'qty'] if !opts[:'qty'].nil?
      query_params[:'reason_code'] = opts[:'reason_code'] if !opts[:'reason_code'].nil?
      query_params[:'short_flg'] = opts[:'short_flg'] if !opts[:'short_flg'].nil?
      query_params[:'short_on_close_flg'] = opts[:'short_on_close_flg'] if !opts[:'short_on_close_flg'].nil?
      query_params[:'to_container_nbr'] = opts[:'to_container_nbr'] if !opts[:'to_container_nbr'].nil?
      query_params[:'uom_qty'] = opts[:'uom_qty'] if !opts[:'uom_qty'].nil?
      query_params[:'update_inventory_on_short_flg'] = opts[:'update_inventory_on_short_flg'] if !opts[:'update_inventory_on_short_flg'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
#      auth_names = ['basic', 'oauth2']
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickPackApi#pick_pack_pick_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PickPackWaveComplete_POST
    # 
    # @param wave_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async_flg 
    # @option opts [String] :close_container_status 
    # @option opts [Float] :company_id 
    # @option opts [String] :company_id__code 
    # @option opts [Float] :facility_id 
    # @option opts [String] :facility_id__code 
    # @option opts [String] :mhe_system_code 
    # @option opts [String] :reason_code 
    # @option opts [BOOLEAN] :update_inventory_on_short_flg 
    # @return [Object]
    def pick_pack_wave_complete_post(wave_nbr, opts = {})
      data, _status_code, _headers = pick_pack_wave_complete_post_with_http_info(wave_nbr, opts)
      data
    end

    # PickPackWaveComplete_POST
    # 
    # @param wave_nbr 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :async_flg 
    # @option opts [String] :close_container_status 
    # @option opts [Float] :company_id 
    # @option opts [String] :company_id__code 
    # @option opts [Float] :facility_id 
    # @option opts [String] :facility_id__code 
    # @option opts [String] :mhe_system_code 
    # @option opts [String] :reason_code 
    # @option opts [BOOLEAN] :update_inventory_on_short_flg 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def pick_pack_wave_complete_post_with_http_info(wave_nbr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PickPackApi.pick_pack_wave_complete_post ...'
      end
      # verify the required parameter 'wave_nbr' is set
      if @api_client.config.client_side_validation && wave_nbr.nil?
        fail ArgumentError, "Missing the required parameter 'wave_nbr' when calling PickPackApi.pick_pack_wave_complete_post"
      end
      # resource path
      local_var_path = '/pick_pack/wave_complete'

      # query parameters
      query_params = {}
      query_params[:'wave_nbr'] = wave_nbr
      query_params[:'async_flg'] = opts[:'async_flg'] if !opts[:'async_flg'].nil?
      query_params[:'close_container_status'] = opts[:'close_container_status'] if !opts[:'close_container_status'].nil?
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'company_id__code'] = opts[:'company_id__code'] if !opts[:'company_id__code'].nil?
      query_params[:'facility_id'] = opts[:'facility_id'] if !opts[:'facility_id'].nil?
      query_params[:'facility_id__code'] = opts[:'facility_id__code'] if !opts[:'facility_id__code'].nil?
      query_params[:'mhe_system_code'] = opts[:'mhe_system_code'] if !opts[:'mhe_system_code'].nil?
      query_params[:'reason_code'] = opts[:'reason_code'] if !opts[:'reason_code'].nil?
      query_params[:'update_inventory_on_short_flg'] = opts[:'update_inventory_on_short_flg'] if !opts[:'update_inventory_on_short_flg'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
#      auth_names = ['basic', 'oauth2']
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PickPackApi#pick_pack_wave_complete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
